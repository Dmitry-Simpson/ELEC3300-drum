
LA3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007870  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  08007a58  08007a58  00017a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008494  08008494  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008494  08008494  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008494  08008494  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800849c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001e0  0800867c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800867c  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f66  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7a  00000000  00000000  0003116f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00033df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00034fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7de  00000000  00000000  00036060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014dc3  00000000  00000000  0005183e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f5fd  00000000  00000000  00066601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c50  00000000  00000000  00105c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	08007a40 	.word	0x08007a40

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	08007a40 	.word	0x08007a40

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <MPU9250_OnActivate>:

static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

__weak void MPU9250_OnActivate()
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8001078:	f7ff fff6 	bl	8001068 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET); // pull it low to start reading
 800107c:	2200      	movs	r2, #0
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <MPU9250_Activate+0x18>)
 8001082:	f001 fe0b 	bl	8002c9c <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40011000 	.word	0x40011000

08001090 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET); // pull it up to stop communication
 8001094:	2201      	movs	r2, #1
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <MPU9250_Deactivate+0x14>)
 800109a:	f001 fdff 	bl	8002c9c <HAL_GPIO_WritePin>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40011000 	.word	0x40011000

080010a8 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80010b6:	f107 020f 	add.w	r2, r7, #15
 80010ba:	1df9      	adds	r1, r7, #7
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <SPIx_WriteRead+0x38>)
 80010c6:	f002 fe1c 	bl	8003d02 <HAL_SPI_TransmitReceive>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SPIx_WriteRead+0x2c>
	{
		return -1;
 80010d0:	23ff      	movs	r3, #255	; 0xff
 80010d2:	e000      	b.n	80010d6 <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002f0 	.word	0x200002f0

080010e4 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
 80010f0:	4613      	mov	r3, r2
 80010f2:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 80010f4:	f7ff ffbe 	bl	8001074 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffd4 	bl	80010a8 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8001100:	e00a      	b.n	8001118 <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*pBuffer);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffce 	bl	80010a8 <SPIx_WriteRead>
		NumByteToWrite--;
 800110c:	883b      	ldrh	r3, [r7, #0]
 800110e:	3b01      	subs	r3, #1
 8001110:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3301      	adds	r3, #1
 8001116:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8001118:	883b      	ldrh	r3, [r7, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f1      	bne.n	8001102 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 800111e:	f7ff ffb7 	bl	8001090 <MPU9250_Deactivate>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
 8001138:	4613      	mov	r3, r2
 800113a:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 800113c:	f7ff ff9a 	bl	8001074 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	4313      	orrs	r3, r2
 8001146:	b2db      	uxtb	r3, r3
 8001148:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 800114a:	f107 010f 	add.w	r1, r7, #15
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	2201      	movs	r2, #1
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <MPU_SPI_Read+0x48>)
 8001156:	f002 fb87 	bl	8003868 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&MPU9250_SPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 800115a:	883a      	ldrh	r2, [r7, #0]
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <MPU_SPI_Read+0x48>)
 8001164:	f002 fcbc 	bl	8003ae0 <HAL_SPI_Receive>
	MPU9250_Deactivate();
 8001168:	f7ff ff92 	bl	8001090 <MPU9250_Deactivate>
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002f0 	.word	0x200002f0

08001178 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8001188:	79f9      	ldrb	r1, [r7, #7]
 800118a:	1dbb      	adds	r3, r7, #6
 800118c:	2201      	movs	r2, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffa8 	bl	80010e4 <MPU_SPI_Write>
	HAL_Delay(10);
 8001194:	200a      	movs	r0, #10
 8001196:	f001 fabb 	bl	8002710 <HAL_Delay>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	603a      	str	r2, [r7, #0]
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	460b      	mov	r3, r1
 80011b0:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4619      	mov	r1, r3
 80011ba:	6838      	ldr	r0, [r7, #0]
 80011bc:	f7ff ffb6 	bl	800112c <MPU_SPI_Read>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80011d8:	2325      	movs	r3, #37	; 0x25
 80011da:	220c      	movs	r2, #12
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ffca 	bl	8001178 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80011e4:	2226      	movs	r2, #38	; 0x26
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4619      	mov	r1, r3
 80011ea:	4610      	mov	r0, r2
 80011ec:	f7ff ffc4 	bl	8001178 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80011f0:	2263      	movs	r2, #99	; 0x63
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7ff ffbe 	bl	8001178 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 80011fc:	2227      	movs	r2, #39	; 0x27
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f7ff ffb5 	bl	8001178 <writeRegister>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	603a      	str	r2, [r7, #0]
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	460b      	mov	r3, r1
 8001224:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8001226:	2025      	movs	r0, #37	; 0x25
 8001228:	220c      	movs	r2, #12
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	4313      	orrs	r3, r2
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff ffa1 	bl	8001178 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001236:	2226      	movs	r2, #38	; 0x26
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f7ff ff9b 	bl	8001178 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8001242:	2027      	movs	r0, #39	; 0x27
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	4313      	orrs	r3, r2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff ff93 	bl	8001178 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f001 fa5c 	bl	8002710 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8001258:	2049      	movs	r0, #73	; 0x49
 800125a:	79bb      	ldrb	r3, [r7, #6]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff ff9f 	bl	80011a2 <readRegisters>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8001270:	2375      	movs	r3, #117	; 0x75
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <whoAmI+0x18>)
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff93 	bl	80011a2 <readRegisters>

	// return the register value
	return _buffer[0];
 800127c:	4b01      	ldr	r3, [pc, #4]	; (8001284 <whoAmI+0x18>)
 800127e:	781b      	ldrb	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001fc 	.word	0x200001fc

08001288 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 800128c:	2300      	movs	r3, #0
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <whoAmIAK8963+0x18>)
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffbf 	bl	8001216 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8001298:	4b01      	ldr	r3, [pc, #4]	; (80012a0 <whoAmIAK8963+0x18>)
 800129a:	781b      	ldrb	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200001fc 	.word	0x200001fc

080012a4 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80012aa:	236b      	movs	r3, #107	; 0x6b
 80012ac:	2201      	movs	r2, #1
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff61 	bl	8001178 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80012b6:	236a      	movs	r3, #106	; 0x6a
 80012b8:	2220      	movs	r2, #32
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5b 	bl	8001178 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80012c2:	2324      	movs	r3, #36	; 0x24
 80012c4:	220d      	movs	r2, #13
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff55 	bl	8001178 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80012ce:	230a      	movs	r3, #10
 80012d0:	2200      	movs	r2, #0
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff77 	bl	80011c8 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80012da:	236b      	movs	r3, #107	; 0x6b
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff49 	bl	8001178 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80012e6:	200a      	movs	r0, #10
 80012e8:	f001 fa12 	bl	8002710 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80012ec:	230b      	movs	r3, #11
 80012ee:	2201      	movs	r2, #1
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff68 	bl	80011c8 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80012f8:	236b      	movs	r3, #107	; 0x6b
 80012fa:	2201      	movs	r2, #1
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff3a 	bl	8001178 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8001304:	f7ff ffb2 	bl	800126c <whoAmI>
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b71      	cmp	r3, #113	; 0x71
 8001310:	d004      	beq.n	800131c <MPU9250_Init+0x78>
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b73      	cmp	r3, #115	; 0x73
 8001316:	d001      	beq.n	800131c <MPU9250_Init+0x78>
	{
		return 1;
 8001318:	2301      	movs	r3, #1
 800131a:	e06c      	b.n	80013f6 <MPU9250_Init+0x152>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 800131c:	236c      	movs	r3, #108	; 0x6c
 800131e:	2200      	movs	r2, #0
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff28 	bl	8001178 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 8001328:	231c      	movs	r3, #28
 800132a:	2218      	movs	r2, #24
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff22 	bl	8001178 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8001334:	231b      	movs	r3, #27
 8001336:	2200      	movs	r2, #0
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff1c 	bl	8001178 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8001340:	231d      	movs	r3, #29
 8001342:	2201      	movs	r2, #1
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff16 	bl	8001178 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 800134c:	231a      	movs	r3, #26
 800134e:	2201      	movs	r2, #1
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff10 	bl	8001178 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8001358:	2319      	movs	r3, #25
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff0b 	bl	8001178 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8001362:	236a      	movs	r3, #106	; 0x6a
 8001364:	2220      	movs	r2, #32
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff05 	bl	8001178 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 800136e:	2324      	movs	r3, #36	; 0x24
 8001370:	220d      	movs	r2, #13
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff feff 	bl	8001178 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 800137a:	f7ff ff85 	bl	8001288 <whoAmIAK8963>
 800137e:	4603      	mov	r3, r0
 8001380:	2b48      	cmp	r3, #72	; 0x48
 8001382:	d001      	beq.n	8001388 <MPU9250_Init+0xe4>
	{
		return 1;
 8001384:	2301      	movs	r3, #1
 8001386:	e036      	b.n	80013f6 <MPU9250_Init+0x152>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001388:	230a      	movs	r3, #10
 800138a:	2200      	movs	r2, #0
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff1a 	bl	80011c8 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8001394:	2064      	movs	r0, #100	; 0x64
 8001396:	f001 f9bb 	bl	8002710 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 800139a:	230a      	movs	r3, #10
 800139c:	220f      	movs	r2, #15
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff11 	bl	80011c8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80013a6:	2064      	movs	r0, #100	; 0x64
 80013a8:	f001 f9b2 	bl	8002710 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80013ac:	2310      	movs	r3, #16
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <MPU9250_Init+0x15c>)
 80013b0:	2103      	movs	r1, #3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff2f 	bl	8001216 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80013b8:	230a      	movs	r3, #10
 80013ba:	2200      	movs	r2, #0
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff02 	bl	80011c8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f001 f9a3 	bl	8002710 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80013ca:	230a      	movs	r3, #10
 80013cc:	2216      	movs	r2, #22
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fef9 	bl	80011c8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80013d6:	2064      	movs	r0, #100	; 0x64
 80013d8:	f001 f99a 	bl	8002710 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80013dc:	236b      	movs	r3, #107	; 0x6b
 80013de:	2201      	movs	r2, #1
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fec8 	bl	8001178 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80013e8:	2303      	movs	r3, #3
 80013ea:	4a06      	ldr	r2, [pc, #24]	; (8001404 <MPU9250_Init+0x160>)
 80013ec:	2107      	movs	r1, #7
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff11 	bl	8001216 <readAK8963Registers>

	// successful init, return 0
	return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000214 	.word	0x20000214
 8001404:	200001fc 	.word	0x200001fc

08001408 <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8001414:	233b      	movs	r3, #59	; 0x3b
 8001416:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001418:	2115      	movs	r1, #21
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fec1 	bl	80011a2 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001420:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b21a      	sxth	r2, r3
 8001428:	4b69      	ldr	r3, [pc, #420]	; (80015d0 <MPU9250_GetData+0x1c8>)
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b21a      	sxth	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001436:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001438:	789b      	ldrb	r3, [r3, #2]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b219      	sxth	r1, r3
 800143e:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001440:	78db      	ldrb	r3, [r3, #3]
 8001442:	b21a      	sxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3302      	adds	r3, #2
 8001448:	430a      	orrs	r2, r1
 800144a:	b212      	sxth	r2, r2
 800144c:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 800144e:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001450:	791b      	ldrb	r3, [r3, #4]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b219      	sxth	r1, r3
 8001456:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	b21a      	sxth	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3304      	adds	r3, #4
 8001460:	430a      	orrs	r2, r1
 8001462:	b212      	sxth	r2, r2
 8001464:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8001466:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001468:	7a1b      	ldrb	r3, [r3, #8]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b58      	ldr	r3, [pc, #352]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001470:	7a5b      	ldrb	r3, [r3, #9]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 800147c:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <MPU9250_GetData+0x1c8>)
 800147e:	7a9b      	ldrb	r3, [r3, #10]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b219      	sxth	r1, r3
 8001484:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001486:	7adb      	ldrb	r3, [r3, #11]
 8001488:	b21a      	sxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3302      	adds	r3, #2
 800148e:	430a      	orrs	r2, r1
 8001490:	b212      	sxth	r2, r2
 8001492:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8001494:	4b4e      	ldr	r3, [pc, #312]	; (80015d0 <MPU9250_GetData+0x1c8>)
 8001496:	7b1b      	ldrb	r3, [r3, #12]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b219      	sxth	r1, r3
 800149c:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <MPU9250_GetData+0x1c8>)
 800149e:	7b5b      	ldrb	r3, [r3, #13]
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3304      	adds	r3, #4
 80014a6:	430a      	orrs	r2, r1
 80014a8:	b212      	sxth	r2, r2
 80014aa:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80014ac:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <MPU9250_GetData+0x1c8>)
 80014ae:	7bdb      	ldrb	r3, [r3, #15]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <MPU9250_GetData+0x1c8>)
 80014b6:	7b9b      	ldrb	r3, [r3, #14]
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <MPU9250_GetData+0x1c8>)
 80014c0:	7c5b      	ldrb	r3, [r3, #17]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <MPU9250_GetData+0x1c8>)
 80014c8:	7c1b      	ldrb	r3, [r3, #16]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80014d0:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <MPU9250_GetData+0x1c8>)
 80014d2:	7cdb      	ldrb	r3, [r3, #19]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <MPU9250_GetData+0x1c8>)
 80014da:	7c9b      	ldrb	r3, [r3, #18]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80014e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fbf4 	bl	8000cd4 <__aeabi_i2f>
 80014ec:	4604      	mov	r4, r0
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <MPU9250_GetData+0x1cc>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	3b80      	subs	r3, #128	; 0x80
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fbed 	bl	8000cd4 <__aeabi_i2f>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fcef 	bl	8000ee4 <__aeabi_fdiv>
 8001506:	4603      	mov	r3, r0
 8001508:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fb2d 	bl	8000b6c <__addsf3>
 8001512:	4603      	mov	r3, r0
 8001514:	4619      	mov	r1, r3
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff fc30 	bl	8000d7c <__aeabi_fmul>
 800151c:	4603      	mov	r3, r0
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fd7c 	bl	800101c <__aeabi_f2iz>
 8001524:	4603      	mov	r3, r0
 8001526:	b21a      	sxth	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 800152c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fbcf 	bl	8000cd4 <__aeabi_i2f>
 8001536:	4604      	mov	r4, r0
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MPU9250_GetData+0x1cc>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	3b80      	subs	r3, #128	; 0x80
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fbc8 	bl	8000cd4 <__aeabi_i2f>
 8001544:	4603      	mov	r3, r0
 8001546:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fcca 	bl	8000ee4 <__aeabi_fdiv>
 8001550:	4603      	mov	r3, r0
 8001552:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fb08 	bl	8000b6c <__addsf3>
 800155c:	4603      	mov	r3, r0
 800155e:	4619      	mov	r1, r3
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff fc0b 	bl	8000d7c <__aeabi_fmul>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1c9c      	adds	r4, r3, #2
 800156e:	4610      	mov	r0, r2
 8001570:	f7ff fd54 	bl	800101c <__aeabi_f2iz>
 8001574:	4603      	mov	r3, r0
 8001576:	b21b      	sxth	r3, r3
 8001578:	8023      	strh	r3, [r4, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 800157a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fba8 	bl	8000cd4 <__aeabi_i2f>
 8001584:	4604      	mov	r4, r0
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MPU9250_GetData+0x1cc>)
 8001588:	789b      	ldrb	r3, [r3, #2]
 800158a:	3b80      	subs	r3, #128	; 0x80
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fba1 	bl	8000cd4 <__aeabi_i2f>
 8001592:	4603      	mov	r3, r0
 8001594:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fca3 	bl	8000ee4 <__aeabi_fdiv>
 800159e:	4603      	mov	r3, r0
 80015a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fae1 	bl	8000b6c <__addsf3>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fbe4 	bl	8000d7c <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1d1c      	adds	r4, r3, #4
 80015bc:	4610      	mov	r0, r2
 80015be:	f7ff fd2d 	bl	800101c <__aeabi_f2iz>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	8023      	strh	r3, [r4, #0]
}
 80015c8:	bf00      	nop
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	200001fc 	.word	0x200001fc
 80015d4:	20000214 	.word	0x20000214

080015d8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <MX_FSMC_Init+0xbc>)
 80015f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015f6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <MX_FSMC_Init+0xbc>)
 80015fa:	4a27      	ldr	r2, [pc, #156]	; (8001698 <MX_FSMC_Init+0xc0>)
 80015fc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <MX_FSMC_Init+0xbc>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <MX_FSMC_Init+0xbc>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <MX_FSMC_Init+0xbc>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <MX_FSMC_Init+0xbc>)
 8001612:	2210      	movs	r2, #16
 8001614:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <MX_FSMC_Init+0xbc>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <MX_FSMC_Init+0xbc>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <MX_FSMC_Init+0xbc>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <MX_FSMC_Init+0xbc>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_FSMC_Init+0xbc>)
 8001630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_FSMC_Init+0xbc>)
 8001638:	2200      	movs	r2, #0
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <MX_FSMC_Init+0xbc>)
 800163e:	2200      	movs	r2, #0
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_FSMC_Init+0xbc>)
 8001644:	2200      	movs	r2, #0
 8001646:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_FSMC_Init+0xbc>)
 800164a:	2200      	movs	r2, #0
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800164e:	230f      	movs	r3, #15
 8001650:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001652:	230f      	movs	r3, #15
 8001654:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001656:	23ff      	movs	r3, #255	; 0xff
 8001658:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800165a:	230f      	movs	r3, #15
 800165c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800165e:	2310      	movs	r3, #16
 8001660:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001662:	2311      	movs	r3, #17
 8001664:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	4808      	ldr	r0, [pc, #32]	; (8001694 <MX_FSMC_Init+0xbc>)
 8001672:	f002 fde1 	bl	8004238 <HAL_SRAM_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800167c:	f000 fda1 	bl	80021c2 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_FSMC_Init+0xc4>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <MX_FSMC_Init+0xc4>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000218 	.word	0x20000218
 8001698:	a0000104 	.word	0xa0000104
 800169c:	40010000 	.word	0x40010000

080016a0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_FSMC_MspInit+0x78>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d129      	bne.n	8001710 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_FSMC_MspInit+0x78>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_FSMC_MspInit+0x7c>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <HAL_FSMC_MspInit+0x7c>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6153      	str	r3, [r2, #20]
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_FSMC_MspInit+0x7c>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80016da:	f64f 7380 	movw	r3, #65408	; 0xff80
 80016de:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <HAL_FSMC_MspInit+0x80>)
 80016f0:	f001 f940 	bl	8002974 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80016f4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80016f8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4619      	mov	r1, r3
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <HAL_FSMC_MspInit+0x84>)
 800170a:	f001 f933 	bl	8002974 <HAL_GPIO_Init>
 800170e:	e000      	b.n	8001712 <HAL_FSMC_MspInit+0x72>
    return;
 8001710:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000260 	.word	0x20000260
 800171c:	40021000 	.word	0x40021000
 8001720:	40011800 	.word	0x40011800
 8001724:	40011400 	.word	0x40011400

08001728 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001730:	f7ff ffb6 	bl	80016a0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <MX_GPIO_Init+0x10c>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a3c      	ldr	r2, [pc, #240]	; (8001848 <MX_GPIO_Init+0x10c>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <MX_GPIO_Init+0x10c>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b37      	ldr	r3, [pc, #220]	; (8001848 <MX_GPIO_Init+0x10c>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a36      	ldr	r2, [pc, #216]	; (8001848 <MX_GPIO_Init+0x10c>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b34      	ldr	r3, [pc, #208]	; (8001848 <MX_GPIO_Init+0x10c>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <MX_GPIO_Init+0x10c>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a30      	ldr	r2, [pc, #192]	; (8001848 <MX_GPIO_Init+0x10c>)
 8001786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <MX_GPIO_Init+0x10c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <MX_GPIO_Init+0x10c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a2a      	ldr	r2, [pc, #168]	; (8001848 <MX_GPIO_Init+0x10c>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <MX_GPIO_Init+0x10c>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <MX_GPIO_Init+0x10c>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a24      	ldr	r2, [pc, #144]	; (8001848 <MX_GPIO_Init+0x10c>)
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <MX_GPIO_Init+0x10c>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ce:	481f      	ldr	r0, [pc, #124]	; (800184c <MX_GPIO_Init+0x110>)
 80017d0:	f001 fa64 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GY_CS_GPIO_Port, GY_CS_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	481d      	ldr	r0, [pc, #116]	; (8001850 <MX_GPIO_Init+0x114>)
 80017da:	f001 fa5f 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2102      	movs	r1, #2
 80017e2:	481c      	ldr	r0, [pc, #112]	; (8001854 <MX_GPIO_Init+0x118>)
 80017e4:	f001 fa5a 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fa:	f107 0318 	add.w	r3, r7, #24
 80017fe:	4619      	mov	r1, r3
 8001800:	4812      	ldr	r0, [pc, #72]	; (800184c <MX_GPIO_Init+0x110>)
 8001802:	f001 f8b7 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GY_CS_Pin;
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GY_CS_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0318 	add.w	r3, r7, #24
 800181a:	4619      	mov	r1, r3
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <MX_GPIO_Init+0x114>)
 800181e:	f001 f8a9 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	4619      	mov	r1, r3
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_GPIO_Init+0x118>)
 800183a:	f001 f89b 	bl	8002974 <HAL_GPIO_Init>

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40011400 	.word	0x40011400
 8001850:	40011000 	.word	0x40011000
 8001854:	40011800 	.word	0x40011800

08001858 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_I2C2_Init+0x50>)
 800185e:	4a13      	ldr	r2, [pc, #76]	; (80018ac <MX_I2C2_Init+0x54>)
 8001860:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_I2C2_Init+0x50>)
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <MX_I2C2_Init+0x58>)
 8001866:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_I2C2_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_I2C2_Init+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_I2C2_Init+0x50>)
 8001876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <MX_I2C2_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_I2C2_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <MX_I2C2_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_I2C2_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_I2C2_Init+0x50>)
 8001896:	f001 fa19 	bl	8002ccc <HAL_I2C_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018a0:	f000 fc8f 	bl	80021c2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000264 	.word	0x20000264
 80018ac:	40005800 	.word	0x40005800
 80018b0:	000186a0 	.word	0x000186a0

080018b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a16      	ldr	r2, [pc, #88]	; (8001928 <HAL_I2C_MspInit+0x74>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d124      	bne.n	800191e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_I2C_MspInit+0x78>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <HAL_I2C_MspInit+0x78>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_I2C_MspInit+0x78>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f2:	2312      	movs	r3, #18
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	4619      	mov	r1, r3
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <HAL_I2C_MspInit+0x7c>)
 8001902:	f001 f837 	bl	8002974 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_I2C_MspInit+0x78>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_I2C_MspInit+0x78>)
 800190c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_I2C_MspInit+0x78>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3720      	adds	r7, #32
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40005800 	.word	0x40005800
 800192c:	40021000 	.word	0x40021000
 8001930:	40010c00 	.word	0x40010c00

08001934 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	e002      	b.n	8001944 <Delay+0x10>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3b01      	subs	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f9      	bne.n	800193e <Delay+0xa>
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <LCD_INIT>:

void LCD_INIT ( void )
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800195c:	2001      	movs	r0, #1
 800195e:	f000 f829 	bl	80019b4 <LCD_BackLed_Control>
	LCD_Rst();
 8001962:	f000 f80f 	bl	8001984 <LCD_Rst>
	LCD_REG_Config();
 8001966:	f000 f85f 	bl	8001a28 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800196a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001974:	22f0      	movs	r2, #240	; 0xf0
 8001976:	2100      	movs	r1, #0
 8001978:	2000      	movs	r0, #0
 800197a:	f000 f9e6 	bl	8001d4a <LCD_Clear>
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2102      	movs	r1, #2
 800198c:	4807      	ldr	r0, [pc, #28]	; (80019ac <LCD_Rst+0x28>)
 800198e:	f001 f985 	bl	8002c9c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001992:	4807      	ldr	r0, [pc, #28]	; (80019b0 <LCD_Rst+0x2c>)
 8001994:	f7ff ffce 	bl	8001934 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	2102      	movs	r1, #2
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <LCD_Rst+0x28>)
 800199e:	f001 f97d 	bl	8002c9c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80019a2:	4803      	ldr	r0, [pc, #12]	; (80019b0 <LCD_Rst+0x2c>)
 80019a4:	f7ff ffc6 	bl	8001934 <Delay>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40011800 	.word	0x40011800
 80019b0:	0002bffc 	.word	0x0002bffc

080019b4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ca:	4807      	ldr	r0, [pc, #28]	; (80019e8 <LCD_BackLed_Control+0x34>)
 80019cc:	f001 f966 	bl	8002c9c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80019d0:	e005      	b.n	80019de <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80019d2:	2201      	movs	r2, #1
 80019d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <LCD_BackLed_Control+0x34>)
 80019da:	f001 f95f 	bl	8002c9c <HAL_GPIO_WritePin>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40011400 	.word	0x40011400

080019ec <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80019f6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	8013      	strh	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <LCD_Write_Data+0x1c>)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	8013      	strh	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	60020000 	.word	0x60020000

08001a28 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001a2c:	20cf      	movs	r0, #207	; 0xcf
 8001a2e:	f7ff ffdd 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff ffe8 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001a38:	2081      	movs	r0, #129	; 0x81
 8001a3a:	f7ff ffe5 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001a3e:	2030      	movs	r0, #48	; 0x30
 8001a40:	f7ff ffe2 	bl	8001a08 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001a44:	20ed      	movs	r0, #237	; 0xed
 8001a46:	f7ff ffd1 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001a4a:	2064      	movs	r0, #100	; 0x64
 8001a4c:	f7ff ffdc 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001a50:	2003      	movs	r0, #3
 8001a52:	f7ff ffd9 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001a56:	2012      	movs	r0, #18
 8001a58:	f7ff ffd6 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001a5c:	2081      	movs	r0, #129	; 0x81
 8001a5e:	f7ff ffd3 	bl	8001a08 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001a62:	20e8      	movs	r0, #232	; 0xe8
 8001a64:	f7ff ffc2 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001a68:	2085      	movs	r0, #133	; 0x85
 8001a6a:	f7ff ffcd 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001a6e:	2010      	movs	r0, #16
 8001a70:	f7ff ffca 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001a74:	2078      	movs	r0, #120	; 0x78
 8001a76:	f7ff ffc7 	bl	8001a08 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001a7a:	20cb      	movs	r0, #203	; 0xcb
 8001a7c:	f7ff ffb6 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001a80:	2039      	movs	r0, #57	; 0x39
 8001a82:	f7ff ffc1 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001a86:	202c      	movs	r0, #44	; 0x2c
 8001a88:	f7ff ffbe 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff ffbb 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001a92:	2034      	movs	r0, #52	; 0x34
 8001a94:	f7ff ffb8 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7ff ffb5 	bl	8001a08 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001a9e:	20f7      	movs	r0, #247	; 0xf7
 8001aa0:	f7ff ffa4 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001aa4:	2020      	movs	r0, #32
 8001aa6:	f7ff ffaf 	bl	8001a08 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001aaa:	20ea      	movs	r0, #234	; 0xea
 8001aac:	f7ff ff9e 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff ffa9 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff ffa6 	bl	8001a08 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001abc:	20b1      	movs	r0, #177	; 0xb1
 8001abe:	f7ff ff95 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff ffa0 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001ac8:	201b      	movs	r0, #27
 8001aca:	f7ff ff9d 	bl	8001a08 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001ace:	20b6      	movs	r0, #182	; 0xb6
 8001ad0:	f7ff ff8c 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001ad4:	200a      	movs	r0, #10
 8001ad6:	f7ff ff97 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001ada:	20a2      	movs	r0, #162	; 0xa2
 8001adc:	f7ff ff94 	bl	8001a08 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001ae0:	20c0      	movs	r0, #192	; 0xc0
 8001ae2:	f7ff ff83 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001ae6:	2035      	movs	r0, #53	; 0x35
 8001ae8:	f7ff ff8e 	bl	8001a08 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001aec:	20c1      	movs	r0, #193	; 0xc1
 8001aee:	f7ff ff7d 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001af2:	2011      	movs	r0, #17
 8001af4:	f7ff ff88 	bl	8001a08 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001af8:	20c5      	movs	r0, #197	; 0xc5
 8001afa:	f7ff ff77 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001afe:	2045      	movs	r0, #69	; 0x45
 8001b00:	f7ff ff82 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001b04:	2045      	movs	r0, #69	; 0x45
 8001b06:	f7ff ff7f 	bl	8001a08 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001b0a:	20c7      	movs	r0, #199	; 0xc7
 8001b0c:	f7ff ff6e 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001b10:	20a2      	movs	r0, #162	; 0xa2
 8001b12:	f7ff ff79 	bl	8001a08 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001b16:	20f2      	movs	r0, #242	; 0xf2
 8001b18:	f7ff ff68 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff ff73 	bl	8001a08 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001b22:	2026      	movs	r0, #38	; 0x26
 8001b24:	f7ff ff62 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7ff ff6d 	bl	8001a08 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001b2e:	20e0      	movs	r0, #224	; 0xe0
 8001b30:	f7ff ff5c 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001b34:	200f      	movs	r0, #15
 8001b36:	f7ff ff67 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001b3a:	2026      	movs	r0, #38	; 0x26
 8001b3c:	f7ff ff64 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001b40:	2024      	movs	r0, #36	; 0x24
 8001b42:	f7ff ff61 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001b46:	200b      	movs	r0, #11
 8001b48:	f7ff ff5e 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001b4c:	200e      	movs	r0, #14
 8001b4e:	f7ff ff5b 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001b52:	2009      	movs	r0, #9
 8001b54:	f7ff ff58 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001b58:	2054      	movs	r0, #84	; 0x54
 8001b5a:	f7ff ff55 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001b5e:	20a8      	movs	r0, #168	; 0xa8
 8001b60:	f7ff ff52 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001b64:	2046      	movs	r0, #70	; 0x46
 8001b66:	f7ff ff4f 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001b6a:	200c      	movs	r0, #12
 8001b6c:	f7ff ff4c 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001b70:	2017      	movs	r0, #23
 8001b72:	f7ff ff49 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001b76:	2009      	movs	r0, #9
 8001b78:	f7ff ff46 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001b7c:	200f      	movs	r0, #15
 8001b7e:	f7ff ff43 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001b82:	2007      	movs	r0, #7
 8001b84:	f7ff ff40 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff ff3d 	bl	8001a08 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001b8e:	20e1      	movs	r0, #225	; 0xe1
 8001b90:	f7ff ff2c 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff ff37 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001b9a:	2019      	movs	r0, #25
 8001b9c:	f7ff ff34 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001ba0:	201b      	movs	r0, #27
 8001ba2:	f7ff ff31 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f7ff ff2e 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001bac:	2010      	movs	r0, #16
 8001bae:	f7ff ff2b 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001bb2:	2007      	movs	r0, #7
 8001bb4:	f7ff ff28 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001bb8:	202a      	movs	r0, #42	; 0x2a
 8001bba:	f7ff ff25 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001bbe:	2047      	movs	r0, #71	; 0x47
 8001bc0:	f7ff ff22 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001bc4:	2039      	movs	r0, #57	; 0x39
 8001bc6:	f7ff ff1f 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001bca:	2003      	movs	r0, #3
 8001bcc:	f7ff ff1c 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001bd0:	2006      	movs	r0, #6
 8001bd2:	f7ff ff19 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001bd6:	2006      	movs	r0, #6
 8001bd8:	f7ff ff16 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001bdc:	2030      	movs	r0, #48	; 0x30
 8001bde:	f7ff ff13 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001be2:	2038      	movs	r0, #56	; 0x38
 8001be4:	f7ff ff10 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001be8:	200f      	movs	r0, #15
 8001bea:	f7ff ff0d 	bl	8001a08 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001bee:	2036      	movs	r0, #54	; 0x36
 8001bf0:	f7ff fefc 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001bf4:	20c8      	movs	r0, #200	; 0xc8
 8001bf6:	f7ff ff07 	bl	8001a08 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001bfa:	202a      	movs	r0, #42	; 0x2a
 8001bfc:	f7ff fef6 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff ff01 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fefe 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff fefb 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001c12:	20ef      	movs	r0, #239	; 0xef
 8001c14:	f7ff fef8 	bl	8001a08 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001c18:	202b      	movs	r0, #43	; 0x2b
 8001c1a:	f7ff fee7 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff fef2 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff feef 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff feec 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001c30:	203f      	movs	r0, #63	; 0x3f
 8001c32:	f7ff fee9 	bl	8001a08 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001c36:	203a      	movs	r0, #58	; 0x3a
 8001c38:	f7ff fed8 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001c3c:	2055      	movs	r0, #85	; 0x55
 8001c3e:	f7ff fee3 	bl	8001a08 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001c42:	2011      	movs	r0, #17
 8001c44:	f7ff fed2 	bl	80019ec <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <LCD_REG_Config+0x230>)
 8001c4a:	f7ff fe73 	bl	8001934 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001c4e:	2029      	movs	r0, #41	; 0x29
 8001c50:	f7ff fecc 	bl	80019ec <LCD_Write_Cmd>
	
	
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	0002bffc 	.word	0x0002bffc

08001c5c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	80fb      	strh	r3, [r7, #6]
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80bb      	strh	r3, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	807b      	strh	r3, [r7, #2]
 8001c76:	4613      	mov	r3, r2
 8001c78:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001c7a:	202a      	movs	r0, #42	; 0x2a
 8001c7c:	f7ff feb6 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff febe 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff feb8 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	121b      	asrs	r3, r3, #8
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff feaf 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001caa:	88fa      	ldrh	r2, [r7, #6]
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fea4 	bl	8001a08 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001cc0:	202b      	movs	r0, #43	; 0x2b
 8001cc2:	f7ff fe93 	bl	80019ec <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001cc6:	88bb      	ldrh	r3, [r7, #4]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fe9b 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001cd2:	88bb      	ldrh	r3, [r7, #4]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe95 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001cde:	88ba      	ldrh	r2, [r7, #4]
 8001ce0:	883b      	ldrh	r3, [r7, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	121b      	asrs	r3, r3, #8
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fe8c 	bl	8001a08 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001cf0:	88ba      	ldrh	r2, [r7, #4]
 8001cf2:	883b      	ldrh	r3, [r7, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fe81 	bl	8001a08 <LCD_Write_Data>
	
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}

08001d0e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001d1e:	202c      	movs	r0, #44	; 0x2c
 8001d20:	f7ff fe64 	bl	80019ec <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e006      	b.n	8001d38 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fe6b 	bl	8001a08 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3301      	adds	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3f4      	bcc.n	8001d2a <LCD_FillColor+0x1c>
		
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001d4a:	b590      	push	{r4, r7, lr}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4604      	mov	r4, r0
 8001d52:	4608      	mov	r0, r1
 8001d54:	4611      	mov	r1, r2
 8001d56:	461a      	mov	r2, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	80fb      	strh	r3, [r7, #6]
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	80bb      	strh	r3, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001d68:	883b      	ldrh	r3, [r7, #0]
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	88b9      	ldrh	r1, [r7, #4]
 8001d6e:	88f8      	ldrh	r0, [r7, #6]
 8001d70:	f7ff ff74 	bl	8001c5c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	883a      	ldrh	r2, [r7, #0]
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	8b3b      	ldrh	r3, [r7, #24]
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f7ff ffc3 	bl	8001d0e <LCD_FillColor>
	
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}

08001d90 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	80bb      	strh	r3, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	3b20      	subs	r3, #32
 8001da6:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001da8:	88b9      	ldrh	r1, [r7, #4]
 8001daa:	88f8      	ldrh	r0, [r7, #6]
 8001dac:	2310      	movs	r3, #16
 8001dae:	2208      	movs	r2, #8
 8001db0:	f7ff ff54 	bl	8001c5c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001db4:	202c      	movs	r0, #44	; 0x2c
 8001db6:	f7ff fe19 	bl	80019ec <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73bb      	strb	r3, [r7, #14]
 8001dbe:	e023      	b.n	8001e08 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001dc0:	7b3a      	ldrb	r2, [r7, #12]
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	4914      	ldr	r1, [pc, #80]	; (8001e18 <LCD_DrawChar+0x88>)
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	440a      	add	r2, r1
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	737b      	strb	r3, [r7, #13]
 8001dd4:	e012      	b.n	8001dfc <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001de0:	201f      	movs	r0, #31
 8001de2:	f7ff fe11 	bl	8001a08 <LCD_Write_Data>
 8001de6:	e003      	b.n	8001df0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001de8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dec:	f7ff fe0c 	bl	8001a08 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	085b      	lsrs	r3, r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001df6:	7b7b      	ldrb	r3, [r7, #13]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	737b      	strb	r3, [r7, #13]
 8001dfc:	7b7b      	ldrb	r3, [r7, #13]
 8001dfe:	2b07      	cmp	r3, #7
 8001e00:	d9e9      	bls.n	8001dd6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001e02:	7bbb      	ldrb	r3, [r7, #14]
 8001e04:	3301      	adds	r3, #1
 8001e06:	73bb      	strb	r3, [r7, #14]
 8001e08:	7bbb      	ldrb	r3, [r7, #14]
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	d9d8      	bls.n	8001dc0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	08007ab0 	.word	0x08007ab0

08001e1c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	603a      	str	r2, [r7, #0]
 8001e26:	80fb      	strh	r3, [r7, #6]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001e2c:	e01c      	b.n	8001e68 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	2be8      	cmp	r3, #232	; 0xe8
 8001e32:	d904      	bls.n	8001e3e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001e34:	2300      	movs	r3, #0
 8001e36:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	3310      	adds	r3, #16
 8001e3c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001e44:	d903      	bls.n	8001e4e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001e46:	2300      	movs	r3, #0
 8001e48:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	88b9      	ldrh	r1, [r7, #4]
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff9a 	bl	8001d90 <LCD_DrawChar>
		
		pStr ++;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	3308      	adds	r3, #8
 8001e66:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1de      	bne.n	8001e2e <LCD_DrawString+0x12>
		
	}
	
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0a8      	sub	sp, #160	; 0xa0
 8001e80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e82:	f000 fbe3 	bl	800264c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e86:	f000 f957 	bl	8002138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e8a:	f7ff fc57 	bl	800173c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001e8e:	f7ff fce3 	bl	8001858 <MX_I2C2_Init>
  MX_FSMC_Init();
 8001e92:	f7ff fba1 	bl	80015d8 <MX_FSMC_Init>
  MX_TIM2_Init();
 8001e96:	f000 fb43 	bl	8002520 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001e9a:	f000 f997 	bl	80021cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001e9e:	f7ff fd5a 	bl	8001956 <LCD_INIT>
  MPU9250_Init();
 8001ea2:	f7ff f9ff 	bl	80012a4 <MPU9250_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!runned) {
 8001ea6:	4b95      	ldr	r3, [pc, #596]	; (80020fc <main+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <main+0x4c>
//		  LCD_DrawString(20,20,"Chan Lik Yeung");
//		  LCD_DrawDot(120,160, 0xF800);
//		  LCD_DrawEllipse(120, 160, 25, 75, BLACK) ;
		  LCD_Clear(0,0, 239,319, WHITE);
 8001eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	f240 133f 	movw	r3, #319	; 0x13f
 8001eb8:	22ef      	movs	r2, #239	; 0xef
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff ff44 	bl	8001d4a <LCD_Clear>
//		  LCD_DrawString(120,20, "YValue");
//		  LCD_DrawString(180,20, "XValue");
//		  LCD_DrawString(20,40, "Value : ");
//		  LCD_DrawString(20,60, "Angle : ");

		  runned = 1;
 8001ec2:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <main+0x280>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
	  char counter[9];
	  char _hitcount[9];
	  char MagData1[9]; char MagData2[9]; char MagData3[9];
	  //char str[100];
	  int16_t AccData[3], GyroData[3], MagData[3];
	  MPU9250_GetData(AccData, MagData, GyroData);
 8001ec8:	f107 020c 	add.w	r2, r7, #12
 8001ecc:	1d39      	adds	r1, r7, #4
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fa98 	bl	8001408 <MPU9250_GetData>
//	  printf("%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d\n",
//	    (int16_t)AccData[0], (int16_t)AccData[1], (int16_t)AccData[2],
//	    (int16_t)GyroData[0], (int16_t)GyroData[1], (int16_t)GyroData[2],
//	    (int16_t)MagData[0], (int16_t)MagData[1], (int16_t)MagData[2]);

	  for (int i=0;i<3;i++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ede:	e022      	b.n	8001f26 <main+0xaa>
		  acc[i] = AccData[i]/210.00;
 8001ee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	3398      	adds	r3, #152	; 0x98
 8001ee8:	443b      	add	r3, r7
 8001eea:	f933 3c84 	ldrsh.w	r3, [r3, #-132]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe faf4 	bl	80004dc <__aeabi_i2d>
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b81      	ldr	r3, [pc, #516]	; (8002100 <main+0x284>)
 8001efa:	f7fe fc83 	bl	8000804 <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7fe fe03 	bl	8000b10 <__aeabi_d2iz>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	3398      	adds	r3, #152	; 0x98
 8001f16:	443b      	add	r3, r7
 8001f18:	f823 2c0c 	strh.w	r2, [r3, #-12]
	  for (int i=0;i<3;i++) {
 8001f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f20:	3301      	adds	r3, #1
 8001f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	ddd8      	ble.n	8001ee0 <main+0x64>
		  //gyro[i] = GyroData[i];
	  }

//	  if (acc[0]>3 && (acc[0] != 8 && acc[0] != 9 && acc[0] != 10 )) {
	  if (acc[0] > 2.3 && (acc[2] == 8 ||acc[2] == 9 ||acc[2] == 10)) {
 8001f2e:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	dd15      	ble.n	8001f62 <main+0xe6>
 8001f36:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d007      	beq.n	8001f4e <main+0xd2>
 8001f3e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001f42:	2b09      	cmp	r3, #9
 8001f44:	d003      	beq.n	8001f4e <main+0xd2>
 8001f46:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001f4a:	2b0a      	cmp	r3, #10
 8001f4c:	d109      	bne.n	8001f62 <main+0xe6>
		  lefting = 1;
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	; (8002104 <main+0x288>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
		  righting = 0;
 8001f54:	4b6c      	ldr	r3, [pc, #432]	; (8002108 <main+0x28c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
		  HAL_Delay(20);
 8001f5a:	2014      	movs	r0, #20
 8001f5c:	f000 fbd8 	bl	8002710 <HAL_Delay>
 8001f60:	e020      	b.n	8001fa4 <main+0x128>
	  } else if ( acc[0] < -2.3 && (acc[2] == 8 || acc[2] == 9 ||acc[2] == 10)) {
 8001f62:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8001f66:	f113 0f02 	cmn.w	r3, #2
 8001f6a:	da15      	bge.n	8001f98 <main+0x11c>
 8001f6c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d007      	beq.n	8001f84 <main+0x108>
 8001f74:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	d003      	beq.n	8001f84 <main+0x108>
 8001f7c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001f80:	2b0a      	cmp	r3, #10
 8001f82:	d109      	bne.n	8001f98 <main+0x11c>
		  righting = 1;
 8001f84:	4b60      	ldr	r3, [pc, #384]	; (8002108 <main+0x28c>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
		  lefting = 0;
 8001f8a:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <main+0x288>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
		  HAL_Delay(20);
 8001f90:	2014      	movs	r0, #20
 8001f92:	f000 fbbd 	bl	8002710 <HAL_Delay>
 8001f96:	e005      	b.n	8001fa4 <main+0x128>

	  } else {
	  		  lefting=0;
 8001f98:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <main+0x288>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
	  		  righting=0;
 8001f9e:	4b5a      	ldr	r3, [pc, #360]	; (8002108 <main+0x28c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
	  }

	  if (acc[2]< -11 && record == 1) {
 8001fa4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001fa8:	f113 0f0b 	cmn.w	r3, #11
 8001fac:	da0d      	bge.n	8001fca <main+0x14e>
 8001fae:	4b57      	ldr	r3, [pc, #348]	; (800210c <main+0x290>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d109      	bne.n	8001fca <main+0x14e>
		  hit = 1; record = 0;
 8001fb6:	4b56      	ldr	r3, [pc, #344]	; (8002110 <main+0x294>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <main+0x290>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
		  HAL_Delay(30);
 8001fc2:	201e      	movs	r0, #30
 8001fc4:	f000 fba4 	bl	8002710 <HAL_Delay>
 8001fc8:	e002      	b.n	8001fd0 <main+0x154>
	  } else {
		  hit = 0;
 8001fca:	4b51      	ldr	r3, [pc, #324]	; (8002110 <main+0x294>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
	  }

	  if (lefting != 0) {xycoor -= lefting; LCD_DrawString(0, 100, "lefting");}
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <main+0x288>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <main+0x174>
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <main+0x298>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b49      	ldr	r3, [pc, #292]	; (8002104 <main+0x288>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <main+0x298>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <main+0x29c>)
 8001fe8:	2164      	movs	r1, #100	; 0x64
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff ff16 	bl	8001e1c <LCD_DrawString>
	  if (righting != 0) {xycoor+= righting;LCD_DrawString(0, 100, "righting");}
 8001ff0:	4b45      	ldr	r3, [pc, #276]	; (8002108 <main+0x28c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00b      	beq.n	8002010 <main+0x194>
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <main+0x298>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <main+0x28c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4413      	add	r3, r2
 8002002:	4a44      	ldr	r2, [pc, #272]	; (8002114 <main+0x298>)
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4a45      	ldr	r2, [pc, #276]	; (800211c <main+0x2a0>)
 8002008:	2164      	movs	r1, #100	; 0x64
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff ff06 	bl	8001e1c <LCD_DrawString>
	  if (hit == 1 && record == 0) {hitcount++; record = 1; }
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <main+0x294>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d10b      	bne.n	8002030 <main+0x1b4>
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <main+0x290>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <main+0x1b4>
 8002020:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <main+0x2a4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	4a3e      	ldr	r2, [pc, #248]	; (8002120 <main+0x2a4>)
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <main+0x290>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]



	  sprintf(buff, "acc : %4d,%4d,%4d", acc[0], acc[1], acc[2]);
 8002030:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8002034:	461a      	mov	r2, r3
 8002036:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 800203a:	4619      	mov	r1, r3
 800203c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	460b      	mov	r3, r1
 8002044:	4937      	ldr	r1, [pc, #220]	; (8002124 <main+0x2a8>)
 8002046:	4838      	ldr	r0, [pc, #224]	; (8002128 <main+0x2ac>)
 8002048:	f003 fa82 	bl	8005550 <siprintf>
	  LCD_DrawString(0, 40, buff);
 800204c:	4a36      	ldr	r2, [pc, #216]	; (8002128 <main+0x2ac>)
 800204e:	2128      	movs	r1, #40	; 0x28
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fee3 	bl	8001e1c <LCD_DrawString>
//	  sprintf(gyro, "gyro: %4d,%4d,%4d", (int16_t)GyroData[0], (int16_t)GyroData[1], (int16_t)GyroData[2]);
	  sprintf(counter, "xycoor: %8d", (int16_t)xycoor);
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <main+0x298>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b21b      	sxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002062:	4932      	ldr	r1, [pc, #200]	; (800212c <main+0x2b0>)
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fa73 	bl	8005550 <siprintf>
	  LCD_DrawString(0,60, counter);
 800206a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800206e:	461a      	mov	r2, r3
 8002070:	213c      	movs	r1, #60	; 0x3c
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff fed2 	bl	8001e1c <LCD_DrawString>
	  sprintf(_hitcount, "hitcount: %8d", (int16_t)hitcount);
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <main+0x2a4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b21b      	sxth	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002084:	492a      	ldr	r1, [pc, #168]	; (8002130 <main+0x2b4>)
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fa62 	bl	8005550 <siprintf>
	  LCD_DrawString(0,80, _hitcount);
 800208c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002090:	461a      	mov	r2, r3
 8002092:	2150      	movs	r1, #80	; 0x50
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff fec1 	bl	8001e1c <LCD_DrawString>
//	  sprintf(acc2, "%8d", (int16_t)accg2);
//	  sprintf(acc3, "%8d", (int16_t)accg3);
//	  sprintf(gyro1, "%8d", (int16_t)GyroData[0]);
//	  sprintf(gyro2, "%8d", (int16_t)GyroData[1]);
//	  sprintf(gyro3, "%8d", (int16_t)GyroData[2]);
	  sprintf(MagData1, "%8d", (int16_t)MagData[0]);
 800209a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800209e:	461a      	mov	r2, r3
 80020a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020a4:	4923      	ldr	r1, [pc, #140]	; (8002134 <main+0x2b8>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fa52 	bl	8005550 <siprintf>
	  sprintf(MagData2, "%8d", (int16_t)MagData[1]);
 80020ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b0:	461a      	mov	r2, r3
 80020b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b6:	491f      	ldr	r1, [pc, #124]	; (8002134 <main+0x2b8>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fa49 	bl	8005550 <siprintf>
	  sprintf(MagData3, "%8d", (int16_t)MagData[2]);
 80020be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80020c2:	461a      	mov	r2, r3
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	491a      	ldr	r1, [pc, #104]	; (8002134 <main+0x2b8>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fa40 	bl	8005550 <siprintf>
//	  LCD_DrawString(120,60, acc2);
//	  LCD_DrawString(120,80, acc3);
//	  LCD_DrawString(120,100, gyro1);
//	  LCD_DrawString(120,120, gyro2);
//	  LCD_DrawString(120,140, gyro3);
	  LCD_DrawString(120,160, MagData1);
 80020d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020d4:	461a      	mov	r2, r3
 80020d6:	21a0      	movs	r1, #160	; 0xa0
 80020d8:	2078      	movs	r0, #120	; 0x78
 80020da:	f7ff fe9f 	bl	8001e1c <LCD_DrawString>
	  LCD_DrawString(120,180, MagData2);
 80020de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e2:	461a      	mov	r2, r3
 80020e4:	21b4      	movs	r1, #180	; 0xb4
 80020e6:	2078      	movs	r0, #120	; 0x78
 80020e8:	f7ff fe98 	bl	8001e1c <LCD_DrawString>
	  LCD_DrawString(120,200, MagData3);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	461a      	mov	r2, r3
 80020f2:	21c8      	movs	r1, #200	; 0xc8
 80020f4:	2078      	movs	r0, #120	; 0x78
 80020f6:	f7ff fe91 	bl	8001e1c <LCD_DrawString>
  {
 80020fa:	e6d4      	b.n	8001ea6 <main+0x2a>
 80020fc:	200002b8 	.word	0x200002b8
 8002100:	406a4000 	.word	0x406a4000
 8002104:	200002c0 	.word	0x200002c0
 8002108:	200002c4 	.word	0x200002c4
 800210c:	20000000 	.word	0x20000000
 8002110:	200002c8 	.word	0x200002c8
 8002114:	200002bc 	.word	0x200002bc
 8002118:	08007a58 	.word	0x08007a58
 800211c:	08007a60 	.word	0x08007a60
 8002120:	200002cc 	.word	0x200002cc
 8002124:	08007a6c 	.word	0x08007a6c
 8002128:	200002d0 	.word	0x200002d0
 800212c:	08007a80 	.word	0x08007a80
 8002130:	08007a8c 	.word	0x08007a8c
 8002134:	08007a9c 	.word	0x08007a9c

08002138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b090      	sub	sp, #64	; 0x40
 800213c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213e:	f107 0318 	add.w	r3, r7, #24
 8002142:	2228      	movs	r2, #40	; 0x28
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f002 fd9a 	bl	8004c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800215a:	2301      	movs	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800215e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002162:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002168:	2301      	movs	r3, #1
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216c:	2302      	movs	r3, #2
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002174:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002176:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217c:	f107 0318 	add.w	r3, r7, #24
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fee7 	bl	8002f54 <HAL_RCC_OscConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800218c:	f000 f819 	bl	80021c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002190:	230f      	movs	r3, #15
 8002192:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002194:	2302      	movs	r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800219c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2102      	movs	r1, #2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 f954 	bl	8003458 <HAL_RCC_ClockConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80021b6:	f000 f804 	bl	80021c2 <Error_Handler>
  }
}
 80021ba:	bf00      	nop
 80021bc:	3740      	adds	r7, #64	; 0x40
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c6:	b672      	cpsid	i
}
 80021c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ca:	e7fe      	b.n	80021ca <Error_Handler+0x8>

080021cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <MX_SPI1_Init+0x64>)
 80021d2:	4a18      	ldr	r2, [pc, #96]	; (8002234 <MX_SPI1_Init+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_SPI1_Init+0x64>)
 80021d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <MX_SPI1_Init+0x64>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <MX_SPI1_Init+0x64>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_SPI1_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <MX_SPI1_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_SPI1_Init+0x64>)
 80021f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_SPI1_Init+0x64>)
 8002200:	2218      	movs	r2, #24
 8002202:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <MX_SPI1_Init+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_SPI1_Init+0x64>)
 800220c:	2200      	movs	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <MX_SPI1_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <MX_SPI1_Init+0x64>)
 8002218:	220a      	movs	r2, #10
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <MX_SPI1_Init+0x64>)
 800221e:	f001 fa9f 	bl	8003760 <HAL_SPI_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002228:	f7ff ffcb 	bl	80021c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200002f0 	.word	0x200002f0
 8002234:	40013000 	.word	0x40013000

08002238 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_SPI_MspInit+0x88>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d12f      	bne.n	80022b8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_SPI_MspInit+0x8c>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_SPI_MspInit+0x8c>)
 800225e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_SPI_MspInit+0x8c>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_SPI_MspInit+0x8c>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <HAL_SPI_MspInit+0x8c>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_SPI_MspInit+0x8c>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002288:	23a0      	movs	r3, #160	; 0xa0
 800228a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4619      	mov	r1, r3
 800229a:	480b      	ldr	r0, [pc, #44]	; (80022c8 <HAL_SPI_MspInit+0x90>)
 800229c:	f000 fb6a 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a0:	2340      	movs	r3, #64	; 0x40
 80022a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	4619      	mov	r1, r3
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <HAL_SPI_MspInit+0x90>)
 80022b4:	f000 fb5e 	bl	8002974 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022b8:	bf00      	nop
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40013000 	.word	0x40013000
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010800 	.word	0x40010800

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_MspInit+0x5c>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_MspInit+0x5c>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6193      	str	r3, [r2, #24]
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_MspInit+0x5c>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_MspInit+0x5c>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_MspInit+0x5c>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	61d3      	str	r3, [r2, #28]
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <HAL_MspInit+0x5c>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_MspInit+0x60>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_MspInit+0x60>)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	40021000 	.word	0x40021000
 800232c:	40010000 	.word	0x40010000

08002330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <NMI_Handler+0x4>

08002336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <MemManage_Handler+0x4>

08002342 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <UsageFault_Handler+0x4>

0800234e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002376:	f000 f9af 	bl	80026d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <TIM2_IRQHandler+0x10>)
 8002386:	f001 fff3 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000034c 	.word	0x2000034c

08002394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	return 1;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <_kill>:

int _kill(int pid, int sig)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023ac:	f002 fc3e 	bl	8004c2c <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2216      	movs	r2, #22
 80023b4:	601a      	str	r2, [r3, #0]
	return -1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <_exit>:

void _exit (int status)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023ca:	f04f 31ff 	mov.w	r1, #4294967295
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffe7 	bl	80023a2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023d4:	e7fe      	b.n	80023d4 <_exit+0x12>

080023d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e00a      	b.n	80023fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023e8:	f3af 8000 	nop.w
 80023ec:	4601      	mov	r1, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	60ba      	str	r2, [r7, #8]
 80023f4:	b2ca      	uxtb	r2, r1
 80023f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3301      	adds	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	dbf0      	blt.n	80023e8 <_read+0x12>
	}

return len;
 8002406:	687b      	ldr	r3, [r7, #4]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e009      	b.n	8002436 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	60ba      	str	r2, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	dbf1      	blt.n	8002422 <_write+0x12>
	}
	return len;
 800243e:	687b      	ldr	r3, [r7, #4]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_close>:

int _close(int file)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	return -1;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246e:	605a      	str	r2, [r3, #4]
	return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <_isatty>:

int _isatty(int file)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	return 1;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	return 0;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f002 fba8 	bl	8004c2c <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20010000 	.word	0x20010000
 8002508:	00000400 	.word	0x00000400
 800250c:	20000348 	.word	0x20000348
 8002510:	200003a8 	.word	0x200003a8

08002514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002526:	f107 0308 	add.w	r3, r7, #8
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002534:	463b      	mov	r3, r7
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <MX_TIM2_Init+0x94>)
 800253e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002542:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <MX_TIM2_Init+0x94>)
 8002546:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800254a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <MX_TIM2_Init+0x94>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <MX_TIM2_Init+0x94>)
 8002554:	2201      	movs	r2, #1
 8002556:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002558:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <MX_TIM2_Init+0x94>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <MX_TIM2_Init+0x94>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002564:	4813      	ldr	r0, [pc, #76]	; (80025b4 <MX_TIM2_Init+0x94>)
 8002566:	f001 feb4 	bl	80042d2 <HAL_TIM_Base_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002570:	f7ff fe27 	bl	80021c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002578:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <MX_TIM2_Init+0x94>)
 8002582:	f001 fffd 	bl	8004580 <HAL_TIM_ConfigClockSource>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800258c:	f7ff fe19 	bl	80021c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002598:	463b      	mov	r3, r7
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <MX_TIM2_Init+0x94>)
 800259e:	f002 f9f1 	bl	8004984 <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025a8:	f7ff fe0b 	bl	80021c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	2000034c 	.word	0x2000034c

080025b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c8:	d113      	bne.n	80025f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_TIM_Base_MspInit+0x44>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_TIM_Base_MspInit+0x44>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	61d3      	str	r3, [r2, #28]
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_TIM_Base_MspInit+0x44>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	201c      	movs	r0, #28
 80025e8:	f000 f98d 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025ec:	201c      	movs	r0, #28
 80025ee:	f000 f9a6 	bl	800293e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000

08002600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002602:	490d      	ldr	r1, [pc, #52]	; (8002638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002618:	4c0a      	ldr	r4, [pc, #40]	; (8002644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002626:	f7ff ff75 	bl	8002514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f002 fb05 	bl	8004c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800262e:	f7ff fc25 	bl	8001e7c <main>
  bx lr
 8002632:	4770      	bx	lr
  ldr r0, =_sdata
 8002634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002638:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800263c:	0800849c 	.word	0x0800849c
  ldr r2, =_sbss
 8002640:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002644:	200003a8 	.word	0x200003a8

08002648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC1_2_IRQHandler>
	...

0800264c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_Init+0x28>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a07      	ldr	r2, [pc, #28]	; (8002674 <HAL_Init+0x28>)
 8002656:	f043 0310 	orr.w	r3, r3, #16
 800265a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265c:	2003      	movs	r0, #3
 800265e:	f000 f947 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002662:	200f      	movs	r0, #15
 8002664:	f000 f808 	bl	8002678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002668:	f7ff fe30 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40022000 	.word	0x40022000

08002678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_InitTick+0x54>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_InitTick+0x58>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f95f 	bl	800295a <HAL_SYSTICK_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00e      	b.n	80026c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d80a      	bhi.n	80026c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f000 f927 	bl	8002906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b8:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_InitTick+0x5c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000004 	.word	0x20000004
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	20000008 	.word	0x20000008

080026d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_IncTick+0x1c>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_IncTick+0x20>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a03      	ldr	r2, [pc, #12]	; (80026f8 <HAL_IncTick+0x20>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	2000000c 	.word	0x2000000c
 80026f8:	20000394 	.word	0x20000394

080026fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b02      	ldr	r3, [pc, #8]	; (800270c <HAL_GetTick+0x10>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	20000394 	.word	0x20000394

08002710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff fff0 	bl	80026fc <HAL_GetTick>
 800271c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d005      	beq.n	8002736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_Delay+0x44>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002736:	bf00      	nop
 8002738:	f7ff ffe0 	bl	80026fc <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	429a      	cmp	r2, r3
 8002746:	d8f7      	bhi.n	8002738 <HAL_Delay+0x28>
  {
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000000c 	.word	0x2000000c

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	; (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4906      	ldr	r1, [pc, #24]	; (80027f0 <__NVIC_EnableIRQ+0x34>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100

080027f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	6039      	str	r1, [r7, #0]
 80027fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	2b00      	cmp	r3, #0
 8002806:	db0a      	blt.n	800281e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	490c      	ldr	r1, [pc, #48]	; (8002840 <__NVIC_SetPriority+0x4c>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	0112      	lsls	r2, r2, #4
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	440b      	add	r3, r1
 8002818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800281c:	e00a      	b.n	8002834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4908      	ldr	r1, [pc, #32]	; (8002844 <__NVIC_SetPriority+0x50>)
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3b04      	subs	r3, #4
 800282c:	0112      	lsls	r2, r2, #4
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	440b      	add	r3, r1
 8002832:	761a      	strb	r2, [r3, #24]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f1c3 0307 	rsb	r3, r3, #7
 8002862:	2b04      	cmp	r3, #4
 8002864:	bf28      	it	cs
 8002866:	2304      	movcs	r3, #4
 8002868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3304      	adds	r3, #4
 800286e:	2b06      	cmp	r3, #6
 8002870:	d902      	bls.n	8002878 <NVIC_EncodePriority+0x30>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3b03      	subs	r3, #3
 8002876:	e000      	b.n	800287a <NVIC_EncodePriority+0x32>
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	401a      	ands	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002890:	f04f 31ff 	mov.w	r1, #4294967295
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43d9      	mvns	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	4313      	orrs	r3, r2
         );
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028bc:	d301      	bcc.n	80028c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028be:	2301      	movs	r3, #1
 80028c0:	e00f      	b.n	80028e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <SysTick_Config+0x40>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ca:	210f      	movs	r1, #15
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f7ff ff90 	bl	80027f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SysTick_Config+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <SysTick_Config+0x40>)
 80028dc:	2207      	movs	r2, #7
 80028de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff2d 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002918:	f7ff ff42 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 800291c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff90 	bl	8002848 <NVIC_EncodePriority>
 8002928:	4602      	mov	r2, r0
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff5f 	bl	80027f4 <__NVIC_SetPriority>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff35 	bl	80027bc <__NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffa2 	bl	80028ac <SysTick_Config>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b08b      	sub	sp, #44	; 0x2c
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002986:	e179      	b.n	8002c7c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002988:	2201      	movs	r2, #1
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	f040 8168 	bne.w	8002c76 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a96      	ldr	r2, [pc, #600]	; (8002c04 <HAL_GPIO_Init+0x290>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d05e      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029b0:	4a94      	ldr	r2, [pc, #592]	; (8002c04 <HAL_GPIO_Init+0x290>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d875      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029b6:	4a94      	ldr	r2, [pc, #592]	; (8002c08 <HAL_GPIO_Init+0x294>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d058      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029bc:	4a92      	ldr	r2, [pc, #584]	; (8002c08 <HAL_GPIO_Init+0x294>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d86f      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029c2:	4a92      	ldr	r2, [pc, #584]	; (8002c0c <HAL_GPIO_Init+0x298>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d052      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029c8:	4a90      	ldr	r2, [pc, #576]	; (8002c0c <HAL_GPIO_Init+0x298>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d869      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029ce:	4a90      	ldr	r2, [pc, #576]	; (8002c10 <HAL_GPIO_Init+0x29c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04c      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029d4:	4a8e      	ldr	r2, [pc, #568]	; (8002c10 <HAL_GPIO_Init+0x29c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d863      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029da:	4a8e      	ldr	r2, [pc, #568]	; (8002c14 <HAL_GPIO_Init+0x2a0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d046      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029e0:	4a8c      	ldr	r2, [pc, #560]	; (8002c14 <HAL_GPIO_Init+0x2a0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d85d      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029e6:	2b12      	cmp	r3, #18
 80029e8:	d82a      	bhi.n	8002a40 <HAL_GPIO_Init+0xcc>
 80029ea:	2b12      	cmp	r3, #18
 80029ec:	d859      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <HAL_GPIO_Init+0x80>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a6f 	.word	0x08002a6f
 80029f8:	08002a49 	.word	0x08002a49
 80029fc:	08002a5b 	.word	0x08002a5b
 8002a00:	08002a9d 	.word	0x08002a9d
 8002a04:	08002aa3 	.word	0x08002aa3
 8002a08:	08002aa3 	.word	0x08002aa3
 8002a0c:	08002aa3 	.word	0x08002aa3
 8002a10:	08002aa3 	.word	0x08002aa3
 8002a14:	08002aa3 	.word	0x08002aa3
 8002a18:	08002aa3 	.word	0x08002aa3
 8002a1c:	08002aa3 	.word	0x08002aa3
 8002a20:	08002aa3 	.word	0x08002aa3
 8002a24:	08002aa3 	.word	0x08002aa3
 8002a28:	08002aa3 	.word	0x08002aa3
 8002a2c:	08002aa3 	.word	0x08002aa3
 8002a30:	08002aa3 	.word	0x08002aa3
 8002a34:	08002aa3 	.word	0x08002aa3
 8002a38:	08002a51 	.word	0x08002a51
 8002a3c:	08002a65 	.word	0x08002a65
 8002a40:	4a75      	ldr	r2, [pc, #468]	; (8002c18 <HAL_GPIO_Init+0x2a4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a46:	e02c      	b.n	8002aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	623b      	str	r3, [r7, #32]
          break;
 8002a4e:	e029      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	3304      	adds	r3, #4
 8002a56:	623b      	str	r3, [r7, #32]
          break;
 8002a58:	e024      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	3308      	adds	r3, #8
 8002a60:	623b      	str	r3, [r7, #32]
          break;
 8002a62:	e01f      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	330c      	adds	r3, #12
 8002a6a:	623b      	str	r3, [r7, #32]
          break;
 8002a6c:	e01a      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a76:	2304      	movs	r3, #4
 8002a78:	623b      	str	r3, [r7, #32]
          break;
 8002a7a:	e013      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a84:	2308      	movs	r3, #8
 8002a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	611a      	str	r2, [r3, #16]
          break;
 8002a8e:	e009      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a90:	2308      	movs	r3, #8
 8002a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	615a      	str	r2, [r3, #20]
          break;
 8002a9a:	e003      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	623b      	str	r3, [r7, #32]
          break;
 8002aa0:	e000      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          break;
 8002aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2bff      	cmp	r3, #255	; 0xff
 8002aa8:	d801      	bhi.n	8002aae <HAL_GPIO_Init+0x13a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	e001      	b.n	8002ab2 <HAL_GPIO_Init+0x13e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2bff      	cmp	r3, #255	; 0xff
 8002ab8:	d802      	bhi.n	8002ac0 <HAL_GPIO_Init+0x14c>
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	e002      	b.n	8002ac6 <HAL_GPIO_Init+0x152>
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	3b08      	subs	r3, #8
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	210f      	movs	r1, #15
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	6a39      	ldr	r1, [r7, #32]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80c1 	beq.w	8002c76 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002af4:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <HAL_GPIO_Init+0x2a8>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <HAL_GPIO_Init+0x2a8>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6193      	str	r3, [r2, #24]
 8002b00:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_GPIO_Init+0x2a8>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b0c:	4a44      	ldr	r2, [pc, #272]	; (8002c20 <HAL_GPIO_Init+0x2ac>)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a3c      	ldr	r2, [pc, #240]	; (8002c24 <HAL_GPIO_Init+0x2b0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d01f      	beq.n	8002b78 <HAL_GPIO_Init+0x204>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <HAL_GPIO_Init+0x2b4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d019      	beq.n	8002b74 <HAL_GPIO_Init+0x200>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a3a      	ldr	r2, [pc, #232]	; (8002c2c <HAL_GPIO_Init+0x2b8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_GPIO_Init+0x1fc>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <HAL_GPIO_Init+0x2bc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00d      	beq.n	8002b6c <HAL_GPIO_Init+0x1f8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a38      	ldr	r2, [pc, #224]	; (8002c34 <HAL_GPIO_Init+0x2c0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <HAL_GPIO_Init+0x1f4>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a37      	ldr	r2, [pc, #220]	; (8002c38 <HAL_GPIO_Init+0x2c4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_GPIO_Init+0x1f0>
 8002b60:	2305      	movs	r3, #5
 8002b62:	e00a      	b.n	8002b7a <HAL_GPIO_Init+0x206>
 8002b64:	2306      	movs	r3, #6
 8002b66:	e008      	b.n	8002b7a <HAL_GPIO_Init+0x206>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	e006      	b.n	8002b7a <HAL_GPIO_Init+0x206>
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e004      	b.n	8002b7a <HAL_GPIO_Init+0x206>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_Init+0x206>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_GPIO_Init+0x206>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	f002 0203 	and.w	r2, r2, #3
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	4093      	lsls	r3, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b8a:	4925      	ldr	r1, [pc, #148]	; (8002c20 <HAL_GPIO_Init+0x2ac>)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba4:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4924      	ldr	r1, [pc, #144]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	4920      	ldr	r1, [pc, #128]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	491a      	ldr	r1, [pc, #104]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d025      	beq.n	8002c40 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4910      	ldr	r1, [pc, #64]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
 8002c00:	e025      	b.n	8002c4e <HAL_GPIO_Init+0x2da>
 8002c02:	bf00      	nop
 8002c04:	10320000 	.word	0x10320000
 8002c08:	10310000 	.word	0x10310000
 8002c0c:	10220000 	.word	0x10220000
 8002c10:	10210000 	.word	0x10210000
 8002c14:	10120000 	.word	0x10120000
 8002c18:	10110000 	.word	0x10110000
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40010800 	.word	0x40010800
 8002c28:	40010c00 	.word	0x40010c00
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	40011400 	.word	0x40011400
 8002c34:	40011800 	.word	0x40011800
 8002c38:	40011c00 	.word	0x40011c00
 8002c3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	4913      	ldr	r1, [pc, #76]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	490e      	ldr	r1, [pc, #56]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60cb      	str	r3, [r1, #12]
 8002c66:	e006      	b.n	8002c76 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	4909      	ldr	r1, [pc, #36]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	3301      	adds	r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f47f ae7e 	bne.w	8002988 <HAL_GPIO_Init+0x14>
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	372c      	adds	r7, #44	; 0x2c
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40010400 	.word	0x40010400

08002c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cac:	787b      	ldrb	r3, [r7, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cb8:	e003      	b.n	8002cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cba:	887b      	ldrh	r3, [r7, #2]
 8002cbc:	041a      	lsls	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	611a      	str	r2, [r3, #16]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e12b      	b.n	8002f36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fdde 	bl	80018b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	; 0x24
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d30:	f000 fce4 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8002d34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a81      	ldr	r2, [pc, #516]	; (8002f40 <HAL_I2C_Init+0x274>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d807      	bhi.n	8002d50 <HAL_I2C_Init+0x84>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a80      	ldr	r2, [pc, #512]	; (8002f44 <HAL_I2C_Init+0x278>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	bf94      	ite	ls
 8002d48:	2301      	movls	r3, #1
 8002d4a:	2300      	movhi	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e006      	b.n	8002d5e <HAL_I2C_Init+0x92>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a7d      	ldr	r2, [pc, #500]	; (8002f48 <HAL_I2C_Init+0x27c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0e7      	b.n	8002f36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a78      	ldr	r2, [pc, #480]	; (8002f4c <HAL_I2C_Init+0x280>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	0c9b      	lsrs	r3, r3, #18
 8002d70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_I2C_Init+0x274>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d802      	bhi.n	8002da0 <HAL_I2C_Init+0xd4>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	e009      	b.n	8002db4 <HAL_I2C_Init+0xe8>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	4a69      	ldr	r2, [pc, #420]	; (8002f50 <HAL_I2C_Init+0x284>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	3301      	adds	r3, #1
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	495c      	ldr	r1, [pc, #368]	; (8002f40 <HAL_I2C_Init+0x274>)
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d819      	bhi.n	8002e08 <HAL_I2C_Init+0x13c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e59      	subs	r1, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de8:	400b      	ands	r3, r1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_I2C_Init+0x138>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1e59      	subs	r1, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e02:	e051      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e04:	2304      	movs	r3, #4
 8002e06:	e04f      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d111      	bne.n	8002e34 <HAL_I2C_Init+0x168>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e58      	subs	r0, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	440b      	add	r3, r1
 8002e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e22:	3301      	adds	r3, #1
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e012      	b.n	8002e5a <HAL_I2C_Init+0x18e>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	0099      	lsls	r1, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Init+0x196>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e022      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10e      	bne.n	8002e88 <HAL_I2C_Init+0x1bc>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1e58      	subs	r0, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	440b      	add	r3, r1
 8002e78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e86:	e00f      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	0099      	lsls	r1, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	6809      	ldr	r1, [r1, #0]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6911      	ldr	r1, [r2, #16]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	000186a0 	.word	0x000186a0
 8002f44:	001e847f 	.word	0x001e847f
 8002f48:	003d08ff 	.word	0x003d08ff
 8002f4c:	431bde83 	.word	0x431bde83
 8002f50:	10624dd3 	.word	0x10624dd3

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e272      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8087 	beq.w	8003082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f74:	4b92      	ldr	r3, [pc, #584]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d00c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f80:	4b8f      	ldr	r3, [pc, #572]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d112      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5e>
 8002f8c:	4b8c      	ldr	r3, [pc, #560]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9a:	4b89      	ldr	r3, [pc, #548]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d06c      	beq.n	8003080 <HAL_RCC_OscConfig+0x12c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d168      	bne.n	8003080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e24c      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x76>
 8002fbc:	4b80      	ldr	r3, [pc, #512]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a7f      	ldr	r2, [pc, #508]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e02e      	b.n	8003028 <HAL_RCC_OscConfig+0xd4>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x98>
 8002fd2:	4b7b      	ldr	r3, [pc, #492]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7a      	ldr	r2, [pc, #488]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a77      	ldr	r2, [pc, #476]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e01d      	b.n	8003028 <HAL_RCC_OscConfig+0xd4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0xbc>
 8002ff6:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a71      	ldr	r2, [pc, #452]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b6f      	ldr	r3, [pc, #444]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6e      	ldr	r2, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0xd4>
 8003010:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6a      	ldr	r2, [pc, #424]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b68      	ldr	r3, [pc, #416]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a67      	ldr	r2, [pc, #412]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7ff fb64 	bl	80026fc <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7ff fb60 	bl	80026fc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e200      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0xe4>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7ff fb50 	bl	80026fc <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7ff fb4c 	bl	80026fc <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e1ec      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x10c>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d063      	beq.n	8003156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308e:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800309a:	4b49      	ldr	r3, [pc, #292]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d11c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x18c>
 80030a6:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x176>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e1c0      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4939      	ldr	r1, [pc, #228]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	e03a      	b.n	8003156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e8:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7ff fb05 	bl	80026fc <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f6:	f7ff fb01 	bl	80026fc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1a1      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	4b2d      	ldr	r3, [pc, #180]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4927      	ldr	r1, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
 8003128:	e015      	b.n	8003156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff fae4 	bl	80026fc <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003138:	f7ff fae0 	bl	80026fc <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e180      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d03a      	beq.n	80031d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d019      	beq.n	800319e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003170:	f7ff fac4 	bl	80026fc <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7ff fac0 	bl	80026fc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e160      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003196:	2001      	movs	r0, #1
 8003198:	f000 fac4 	bl	8003724 <RCC_Delay>
 800319c:	e01c      	b.n	80031d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a4:	f7ff faaa 	bl	80026fc <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031aa:	e00f      	b.n	80031cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ac:	f7ff faa6 	bl	80026fc <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d908      	bls.n	80031cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e146      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	42420000 	.word	0x42420000
 80031c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	4b92      	ldr	r3, [pc, #584]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e9      	bne.n	80031ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a6 	beq.w	8003332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b8b      	ldr	r3, [pc, #556]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b88      	ldr	r3, [pc, #544]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a87      	ldr	r2, [pc, #540]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	61d3      	str	r3, [r2, #28]
 8003202:	4b85      	ldr	r3, [pc, #532]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b82      	ldr	r3, [pc, #520]	; (800341c <HAL_RCC_OscConfig+0x4c8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d118      	bne.n	8003250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321e:	4b7f      	ldr	r3, [pc, #508]	; (800341c <HAL_RCC_OscConfig+0x4c8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7e      	ldr	r2, [pc, #504]	; (800341c <HAL_RCC_OscConfig+0x4c8>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322a:	f7ff fa67 	bl	80026fc <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003232:	f7ff fa63 	bl	80026fc <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e103      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	4b75      	ldr	r3, [pc, #468]	; (800341c <HAL_RCC_OscConfig+0x4c8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x312>
 8003258:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a6e      	ldr	r2, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e02d      	b.n	80032c2 <HAL_RCC_OscConfig+0x36e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x334>
 800326e:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	4a69      	ldr	r2, [pc, #420]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	6213      	str	r3, [r2, #32]
 800327a:	4b67      	ldr	r3, [pc, #412]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4a66      	ldr	r2, [pc, #408]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	6213      	str	r3, [r2, #32]
 8003286:	e01c      	b.n	80032c2 <HAL_RCC_OscConfig+0x36e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d10c      	bne.n	80032aa <HAL_RCC_OscConfig+0x356>
 8003290:	4b61      	ldr	r3, [pc, #388]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4a60      	ldr	r2, [pc, #384]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6213      	str	r3, [r2, #32]
 800329c:	4b5e      	ldr	r3, [pc, #376]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4a5d      	ldr	r2, [pc, #372]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6213      	str	r3, [r2, #32]
 80032a8:	e00b      	b.n	80032c2 <HAL_RCC_OscConfig+0x36e>
 80032aa:	4b5b      	ldr	r3, [pc, #364]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4a5a      	ldr	r2, [pc, #360]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6213      	str	r3, [r2, #32]
 80032b6:	4b58      	ldr	r3, [pc, #352]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	4a57      	ldr	r2, [pc, #348]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d015      	beq.n	80032f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7ff fa17 	bl	80026fc <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7ff fa13 	bl	80026fc <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0b1      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ee      	beq.n	80032d2 <HAL_RCC_OscConfig+0x37e>
 80032f4:	e014      	b.n	8003320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7ff fa01 	bl	80026fc <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7ff f9fd 	bl	80026fc <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e09b      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003314:	4b40      	ldr	r3, [pc, #256]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ee      	bne.n	80032fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8087 	beq.w	800344a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800333c:	4b36      	ldr	r3, [pc, #216]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d061      	beq.n	800340c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d146      	bne.n	80033de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b33      	ldr	r3, [pc, #204]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7ff f9d1 	bl	80026fc <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335e:	f7ff f9cd 	bl	80026fc <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e06d      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003370:	4b29      	ldr	r3, [pc, #164]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d108      	bne.n	8003398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	4921      	ldr	r1, [pc, #132]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003398:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a19      	ldr	r1, [r3, #32]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	430b      	orrs	r3, r1
 80033aa:	491b      	ldr	r1, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7ff f9a1 	bl	80026fc <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033be:	f7ff f99d 	bl	80026fc <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e03d      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x46a>
 80033dc:	e035      	b.n	800344a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7ff f98a 	bl	80026fc <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7ff f986 	bl	80026fc <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e026      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x498>
 800340a:	e01e      	b.n	800344a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e019      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
 8003420:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_OscConfig+0x500>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	429a      	cmp	r2, r3
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000

08003458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0d0      	b.n	800360e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d910      	bls.n	800349c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b67      	ldr	r3, [pc, #412]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0207 	bic.w	r2, r3, #7
 8003482:	4965      	ldr	r1, [pc, #404]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b63      	ldr	r3, [pc, #396]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0b8      	b.n	800360e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d020      	beq.n	80034ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b4:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a52      	ldr	r2, [pc, #328]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d8:	4b50      	ldr	r3, [pc, #320]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	494d      	ldr	r1, [pc, #308]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d040      	beq.n	8003578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d115      	bne.n	8003536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e07f      	b.n	800360e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e073      	b.n	800360e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e06b      	b.n	800360e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f023 0203 	bic.w	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4936      	ldr	r1, [pc, #216]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003548:	f7ff f8d8 	bl	80026fc <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	e00a      	b.n	8003566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003550:	f7ff f8d4 	bl	80026fc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e053      	b.n	800360e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 020c 	and.w	r2, r3, #12
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	429a      	cmp	r2, r3
 8003576:	d1eb      	bne.n	8003550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003578:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d210      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 0207 	bic.w	r2, r3, #7
 800358e:	4922      	ldr	r1, [pc, #136]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e032      	b.n	800360e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b4:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4916      	ldr	r1, [pc, #88]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	490e      	ldr	r1, [pc, #56]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e6:	f000 f821 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035ea:	4602      	mov	r2, r0
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	490a      	ldr	r1, [pc, #40]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035f8:	5ccb      	ldrb	r3, [r1, r3]
 80035fa:	fa22 f303 	lsr.w	r3, r2, r3
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1cc>)
 8003600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1d0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff f836 	bl	8002678 <HAL_InitTick>

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40022000 	.word	0x40022000
 800361c:	40021000 	.word	0x40021000
 8003620:	080080a0 	.word	0x080080a0
 8003624:	20000004 	.word	0x20000004
 8003628:	20000008 	.word	0x20000008

0800362c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b490      	push	{r4, r7}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003632:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003634:	1d3c      	adds	r4, r7, #4
 8003636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800363c:	f240 2301 	movw	r3, #513	; 0x201
 8003640:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	2300      	movs	r3, #0
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b04      	cmp	r3, #4
 8003664:	d002      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x40>
 8003666:	2b08      	cmp	r3, #8
 8003668:	d003      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x46>
 800366a:	e02b      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800366e:	623b      	str	r3, [r7, #32]
      break;
 8003670:	e02b      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	0c9b      	lsrs	r3, r3, #18
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	3328      	adds	r3, #40	; 0x28
 800367c:	443b      	add	r3, r7
 800367e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003682:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800368e:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	0c5b      	lsrs	r3, r3, #17
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	3328      	adds	r3, #40	; 0x28
 800369a:	443b      	add	r3, r7
 800369c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036a6:	fb03 f202 	mul.w	r2, r3, r2
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	e004      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	623b      	str	r3, [r7, #32]
      break;
 80036c2:	e002      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036c6:	623b      	str	r3, [r7, #32]
      break;
 80036c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ca:	6a3b      	ldr	r3, [r7, #32]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3728      	adds	r7, #40	; 0x28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc90      	pop	{r4, r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	08007aa0 	.word	0x08007aa0
 80036dc:	40021000 	.word	0x40021000
 80036e0:	007a1200 	.word	0x007a1200
 80036e4:	003d0900 	.word	0x003d0900

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	20000004 	.word	0x20000004

080036fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003700:	f7ff fff2 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	080080b0 	.word	0x080080b0

08003724 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <RCC_Delay+0x34>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0a      	ldr	r2, [pc, #40]	; (800375c <RCC_Delay+0x38>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0a5b      	lsrs	r3, r3, #9
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003740:	bf00      	nop
  }
  while (Delay --);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1e5a      	subs	r2, r3, #1
 8003746:	60fa      	str	r2, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f9      	bne.n	8003740 <RCC_Delay+0x1c>
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	20000004 	.word	0x20000004
 800375c:	10624dd3 	.word	0x10624dd3

08003760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e076      	b.n	8003860 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003782:	d009      	beq.n	8003798 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
 800378a:	e005      	b.n	8003798 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fe fd40 	bl	8002238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	ea42 0103 	orr.w	r1, r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	0c1a      	lsrs	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f002 0204 	and.w	r2, r2, #4
 800383e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800384e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_SPI_Transmit+0x22>
 8003886:	2302      	movs	r3, #2
 8003888:	e126      	b.n	8003ad8 <HAL_SPI_Transmit+0x270>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003892:	f7fe ff33 	bl	80026fc <HAL_GetTick>
 8003896:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d002      	beq.n	80038ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ac:	e10b      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_SPI_Transmit+0x52>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038be:	e102      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2203      	movs	r2, #3
 80038c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003906:	d10f      	bne.n	8003928 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003916:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003926:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d007      	beq.n	8003946 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003944:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394e:	d14b      	bne.n	80039e8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_SPI_Transmit+0xf6>
 8003958:	8afb      	ldrh	r3, [r7, #22]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d13e      	bne.n	80039dc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	881a      	ldrh	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003982:	e02b      	b.n	80039dc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d112      	bne.n	80039b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	881a      	ldrh	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80039b6:	e011      	b.n	80039dc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b8:	f7fe fea0 	bl	80026fc <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d803      	bhi.n	80039d0 <HAL_SPI_Transmit+0x168>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d102      	bne.n	80039d6 <HAL_SPI_Transmit+0x16e>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039da:	e074      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ce      	bne.n	8003984 <HAL_SPI_Transmit+0x11c>
 80039e6:	e04c      	b.n	8003a82 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_SPI_Transmit+0x18e>
 80039f0:	8afb      	ldrh	r3, [r7, #22]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d140      	bne.n	8003a78 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a1c:	e02c      	b.n	8003a78 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d113      	bne.n	8003a54 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a52:	e011      	b.n	8003a78 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a54:	f7fe fe52 	bl	80026fc <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d803      	bhi.n	8003a6c <HAL_SPI_Transmit+0x204>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d102      	bne.n	8003a72 <HAL_SPI_Transmit+0x20a>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a76:	e026      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1cd      	bne.n	8003a1e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	6839      	ldr	r1, [r7, #0]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fbb8 	bl	80041fc <SPI_EndRxTxTransaction>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e000      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ac4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ad6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afc:	d112      	bne.n	8003b24 <HAL_SPI_Receive+0x44>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f8f1 	bl	8003d02 <HAL_SPI_TransmitReceive>
 8003b20:	4603      	mov	r3, r0
 8003b22:	e0ea      	b.n	8003cfa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Receive+0x52>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e0e3      	b.n	8003cfa <HAL_SPI_Receive+0x21a>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b3a:	f7fe fddf 	bl	80026fc <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d002      	beq.n	8003b52 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b50:	e0ca      	b.n	8003ce8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_SPI_Receive+0x7e>
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b62:	e0c1      	b.n	8003ce8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2204      	movs	r2, #4
 8003b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	88fa      	ldrh	r2, [r7, #6]
 8003b7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	88fa      	ldrh	r2, [r7, #6]
 8003b82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003baa:	d10f      	bne.n	8003bcc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d007      	beq.n	8003bea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d162      	bne.n	8003cb8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003bf2:	e02e      	b.n	8003c52 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d115      	bne.n	8003c2e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f103 020c 	add.w	r2, r3, #12
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	7812      	ldrb	r2, [r2, #0]
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c2c:	e011      	b.n	8003c52 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c2e:	f7fe fd65 	bl	80026fc <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d803      	bhi.n	8003c46 <HAL_SPI_Receive+0x166>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d102      	bne.n	8003c4c <HAL_SPI_Receive+0x16c>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d102      	bne.n	8003c52 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c50:	e04a      	b.n	8003ce8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1cb      	bne.n	8003bf4 <HAL_SPI_Receive+0x114>
 8003c5c:	e031      	b.n	8003cc2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d113      	bne.n	8003c94 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	b292      	uxth	r2, r2
 8003c78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	1c9a      	adds	r2, r3, #2
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c92:	e011      	b.n	8003cb8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c94:	f7fe fd32 	bl	80026fc <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d803      	bhi.n	8003cac <HAL_SPI_Receive+0x1cc>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d102      	bne.n	8003cb2 <HAL_SPI_Receive+0x1d2>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cb6:	e017      	b.n	8003ce8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1cd      	bne.n	8003c5e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	6839      	ldr	r1, [r7, #0]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fa46 	bl	8004158 <SPI_EndRxTransaction>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
 8003ce4:	e000      	b.n	8003ce8 <HAL_SPI_Receive+0x208>
  }

error :
 8003ce6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b08c      	sub	sp, #48	; 0x30
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d10:	2301      	movs	r3, #1
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x26>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e18a      	b.n	800403e <HAL_SPI_TransmitReceive+0x33c>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d30:	f7fe fce4 	bl	80026fc <HAL_GetTick>
 8003d34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d46:	887b      	ldrh	r3, [r7, #2]
 8003d48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d00f      	beq.n	8003d72 <HAL_SPI_TransmitReceive+0x70>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d58:	d107      	bne.n	8003d6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <HAL_SPI_TransmitReceive+0x68>
 8003d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d003      	beq.n	8003d72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d70:	e15b      	b.n	800402a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_SPI_TransmitReceive+0x82>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_SPI_TransmitReceive+0x82>
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d8a:	e14e      	b.n	800402a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d003      	beq.n	8003da0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2205      	movs	r2, #5
 8003d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	887a      	ldrh	r2, [r7, #2]
 8003db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	887a      	ldrh	r2, [r7, #2]
 8003db6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	887a      	ldrh	r2, [r7, #2]
 8003dc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d007      	beq.n	8003df4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfc:	d178      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0x10a>
 8003e06:	8b7b      	ldrh	r3, [r7, #26]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d166      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e30:	e053      	b.n	8003eda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d11b      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x176>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_SPI_TransmitReceive+0x176>
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d113      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	881a      	ldrh	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	1c9a      	adds	r2, r3, #2
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d119      	bne.n	8003eba <HAL_SPI_TransmitReceive+0x1b8>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d014      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	b292      	uxth	r2, r2
 8003e9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	1c9a      	adds	r2, r3, #2
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003eba:	f7fe fc1f 	bl	80026fc <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d807      	bhi.n	8003eda <HAL_SPI_TransmitReceive+0x1d8>
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d003      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ed8:	e0a7      	b.n	800402a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1a6      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x130>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1a1      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x130>
 8003eee:	e07c      	b.n	8003fea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_SPI_TransmitReceive+0x1fc>
 8003ef8:	8b7b      	ldrh	r3, [r7, #26]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d16b      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	7812      	ldrb	r2, [r2, #0]
 8003f0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f24:	e057      	b.n	8003fd6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d11c      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x26c>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d017      	beq.n	8003f6e <HAL_SPI_TransmitReceive+0x26c>
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d114      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	7812      	ldrb	r2, [r2, #0]
 8003f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d119      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x2ae>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d014      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fac:	2301      	movs	r3, #1
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fb0:	f7fe fba4 	bl	80026fc <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d803      	bhi.n	8003fc8 <HAL_SPI_TransmitReceive+0x2c6>
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d102      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x2cc>
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fd4:	e029      	b.n	800402a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1a2      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x224>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d19d      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f904 	bl	80041fc <SPI_EndRxTxTransaction>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004006:	e010      	b.n	800402a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	e000      	b.n	800402a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004028:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800403a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800403e:	4618      	mov	r0, r3
 8004040:	3730      	adds	r7, #48	; 0x30
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004058:	f7fe fb50 	bl	80026fc <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	4413      	add	r3, r2
 8004066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004068:	f7fe fb48 	bl	80026fc <HAL_GetTick>
 800406c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800406e:	4b39      	ldr	r3, [pc, #228]	; (8004154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	015b      	lsls	r3, r3, #5
 8004074:	0d1b      	lsrs	r3, r3, #20
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800407e:	e054      	b.n	800412a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d050      	beq.n	800412a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004088:	f7fe fb38 	bl	80026fc <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	429a      	cmp	r2, r3
 8004096:	d902      	bls.n	800409e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d13d      	bne.n	800411a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b6:	d111      	bne.n	80040dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c0:	d004      	beq.n	80040cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ca:	d107      	bne.n	80040dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e4:	d10f      	bne.n	8004106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e017      	b.n	800414a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3b01      	subs	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4013      	ands	r3, r2
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	429a      	cmp	r2, r3
 8004146:	d19b      	bne.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000004 	.word	0x20000004

08004158 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416c:	d111      	bne.n	8004192 <SPI_EndRxTransaction+0x3a>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004176:	d004      	beq.n	8004182 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004180:	d107      	bne.n	8004192 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004190:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419a:	d117      	bne.n	80041cc <SPI_EndRxTransaction+0x74>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	d112      	bne.n	80041cc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2101      	movs	r1, #1
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff ff49 	bl	8004048 <SPI_WaitFlagStateUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01a      	beq.n	80041f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e013      	b.n	80041f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2200      	movs	r2, #0
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff ff36 	bl	8004048 <SPI_WaitFlagStateUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e000      	b.n	80041f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2200      	movs	r2, #0
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff ff18 	bl	8004048 <SPI_WaitFlagStateUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e000      	b.n	8004230 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d004      	beq.n	8004254 <HAL_SRAM_Init+0x1c>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004252:	d101      	bne.n	8004258 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e038      	b.n	80042ca <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7fd fa5b 	bl	8001728 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3308      	adds	r3, #8
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f000 fbff 	bl	8004a80 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	461a      	mov	r2, r3
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	f000 fc61 	bl	8004b54 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6858      	ldr	r0, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	f000 fc8c 	bl	8004bbc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	6892      	ldr	r2, [r2, #8]
 80042b8:	f041 0101 	orr.w	r1, r1, #1
 80042bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e041      	b.n	8004368 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fe f95d 	bl	80025b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f000 fa27 	bl	8004764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0202 	mvn.w	r2, #2
 800439c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9ba 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9ad 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f9bc 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0204 	mvn.w	r2, #4
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f990 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f983 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f992 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0208 	mvn.w	r2, #8
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2204      	movs	r2, #4
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f966 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f959 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f968 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2208      	movs	r2, #8
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f93c 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f92f 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f93e 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0201 	mvn.w	r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f90a 	bl	8004708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 faa7 	bl	8004a6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f902 	bl	8004750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0220 	mvn.w	r2, #32
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa72 	bl	8004a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIM_ConfigClockSource+0x18>
 8004594:	2302      	movs	r3, #2
 8004596:	e0b3      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x180>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d0:	d03e      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0xd0>
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d6:	f200 8087 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	f000 8085 	beq.w	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e6:	d87f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 80045e8:	2b70      	cmp	r3, #112	; 0x70
 80045ea:	d01a      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0xa2>
 80045ec:	2b70      	cmp	r3, #112	; 0x70
 80045ee:	d87b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 80045f0:	2b60      	cmp	r3, #96	; 0x60
 80045f2:	d050      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x116>
 80045f4:	2b60      	cmp	r3, #96	; 0x60
 80045f6:	d877      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 80045f8:	2b50      	cmp	r3, #80	; 0x50
 80045fa:	d03c      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0xf6>
 80045fc:	2b50      	cmp	r3, #80	; 0x50
 80045fe:	d873      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d058      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x136>
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d86f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d064      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x156>
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d86b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d060      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x156>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d867      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05c      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x156>
 800461c:	2b10      	cmp	r3, #16
 800461e:	d05a      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004620:	e062      	b.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6899      	ldr	r1, [r3, #8]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f000 f988 	bl	8004946 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004644:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	609a      	str	r2, [r3, #8]
      break;
 800464e:	e04e      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6899      	ldr	r1, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f000 f971 	bl	8004946 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004672:	609a      	str	r2, [r3, #8]
      break;
 8004674:	e03b      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	f000 f8e8 	bl	8004858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2150      	movs	r1, #80	; 0x50
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f93f 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004694:	e02b      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 f906 	bl	80048b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2160      	movs	r1, #96	; 0x60
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f92f 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 80046b4:	e01b      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 f8c8 	bl	8004858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f91f 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 80046d4:	e00b      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f000 f916 	bl	8004912 <TIM_ITRx_SetConfig>
        break;
 80046e6:	e002      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046e8:	bf00      	nop
 80046ea:	e000      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
	...

08004764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a33      	ldr	r2, [pc, #204]	; (8004844 <TIM_Base_SetConfig+0xe0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a32      	ldr	r2, [pc, #200]	; (8004848 <TIM_Base_SetConfig+0xe4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00f      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478a:	d00b      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a2f      	ldr	r2, [pc, #188]	; (800484c <TIM_Base_SetConfig+0xe8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a2e      	ldr	r2, [pc, #184]	; (8004850 <TIM_Base_SetConfig+0xec>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2d      	ldr	r2, [pc, #180]	; (8004854 <TIM_Base_SetConfig+0xf0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a22      	ldr	r2, [pc, #136]	; (8004844 <TIM_Base_SetConfig+0xe0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <TIM_Base_SetConfig+0x82>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a21      	ldr	r2, [pc, #132]	; (8004848 <TIM_Base_SetConfig+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00f      	beq.n	80047e6 <TIM_Base_SetConfig+0x82>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047cc:	d00b      	beq.n	80047e6 <TIM_Base_SetConfig+0x82>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1e      	ldr	r2, [pc, #120]	; (800484c <TIM_Base_SetConfig+0xe8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <TIM_Base_SetConfig+0x82>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <TIM_Base_SetConfig+0xec>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_Base_SetConfig+0x82>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <TIM_Base_SetConfig+0xf0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d108      	bne.n	80047f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a09      	ldr	r2, [pc, #36]	; (8004844 <TIM_Base_SetConfig+0xe0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0xc8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <TIM_Base_SetConfig+0xe4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d103      	bne.n	8004834 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	615a      	str	r2, [r3, #20]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40013400 	.word	0x40013400
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00

08004858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	f023 0201 	bic.w	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f023 030a 	bic.w	r3, r3, #10
 8004894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	621a      	str	r2, [r3, #32]
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f023 0210 	bic.w	r2, r3, #16
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	031b      	lsls	r3, r3, #12
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	621a      	str	r2, [r3, #32]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	f043 0307 	orr.w	r3, r3, #7
 8004934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	609a      	str	r2, [r3, #8]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr

08004946 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004946:	b480      	push	{r7}
 8004948:	b087      	sub	sp, #28
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004960:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	021a      	lsls	r2, r3, #8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	431a      	orrs	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4313      	orrs	r3, r2
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	609a      	str	r2, [r3, #8]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004998:	2302      	movs	r3, #2
 800499a:	e050      	b.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1b      	ldr	r2, [pc, #108]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d018      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a19      	ldr	r2, [pc, #100]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f2:	d00e      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10c      	bne.n	8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40013400 	.word	0x40013400
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00

08004a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	f023 0101 	bic.w	r1, r3, #1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d102      	bne.n	8004ab0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	e001      	b.n	8004ab4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004ac0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004ac6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004acc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004ad2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004ad8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004ade:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004ae4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004aea:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004af0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <FSMC_NORSRAM_Init+0xd0>)
 8004b10:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b18:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004b20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	ea02 0103 	and.w	r1, r2, r3
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4319      	orrs	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	0008fb7f 	.word	0x0008fb7f

08004b54 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	051b      	lsls	r3, r3, #20
 8004b92:	431a      	orrs	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	3b02      	subs	r3, #2
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	3201      	adds	r2, #1
 8004ba8:	4319      	orrs	r1, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bd0:	d11d      	bne.n	8004c0e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	6811      	ldr	r1, [r2, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	6852      	ldr	r2, [r2, #4]
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	4311      	orrs	r1, r2
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	6892      	ldr	r2, [r2, #8]
 8004bee:	0212      	lsls	r2, r2, #8
 8004bf0:	4311      	orrs	r1, r2
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	6992      	ldr	r2, [r2, #24]
 8004bf6:	4311      	orrs	r1, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	68d2      	ldr	r2, [r2, #12]
 8004bfc:	0412      	lsls	r2, r2, #16
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	ea43 0102 	orr.w	r1, r3, r2
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004c0c:	e005      	b.n	8004c1a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	cff00000 	.word	0xcff00000

08004c2c <__errno>:
 8004c2c:	4b01      	ldr	r3, [pc, #4]	; (8004c34 <__errno+0x8>)
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000010 	.word	0x20000010

08004c38 <__libc_init_array>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	4d0c      	ldr	r5, [pc, #48]	; (8004c70 <__libc_init_array+0x38>)
 8004c3e:	4c0d      	ldr	r4, [pc, #52]	; (8004c74 <__libc_init_array+0x3c>)
 8004c40:	1b64      	subs	r4, r4, r5
 8004c42:	10a4      	asrs	r4, r4, #2
 8004c44:	42a6      	cmp	r6, r4
 8004c46:	d109      	bne.n	8004c5c <__libc_init_array+0x24>
 8004c48:	f002 fefa 	bl	8007a40 <_init>
 8004c4c:	2600      	movs	r6, #0
 8004c4e:	4d0a      	ldr	r5, [pc, #40]	; (8004c78 <__libc_init_array+0x40>)
 8004c50:	4c0a      	ldr	r4, [pc, #40]	; (8004c7c <__libc_init_array+0x44>)
 8004c52:	1b64      	subs	r4, r4, r5
 8004c54:	10a4      	asrs	r4, r4, #2
 8004c56:	42a6      	cmp	r6, r4
 8004c58:	d105      	bne.n	8004c66 <__libc_init_array+0x2e>
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c60:	4798      	blx	r3
 8004c62:	3601      	adds	r6, #1
 8004c64:	e7ee      	b.n	8004c44 <__libc_init_array+0xc>
 8004c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6a:	4798      	blx	r3
 8004c6c:	3601      	adds	r6, #1
 8004c6e:	e7f2      	b.n	8004c56 <__libc_init_array+0x1e>
 8004c70:	08008494 	.word	0x08008494
 8004c74:	08008494 	.word	0x08008494
 8004c78:	08008494 	.word	0x08008494
 8004c7c:	08008498 	.word	0x08008498

08004c80 <memset>:
 8004c80:	4603      	mov	r3, r0
 8004c82:	4402      	add	r2, r0
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d100      	bne.n	8004c8a <memset+0xa>
 8004c88:	4770      	bx	lr
 8004c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c8e:	e7f9      	b.n	8004c84 <memset+0x4>

08004c90 <__cvt>:
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c96:	461f      	mov	r7, r3
 8004c98:	bfbb      	ittet	lt
 8004c9a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c9e:	461f      	movlt	r7, r3
 8004ca0:	2300      	movge	r3, #0
 8004ca2:	232d      	movlt	r3, #45	; 0x2d
 8004ca4:	b088      	sub	sp, #32
 8004ca6:	4614      	mov	r4, r2
 8004ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004caa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004cac:	7013      	strb	r3, [r2, #0]
 8004cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004cb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004cb4:	f023 0820 	bic.w	r8, r3, #32
 8004cb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cbc:	d005      	beq.n	8004cca <__cvt+0x3a>
 8004cbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004cc2:	d100      	bne.n	8004cc6 <__cvt+0x36>
 8004cc4:	3501      	adds	r5, #1
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e000      	b.n	8004ccc <__cvt+0x3c>
 8004cca:	2303      	movs	r3, #3
 8004ccc:	aa07      	add	r2, sp, #28
 8004cce:	9204      	str	r2, [sp, #16]
 8004cd0:	aa06      	add	r2, sp, #24
 8004cd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004cd6:	e9cd 3500 	strd	r3, r5, [sp]
 8004cda:	4622      	mov	r2, r4
 8004cdc:	463b      	mov	r3, r7
 8004cde:	f000 fce3 	bl	80056a8 <_dtoa_r>
 8004ce2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	d102      	bne.n	8004cf0 <__cvt+0x60>
 8004cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cec:	07db      	lsls	r3, r3, #31
 8004cee:	d522      	bpl.n	8004d36 <__cvt+0xa6>
 8004cf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cf4:	eb06 0905 	add.w	r9, r6, r5
 8004cf8:	d110      	bne.n	8004d1c <__cvt+0x8c>
 8004cfa:	7833      	ldrb	r3, [r6, #0]
 8004cfc:	2b30      	cmp	r3, #48	; 0x30
 8004cfe:	d10a      	bne.n	8004d16 <__cvt+0x86>
 8004d00:	2200      	movs	r2, #0
 8004d02:	2300      	movs	r3, #0
 8004d04:	4620      	mov	r0, r4
 8004d06:	4639      	mov	r1, r7
 8004d08:	f7fb feba 	bl	8000a80 <__aeabi_dcmpeq>
 8004d0c:	b918      	cbnz	r0, 8004d16 <__cvt+0x86>
 8004d0e:	f1c5 0501 	rsb	r5, r5, #1
 8004d12:	f8ca 5000 	str.w	r5, [sl]
 8004d16:	f8da 3000 	ldr.w	r3, [sl]
 8004d1a:	4499      	add	r9, r3
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4620      	mov	r0, r4
 8004d22:	4639      	mov	r1, r7
 8004d24:	f7fb feac 	bl	8000a80 <__aeabi_dcmpeq>
 8004d28:	b108      	cbz	r0, 8004d2e <__cvt+0x9e>
 8004d2a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d2e:	2230      	movs	r2, #48	; 0x30
 8004d30:	9b07      	ldr	r3, [sp, #28]
 8004d32:	454b      	cmp	r3, r9
 8004d34:	d307      	bcc.n	8004d46 <__cvt+0xb6>
 8004d36:	4630      	mov	r0, r6
 8004d38:	9b07      	ldr	r3, [sp, #28]
 8004d3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d3c:	1b9b      	subs	r3, r3, r6
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	b008      	add	sp, #32
 8004d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d46:	1c59      	adds	r1, r3, #1
 8004d48:	9107      	str	r1, [sp, #28]
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	e7f0      	b.n	8004d30 <__cvt+0xa0>

08004d4e <__exponent>:
 8004d4e:	4603      	mov	r3, r0
 8004d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d52:	2900      	cmp	r1, #0
 8004d54:	f803 2b02 	strb.w	r2, [r3], #2
 8004d58:	bfb6      	itet	lt
 8004d5a:	222d      	movlt	r2, #45	; 0x2d
 8004d5c:	222b      	movge	r2, #43	; 0x2b
 8004d5e:	4249      	neglt	r1, r1
 8004d60:	2909      	cmp	r1, #9
 8004d62:	7042      	strb	r2, [r0, #1]
 8004d64:	dd2b      	ble.n	8004dbe <__exponent+0x70>
 8004d66:	f10d 0407 	add.w	r4, sp, #7
 8004d6a:	46a4      	mov	ip, r4
 8004d6c:	270a      	movs	r7, #10
 8004d6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d72:	460a      	mov	r2, r1
 8004d74:	46a6      	mov	lr, r4
 8004d76:	fb07 1516 	mls	r5, r7, r6, r1
 8004d7a:	2a63      	cmp	r2, #99	; 0x63
 8004d7c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004d80:	4631      	mov	r1, r6
 8004d82:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d8a:	dcf0      	bgt.n	8004d6e <__exponent+0x20>
 8004d8c:	3130      	adds	r1, #48	; 0x30
 8004d8e:	f1ae 0502 	sub.w	r5, lr, #2
 8004d92:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d96:	4629      	mov	r1, r5
 8004d98:	1c44      	adds	r4, r0, #1
 8004d9a:	4561      	cmp	r1, ip
 8004d9c:	d30a      	bcc.n	8004db4 <__exponent+0x66>
 8004d9e:	f10d 0209 	add.w	r2, sp, #9
 8004da2:	eba2 020e 	sub.w	r2, r2, lr
 8004da6:	4565      	cmp	r5, ip
 8004da8:	bf88      	it	hi
 8004daa:	2200      	movhi	r2, #0
 8004dac:	4413      	add	r3, r2
 8004dae:	1a18      	subs	r0, r3, r0
 8004db0:	b003      	add	sp, #12
 8004db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004db8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004dbc:	e7ed      	b.n	8004d9a <__exponent+0x4c>
 8004dbe:	2330      	movs	r3, #48	; 0x30
 8004dc0:	3130      	adds	r1, #48	; 0x30
 8004dc2:	7083      	strb	r3, [r0, #2]
 8004dc4:	70c1      	strb	r1, [r0, #3]
 8004dc6:	1d03      	adds	r3, r0, #4
 8004dc8:	e7f1      	b.n	8004dae <__exponent+0x60>
	...

08004dcc <_printf_float>:
 8004dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd0:	b091      	sub	sp, #68	; 0x44
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004dd8:	4616      	mov	r6, r2
 8004dda:	461f      	mov	r7, r3
 8004ddc:	4605      	mov	r5, r0
 8004dde:	f001 fa51 	bl	8006284 <_localeconv_r>
 8004de2:	6803      	ldr	r3, [r0, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	9309      	str	r3, [sp, #36]	; 0x24
 8004de8:	f7fb fa1e 	bl	8000228 <strlen>
 8004dec:	2300      	movs	r3, #0
 8004dee:	930e      	str	r3, [sp, #56]	; 0x38
 8004df0:	f8d8 3000 	ldr.w	r3, [r8]
 8004df4:	900a      	str	r0, [sp, #40]	; 0x28
 8004df6:	3307      	adds	r3, #7
 8004df8:	f023 0307 	bic.w	r3, r3, #7
 8004dfc:	f103 0208 	add.w	r2, r3, #8
 8004e00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e04:	f8d4 b000 	ldr.w	fp, [r4]
 8004e08:	f8c8 2000 	str.w	r2, [r8]
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e14:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e18:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e22:	4640      	mov	r0, r8
 8004e24:	4b9c      	ldr	r3, [pc, #624]	; (8005098 <_printf_float+0x2cc>)
 8004e26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e28:	f7fb fe5c 	bl	8000ae4 <__aeabi_dcmpun>
 8004e2c:	bb70      	cbnz	r0, 8004e8c <_printf_float+0xc0>
 8004e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e32:	4640      	mov	r0, r8
 8004e34:	4b98      	ldr	r3, [pc, #608]	; (8005098 <_printf_float+0x2cc>)
 8004e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e38:	f7fb fe36 	bl	8000aa8 <__aeabi_dcmple>
 8004e3c:	bb30      	cbnz	r0, 8004e8c <_printf_float+0xc0>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2300      	movs	r3, #0
 8004e42:	4640      	mov	r0, r8
 8004e44:	4651      	mov	r1, sl
 8004e46:	f7fb fe25 	bl	8000a94 <__aeabi_dcmplt>
 8004e4a:	b110      	cbz	r0, 8004e52 <_printf_float+0x86>
 8004e4c:	232d      	movs	r3, #45	; 0x2d
 8004e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e52:	4b92      	ldr	r3, [pc, #584]	; (800509c <_printf_float+0x2d0>)
 8004e54:	4892      	ldr	r0, [pc, #584]	; (80050a0 <_printf_float+0x2d4>)
 8004e56:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e5a:	bf94      	ite	ls
 8004e5c:	4698      	movls	r8, r3
 8004e5e:	4680      	movhi	r8, r0
 8004e60:	2303      	movs	r3, #3
 8004e62:	f04f 0a00 	mov.w	sl, #0
 8004e66:	6123      	str	r3, [r4, #16]
 8004e68:	f02b 0304 	bic.w	r3, fp, #4
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	4633      	mov	r3, r6
 8004e70:	4621      	mov	r1, r4
 8004e72:	4628      	mov	r0, r5
 8004e74:	9700      	str	r7, [sp, #0]
 8004e76:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e78:	f000 f9d4 	bl	8005224 <_printf_common>
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f040 8090 	bne.w	8004fa2 <_printf_float+0x1d6>
 8004e82:	f04f 30ff 	mov.w	r0, #4294967295
 8004e86:	b011      	add	sp, #68	; 0x44
 8004e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	4653      	mov	r3, sl
 8004e90:	4640      	mov	r0, r8
 8004e92:	4651      	mov	r1, sl
 8004e94:	f7fb fe26 	bl	8000ae4 <__aeabi_dcmpun>
 8004e98:	b148      	cbz	r0, 8004eae <_printf_float+0xe2>
 8004e9a:	f1ba 0f00 	cmp.w	sl, #0
 8004e9e:	bfb8      	it	lt
 8004ea0:	232d      	movlt	r3, #45	; 0x2d
 8004ea2:	4880      	ldr	r0, [pc, #512]	; (80050a4 <_printf_float+0x2d8>)
 8004ea4:	bfb8      	it	lt
 8004ea6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004eaa:	4b7f      	ldr	r3, [pc, #508]	; (80050a8 <_printf_float+0x2dc>)
 8004eac:	e7d3      	b.n	8004e56 <_printf_float+0x8a>
 8004eae:	6863      	ldr	r3, [r4, #4]
 8004eb0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	d142      	bne.n	8004f3e <_printf_float+0x172>
 8004eb8:	2306      	movs	r3, #6
 8004eba:	6063      	str	r3, [r4, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	9206      	str	r2, [sp, #24]
 8004ec0:	aa0e      	add	r2, sp, #56	; 0x38
 8004ec2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ec6:	aa0d      	add	r2, sp, #52	; 0x34
 8004ec8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ecc:	9203      	str	r2, [sp, #12]
 8004ece:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004ed2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	6863      	ldr	r3, [r4, #4]
 8004eda:	4642      	mov	r2, r8
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4628      	mov	r0, r5
 8004ee0:	4653      	mov	r3, sl
 8004ee2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ee4:	f7ff fed4 	bl	8004c90 <__cvt>
 8004ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eea:	4680      	mov	r8, r0
 8004eec:	2947      	cmp	r1, #71	; 0x47
 8004eee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ef0:	d108      	bne.n	8004f04 <_printf_float+0x138>
 8004ef2:	1cc8      	adds	r0, r1, #3
 8004ef4:	db02      	blt.n	8004efc <_printf_float+0x130>
 8004ef6:	6863      	ldr	r3, [r4, #4]
 8004ef8:	4299      	cmp	r1, r3
 8004efa:	dd40      	ble.n	8004f7e <_printf_float+0x1b2>
 8004efc:	f1a9 0902 	sub.w	r9, r9, #2
 8004f00:	fa5f f989 	uxtb.w	r9, r9
 8004f04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f08:	d81f      	bhi.n	8004f4a <_printf_float+0x17e>
 8004f0a:	464a      	mov	r2, r9
 8004f0c:	3901      	subs	r1, #1
 8004f0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f12:	910d      	str	r1, [sp, #52]	; 0x34
 8004f14:	f7ff ff1b 	bl	8004d4e <__exponent>
 8004f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f1a:	4682      	mov	sl, r0
 8004f1c:	1813      	adds	r3, r2, r0
 8004f1e:	2a01      	cmp	r2, #1
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	dc02      	bgt.n	8004f2a <_printf_float+0x15e>
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	07d2      	lsls	r2, r2, #31
 8004f28:	d501      	bpl.n	8004f2e <_printf_float+0x162>
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d09b      	beq.n	8004e6e <_printf_float+0xa2>
 8004f36:	232d      	movs	r3, #45	; 0x2d
 8004f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f3c:	e797      	b.n	8004e6e <_printf_float+0xa2>
 8004f3e:	2947      	cmp	r1, #71	; 0x47
 8004f40:	d1bc      	bne.n	8004ebc <_printf_float+0xf0>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ba      	bne.n	8004ebc <_printf_float+0xf0>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e7b7      	b.n	8004eba <_printf_float+0xee>
 8004f4a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f4e:	d118      	bne.n	8004f82 <_printf_float+0x1b6>
 8004f50:	2900      	cmp	r1, #0
 8004f52:	6863      	ldr	r3, [r4, #4]
 8004f54:	dd0b      	ble.n	8004f6e <_printf_float+0x1a2>
 8004f56:	6121      	str	r1, [r4, #16]
 8004f58:	b913      	cbnz	r3, 8004f60 <_printf_float+0x194>
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	07d0      	lsls	r0, r2, #31
 8004f5e:	d502      	bpl.n	8004f66 <_printf_float+0x19a>
 8004f60:	3301      	adds	r3, #1
 8004f62:	440b      	add	r3, r1
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	f04f 0a00 	mov.w	sl, #0
 8004f6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f6c:	e7df      	b.n	8004f2e <_printf_float+0x162>
 8004f6e:	b913      	cbnz	r3, 8004f76 <_printf_float+0x1aa>
 8004f70:	6822      	ldr	r2, [r4, #0]
 8004f72:	07d2      	lsls	r2, r2, #31
 8004f74:	d501      	bpl.n	8004f7a <_printf_float+0x1ae>
 8004f76:	3302      	adds	r3, #2
 8004f78:	e7f4      	b.n	8004f64 <_printf_float+0x198>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e7f2      	b.n	8004f64 <_printf_float+0x198>
 8004f7e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f84:	4299      	cmp	r1, r3
 8004f86:	db05      	blt.n	8004f94 <_printf_float+0x1c8>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	6121      	str	r1, [r4, #16]
 8004f8c:	07d8      	lsls	r0, r3, #31
 8004f8e:	d5ea      	bpl.n	8004f66 <_printf_float+0x19a>
 8004f90:	1c4b      	adds	r3, r1, #1
 8004f92:	e7e7      	b.n	8004f64 <_printf_float+0x198>
 8004f94:	2900      	cmp	r1, #0
 8004f96:	bfcc      	ite	gt
 8004f98:	2201      	movgt	r2, #1
 8004f9a:	f1c1 0202 	rsble	r2, r1, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	e7e0      	b.n	8004f64 <_printf_float+0x198>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	055a      	lsls	r2, r3, #21
 8004fa6:	d407      	bmi.n	8004fb8 <_printf_float+0x1ec>
 8004fa8:	6923      	ldr	r3, [r4, #16]
 8004faa:	4642      	mov	r2, r8
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d12b      	bne.n	800500e <_printf_float+0x242>
 8004fb6:	e764      	b.n	8004e82 <_printf_float+0xb6>
 8004fb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fbc:	f240 80dd 	bls.w	800517a <_printf_float+0x3ae>
 8004fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f7fb fd5a 	bl	8000a80 <__aeabi_dcmpeq>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d033      	beq.n	8005038 <_printf_float+0x26c>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	4a35      	ldr	r2, [pc, #212]	; (80050ac <_printf_float+0x2e0>)
 8004fd8:	47b8      	blx	r7
 8004fda:	3001      	adds	r0, #1
 8004fdc:	f43f af51 	beq.w	8004e82 <_printf_float+0xb6>
 8004fe0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	db02      	blt.n	8004fee <_printf_float+0x222>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	07d8      	lsls	r0, r3, #31
 8004fec:	d50f      	bpl.n	800500e <_printf_float+0x242>
 8004fee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	47b8      	blx	r7
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	f43f af42 	beq.w	8004e82 <_printf_float+0xb6>
 8004ffe:	f04f 0800 	mov.w	r8, #0
 8005002:	f104 091a 	add.w	r9, r4, #26
 8005006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005008:	3b01      	subs	r3, #1
 800500a:	4543      	cmp	r3, r8
 800500c:	dc09      	bgt.n	8005022 <_printf_float+0x256>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	079b      	lsls	r3, r3, #30
 8005012:	f100 8102 	bmi.w	800521a <_printf_float+0x44e>
 8005016:	68e0      	ldr	r0, [r4, #12]
 8005018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800501a:	4298      	cmp	r0, r3
 800501c:	bfb8      	it	lt
 800501e:	4618      	movlt	r0, r3
 8005020:	e731      	b.n	8004e86 <_printf_float+0xba>
 8005022:	2301      	movs	r3, #1
 8005024:	464a      	mov	r2, r9
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	47b8      	blx	r7
 800502c:	3001      	adds	r0, #1
 800502e:	f43f af28 	beq.w	8004e82 <_printf_float+0xb6>
 8005032:	f108 0801 	add.w	r8, r8, #1
 8005036:	e7e6      	b.n	8005006 <_printf_float+0x23a>
 8005038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800503a:	2b00      	cmp	r3, #0
 800503c:	dc38      	bgt.n	80050b0 <_printf_float+0x2e4>
 800503e:	2301      	movs	r3, #1
 8005040:	4631      	mov	r1, r6
 8005042:	4628      	mov	r0, r5
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <_printf_float+0x2e0>)
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f af1a 	beq.w	8004e82 <_printf_float+0xb6>
 800504e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005052:	4313      	orrs	r3, r2
 8005054:	d102      	bne.n	800505c <_printf_float+0x290>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	07d9      	lsls	r1, r3, #31
 800505a:	d5d8      	bpl.n	800500e <_printf_float+0x242>
 800505c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	f43f af0b 	beq.w	8004e82 <_printf_float+0xb6>
 800506c:	f04f 0900 	mov.w	r9, #0
 8005070:	f104 0a1a 	add.w	sl, r4, #26
 8005074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005076:	425b      	negs	r3, r3
 8005078:	454b      	cmp	r3, r9
 800507a:	dc01      	bgt.n	8005080 <_printf_float+0x2b4>
 800507c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800507e:	e794      	b.n	8004faa <_printf_float+0x1de>
 8005080:	2301      	movs	r3, #1
 8005082:	4652      	mov	r2, sl
 8005084:	4631      	mov	r1, r6
 8005086:	4628      	mov	r0, r5
 8005088:	47b8      	blx	r7
 800508a:	3001      	adds	r0, #1
 800508c:	f43f aef9 	beq.w	8004e82 <_printf_float+0xb6>
 8005090:	f109 0901 	add.w	r9, r9, #1
 8005094:	e7ee      	b.n	8005074 <_printf_float+0x2a8>
 8005096:	bf00      	nop
 8005098:	7fefffff 	.word	0x7fefffff
 800509c:	080080bc 	.word	0x080080bc
 80050a0:	080080c0 	.word	0x080080c0
 80050a4:	080080c8 	.word	0x080080c8
 80050a8:	080080c4 	.word	0x080080c4
 80050ac:	080080cc 	.word	0x080080cc
 80050b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050b4:	429a      	cmp	r2, r3
 80050b6:	bfa8      	it	ge
 80050b8:	461a      	movge	r2, r3
 80050ba:	2a00      	cmp	r2, #0
 80050bc:	4691      	mov	r9, r2
 80050be:	dc37      	bgt.n	8005130 <_printf_float+0x364>
 80050c0:	f04f 0b00 	mov.w	fp, #0
 80050c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050c8:	f104 021a 	add.w	r2, r4, #26
 80050cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80050d0:	ebaa 0309 	sub.w	r3, sl, r9
 80050d4:	455b      	cmp	r3, fp
 80050d6:	dc33      	bgt.n	8005140 <_printf_float+0x374>
 80050d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050dc:	429a      	cmp	r2, r3
 80050de:	db3b      	blt.n	8005158 <_printf_float+0x38c>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	07da      	lsls	r2, r3, #31
 80050e4:	d438      	bmi.n	8005158 <_printf_float+0x38c>
 80050e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050ea:	eba3 020a 	sub.w	r2, r3, sl
 80050ee:	eba3 0901 	sub.w	r9, r3, r1
 80050f2:	4591      	cmp	r9, r2
 80050f4:	bfa8      	it	ge
 80050f6:	4691      	movge	r9, r2
 80050f8:	f1b9 0f00 	cmp.w	r9, #0
 80050fc:	dc34      	bgt.n	8005168 <_printf_float+0x39c>
 80050fe:	f04f 0800 	mov.w	r8, #0
 8005102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005106:	f104 0a1a 	add.w	sl, r4, #26
 800510a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	eba3 0309 	sub.w	r3, r3, r9
 8005114:	4543      	cmp	r3, r8
 8005116:	f77f af7a 	ble.w	800500e <_printf_float+0x242>
 800511a:	2301      	movs	r3, #1
 800511c:	4652      	mov	r2, sl
 800511e:	4631      	mov	r1, r6
 8005120:	4628      	mov	r0, r5
 8005122:	47b8      	blx	r7
 8005124:	3001      	adds	r0, #1
 8005126:	f43f aeac 	beq.w	8004e82 <_printf_float+0xb6>
 800512a:	f108 0801 	add.w	r8, r8, #1
 800512e:	e7ec      	b.n	800510a <_printf_float+0x33e>
 8005130:	4613      	mov	r3, r2
 8005132:	4631      	mov	r1, r6
 8005134:	4642      	mov	r2, r8
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	d1c0      	bne.n	80050c0 <_printf_float+0x2f4>
 800513e:	e6a0      	b.n	8004e82 <_printf_float+0xb6>
 8005140:	2301      	movs	r3, #1
 8005142:	4631      	mov	r1, r6
 8005144:	4628      	mov	r0, r5
 8005146:	920b      	str	r2, [sp, #44]	; 0x2c
 8005148:	47b8      	blx	r7
 800514a:	3001      	adds	r0, #1
 800514c:	f43f ae99 	beq.w	8004e82 <_printf_float+0xb6>
 8005150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005152:	f10b 0b01 	add.w	fp, fp, #1
 8005156:	e7b9      	b.n	80050cc <_printf_float+0x300>
 8005158:	4631      	mov	r1, r6
 800515a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	d1bf      	bne.n	80050e6 <_printf_float+0x31a>
 8005166:	e68c      	b.n	8004e82 <_printf_float+0xb6>
 8005168:	464b      	mov	r3, r9
 800516a:	4631      	mov	r1, r6
 800516c:	4628      	mov	r0, r5
 800516e:	eb08 020a 	add.w	r2, r8, sl
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	d1c2      	bne.n	80050fe <_printf_float+0x332>
 8005178:	e683      	b.n	8004e82 <_printf_float+0xb6>
 800517a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800517c:	2a01      	cmp	r2, #1
 800517e:	dc01      	bgt.n	8005184 <_printf_float+0x3b8>
 8005180:	07db      	lsls	r3, r3, #31
 8005182:	d537      	bpl.n	80051f4 <_printf_float+0x428>
 8005184:	2301      	movs	r3, #1
 8005186:	4642      	mov	r2, r8
 8005188:	4631      	mov	r1, r6
 800518a:	4628      	mov	r0, r5
 800518c:	47b8      	blx	r7
 800518e:	3001      	adds	r0, #1
 8005190:	f43f ae77 	beq.w	8004e82 <_printf_float+0xb6>
 8005194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005198:	4631      	mov	r1, r6
 800519a:	4628      	mov	r0, r5
 800519c:	47b8      	blx	r7
 800519e:	3001      	adds	r0, #1
 80051a0:	f43f ae6f 	beq.w	8004e82 <_printf_float+0xb6>
 80051a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051a8:	2200      	movs	r2, #0
 80051aa:	2300      	movs	r3, #0
 80051ac:	f7fb fc68 	bl	8000a80 <__aeabi_dcmpeq>
 80051b0:	b9d8      	cbnz	r0, 80051ea <_printf_float+0x41e>
 80051b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051b4:	f108 0201 	add.w	r2, r8, #1
 80051b8:	3b01      	subs	r3, #1
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	d10e      	bne.n	80051e2 <_printf_float+0x416>
 80051c4:	e65d      	b.n	8004e82 <_printf_float+0xb6>
 80051c6:	2301      	movs	r3, #1
 80051c8:	464a      	mov	r2, r9
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	f43f ae56 	beq.w	8004e82 <_printf_float+0xb6>
 80051d6:	f108 0801 	add.w	r8, r8, #1
 80051da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051dc:	3b01      	subs	r3, #1
 80051de:	4543      	cmp	r3, r8
 80051e0:	dcf1      	bgt.n	80051c6 <_printf_float+0x3fa>
 80051e2:	4653      	mov	r3, sl
 80051e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051e8:	e6e0      	b.n	8004fac <_printf_float+0x1e0>
 80051ea:	f04f 0800 	mov.w	r8, #0
 80051ee:	f104 091a 	add.w	r9, r4, #26
 80051f2:	e7f2      	b.n	80051da <_printf_float+0x40e>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4642      	mov	r2, r8
 80051f8:	e7df      	b.n	80051ba <_printf_float+0x3ee>
 80051fa:	2301      	movs	r3, #1
 80051fc:	464a      	mov	r2, r9
 80051fe:	4631      	mov	r1, r6
 8005200:	4628      	mov	r0, r5
 8005202:	47b8      	blx	r7
 8005204:	3001      	adds	r0, #1
 8005206:	f43f ae3c 	beq.w	8004e82 <_printf_float+0xb6>
 800520a:	f108 0801 	add.w	r8, r8, #1
 800520e:	68e3      	ldr	r3, [r4, #12]
 8005210:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005212:	1a5b      	subs	r3, r3, r1
 8005214:	4543      	cmp	r3, r8
 8005216:	dcf0      	bgt.n	80051fa <_printf_float+0x42e>
 8005218:	e6fd      	b.n	8005016 <_printf_float+0x24a>
 800521a:	f04f 0800 	mov.w	r8, #0
 800521e:	f104 0919 	add.w	r9, r4, #25
 8005222:	e7f4      	b.n	800520e <_printf_float+0x442>

08005224 <_printf_common>:
 8005224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005228:	4616      	mov	r6, r2
 800522a:	4699      	mov	r9, r3
 800522c:	688a      	ldr	r2, [r1, #8]
 800522e:	690b      	ldr	r3, [r1, #16]
 8005230:	4607      	mov	r7, r0
 8005232:	4293      	cmp	r3, r2
 8005234:	bfb8      	it	lt
 8005236:	4613      	movlt	r3, r2
 8005238:	6033      	str	r3, [r6, #0]
 800523a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800523e:	460c      	mov	r4, r1
 8005240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005244:	b10a      	cbz	r2, 800524a <_printf_common+0x26>
 8005246:	3301      	adds	r3, #1
 8005248:	6033      	str	r3, [r6, #0]
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	0699      	lsls	r1, r3, #26
 800524e:	bf42      	ittt	mi
 8005250:	6833      	ldrmi	r3, [r6, #0]
 8005252:	3302      	addmi	r3, #2
 8005254:	6033      	strmi	r3, [r6, #0]
 8005256:	6825      	ldr	r5, [r4, #0]
 8005258:	f015 0506 	ands.w	r5, r5, #6
 800525c:	d106      	bne.n	800526c <_printf_common+0x48>
 800525e:	f104 0a19 	add.w	sl, r4, #25
 8005262:	68e3      	ldr	r3, [r4, #12]
 8005264:	6832      	ldr	r2, [r6, #0]
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	42ab      	cmp	r3, r5
 800526a:	dc28      	bgt.n	80052be <_printf_common+0x9a>
 800526c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005270:	1e13      	subs	r3, r2, #0
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	bf18      	it	ne
 8005276:	2301      	movne	r3, #1
 8005278:	0692      	lsls	r2, r2, #26
 800527a:	d42d      	bmi.n	80052d8 <_printf_common+0xb4>
 800527c:	4649      	mov	r1, r9
 800527e:	4638      	mov	r0, r7
 8005280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005284:	47c0      	blx	r8
 8005286:	3001      	adds	r0, #1
 8005288:	d020      	beq.n	80052cc <_printf_common+0xa8>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	68e5      	ldr	r5, [r4, #12]
 800528e:	f003 0306 	and.w	r3, r3, #6
 8005292:	2b04      	cmp	r3, #4
 8005294:	bf18      	it	ne
 8005296:	2500      	movne	r5, #0
 8005298:	6832      	ldr	r2, [r6, #0]
 800529a:	f04f 0600 	mov.w	r6, #0
 800529e:	68a3      	ldr	r3, [r4, #8]
 80052a0:	bf08      	it	eq
 80052a2:	1aad      	subeq	r5, r5, r2
 80052a4:	6922      	ldr	r2, [r4, #16]
 80052a6:	bf08      	it	eq
 80052a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052ac:	4293      	cmp	r3, r2
 80052ae:	bfc4      	itt	gt
 80052b0:	1a9b      	subgt	r3, r3, r2
 80052b2:	18ed      	addgt	r5, r5, r3
 80052b4:	341a      	adds	r4, #26
 80052b6:	42b5      	cmp	r5, r6
 80052b8:	d11a      	bne.n	80052f0 <_printf_common+0xcc>
 80052ba:	2000      	movs	r0, #0
 80052bc:	e008      	b.n	80052d0 <_printf_common+0xac>
 80052be:	2301      	movs	r3, #1
 80052c0:	4652      	mov	r2, sl
 80052c2:	4649      	mov	r1, r9
 80052c4:	4638      	mov	r0, r7
 80052c6:	47c0      	blx	r8
 80052c8:	3001      	adds	r0, #1
 80052ca:	d103      	bne.n	80052d4 <_printf_common+0xb0>
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	3501      	adds	r5, #1
 80052d6:	e7c4      	b.n	8005262 <_printf_common+0x3e>
 80052d8:	2030      	movs	r0, #48	; 0x30
 80052da:	18e1      	adds	r1, r4, r3
 80052dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052e6:	4422      	add	r2, r4
 80052e8:	3302      	adds	r3, #2
 80052ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ee:	e7c5      	b.n	800527c <_printf_common+0x58>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4622      	mov	r2, r4
 80052f4:	4649      	mov	r1, r9
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c0      	blx	r8
 80052fa:	3001      	adds	r0, #1
 80052fc:	d0e6      	beq.n	80052cc <_printf_common+0xa8>
 80052fe:	3601      	adds	r6, #1
 8005300:	e7d9      	b.n	80052b6 <_printf_common+0x92>
	...

08005304 <_printf_i>:
 8005304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	7e0f      	ldrb	r7, [r1, #24]
 800530a:	4691      	mov	r9, r2
 800530c:	2f78      	cmp	r7, #120	; 0x78
 800530e:	4680      	mov	r8, r0
 8005310:	460c      	mov	r4, r1
 8005312:	469a      	mov	sl, r3
 8005314:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800531a:	d807      	bhi.n	800532c <_printf_i+0x28>
 800531c:	2f62      	cmp	r7, #98	; 0x62
 800531e:	d80a      	bhi.n	8005336 <_printf_i+0x32>
 8005320:	2f00      	cmp	r7, #0
 8005322:	f000 80d9 	beq.w	80054d8 <_printf_i+0x1d4>
 8005326:	2f58      	cmp	r7, #88	; 0x58
 8005328:	f000 80a4 	beq.w	8005474 <_printf_i+0x170>
 800532c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005334:	e03a      	b.n	80053ac <_printf_i+0xa8>
 8005336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800533a:	2b15      	cmp	r3, #21
 800533c:	d8f6      	bhi.n	800532c <_printf_i+0x28>
 800533e:	a101      	add	r1, pc, #4	; (adr r1, 8005344 <_printf_i+0x40>)
 8005340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005344:	0800539d 	.word	0x0800539d
 8005348:	080053b1 	.word	0x080053b1
 800534c:	0800532d 	.word	0x0800532d
 8005350:	0800532d 	.word	0x0800532d
 8005354:	0800532d 	.word	0x0800532d
 8005358:	0800532d 	.word	0x0800532d
 800535c:	080053b1 	.word	0x080053b1
 8005360:	0800532d 	.word	0x0800532d
 8005364:	0800532d 	.word	0x0800532d
 8005368:	0800532d 	.word	0x0800532d
 800536c:	0800532d 	.word	0x0800532d
 8005370:	080054bf 	.word	0x080054bf
 8005374:	080053e1 	.word	0x080053e1
 8005378:	080054a1 	.word	0x080054a1
 800537c:	0800532d 	.word	0x0800532d
 8005380:	0800532d 	.word	0x0800532d
 8005384:	080054e1 	.word	0x080054e1
 8005388:	0800532d 	.word	0x0800532d
 800538c:	080053e1 	.word	0x080053e1
 8005390:	0800532d 	.word	0x0800532d
 8005394:	0800532d 	.word	0x0800532d
 8005398:	080054a9 	.word	0x080054a9
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	1d1a      	adds	r2, r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	602a      	str	r2, [r5, #0]
 80053a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0a4      	b.n	80054fa <_printf_i+0x1f6>
 80053b0:	6820      	ldr	r0, [r4, #0]
 80053b2:	6829      	ldr	r1, [r5, #0]
 80053b4:	0606      	lsls	r6, r0, #24
 80053b6:	f101 0304 	add.w	r3, r1, #4
 80053ba:	d50a      	bpl.n	80053d2 <_printf_i+0xce>
 80053bc:	680e      	ldr	r6, [r1, #0]
 80053be:	602b      	str	r3, [r5, #0]
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	da03      	bge.n	80053cc <_printf_i+0xc8>
 80053c4:	232d      	movs	r3, #45	; 0x2d
 80053c6:	4276      	negs	r6, r6
 80053c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053cc:	230a      	movs	r3, #10
 80053ce:	485e      	ldr	r0, [pc, #376]	; (8005548 <_printf_i+0x244>)
 80053d0:	e019      	b.n	8005406 <_printf_i+0x102>
 80053d2:	680e      	ldr	r6, [r1, #0]
 80053d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053d8:	602b      	str	r3, [r5, #0]
 80053da:	bf18      	it	ne
 80053dc:	b236      	sxthne	r6, r6
 80053de:	e7ef      	b.n	80053c0 <_printf_i+0xbc>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	6820      	ldr	r0, [r4, #0]
 80053e4:	1d19      	adds	r1, r3, #4
 80053e6:	6029      	str	r1, [r5, #0]
 80053e8:	0601      	lsls	r1, r0, #24
 80053ea:	d501      	bpl.n	80053f0 <_printf_i+0xec>
 80053ec:	681e      	ldr	r6, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <_printf_i+0xf2>
 80053f0:	0646      	lsls	r6, r0, #25
 80053f2:	d5fb      	bpl.n	80053ec <_printf_i+0xe8>
 80053f4:	881e      	ldrh	r6, [r3, #0]
 80053f6:	2f6f      	cmp	r7, #111	; 0x6f
 80053f8:	bf0c      	ite	eq
 80053fa:	2308      	moveq	r3, #8
 80053fc:	230a      	movne	r3, #10
 80053fe:	4852      	ldr	r0, [pc, #328]	; (8005548 <_printf_i+0x244>)
 8005400:	2100      	movs	r1, #0
 8005402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005406:	6865      	ldr	r5, [r4, #4]
 8005408:	2d00      	cmp	r5, #0
 800540a:	bfa8      	it	ge
 800540c:	6821      	ldrge	r1, [r4, #0]
 800540e:	60a5      	str	r5, [r4, #8]
 8005410:	bfa4      	itt	ge
 8005412:	f021 0104 	bicge.w	r1, r1, #4
 8005416:	6021      	strge	r1, [r4, #0]
 8005418:	b90e      	cbnz	r6, 800541e <_printf_i+0x11a>
 800541a:	2d00      	cmp	r5, #0
 800541c:	d04d      	beq.n	80054ba <_printf_i+0x1b6>
 800541e:	4615      	mov	r5, r2
 8005420:	fbb6 f1f3 	udiv	r1, r6, r3
 8005424:	fb03 6711 	mls	r7, r3, r1, r6
 8005428:	5dc7      	ldrb	r7, [r0, r7]
 800542a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800542e:	4637      	mov	r7, r6
 8005430:	42bb      	cmp	r3, r7
 8005432:	460e      	mov	r6, r1
 8005434:	d9f4      	bls.n	8005420 <_printf_i+0x11c>
 8005436:	2b08      	cmp	r3, #8
 8005438:	d10b      	bne.n	8005452 <_printf_i+0x14e>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	07de      	lsls	r6, r3, #31
 800543e:	d508      	bpl.n	8005452 <_printf_i+0x14e>
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	6861      	ldr	r1, [r4, #4]
 8005444:	4299      	cmp	r1, r3
 8005446:	bfde      	ittt	le
 8005448:	2330      	movle	r3, #48	; 0x30
 800544a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800544e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005452:	1b52      	subs	r2, r2, r5
 8005454:	6122      	str	r2, [r4, #16]
 8005456:	464b      	mov	r3, r9
 8005458:	4621      	mov	r1, r4
 800545a:	4640      	mov	r0, r8
 800545c:	f8cd a000 	str.w	sl, [sp]
 8005460:	aa03      	add	r2, sp, #12
 8005462:	f7ff fedf 	bl	8005224 <_printf_common>
 8005466:	3001      	adds	r0, #1
 8005468:	d14c      	bne.n	8005504 <_printf_i+0x200>
 800546a:	f04f 30ff 	mov.w	r0, #4294967295
 800546e:	b004      	add	sp, #16
 8005470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005474:	4834      	ldr	r0, [pc, #208]	; (8005548 <_printf_i+0x244>)
 8005476:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800547a:	6829      	ldr	r1, [r5, #0]
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005482:	6029      	str	r1, [r5, #0]
 8005484:	061d      	lsls	r5, r3, #24
 8005486:	d514      	bpl.n	80054b2 <_printf_i+0x1ae>
 8005488:	07df      	lsls	r7, r3, #31
 800548a:	bf44      	itt	mi
 800548c:	f043 0320 	orrmi.w	r3, r3, #32
 8005490:	6023      	strmi	r3, [r4, #0]
 8005492:	b91e      	cbnz	r6, 800549c <_printf_i+0x198>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	f023 0320 	bic.w	r3, r3, #32
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	2310      	movs	r3, #16
 800549e:	e7af      	b.n	8005400 <_printf_i+0xfc>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	f043 0320 	orr.w	r3, r3, #32
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	2378      	movs	r3, #120	; 0x78
 80054aa:	4828      	ldr	r0, [pc, #160]	; (800554c <_printf_i+0x248>)
 80054ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054b0:	e7e3      	b.n	800547a <_printf_i+0x176>
 80054b2:	0659      	lsls	r1, r3, #25
 80054b4:	bf48      	it	mi
 80054b6:	b2b6      	uxthmi	r6, r6
 80054b8:	e7e6      	b.n	8005488 <_printf_i+0x184>
 80054ba:	4615      	mov	r5, r2
 80054bc:	e7bb      	b.n	8005436 <_printf_i+0x132>
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	6826      	ldr	r6, [r4, #0]
 80054c2:	1d18      	adds	r0, r3, #4
 80054c4:	6961      	ldr	r1, [r4, #20]
 80054c6:	6028      	str	r0, [r5, #0]
 80054c8:	0635      	lsls	r5, r6, #24
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	d501      	bpl.n	80054d2 <_printf_i+0x1ce>
 80054ce:	6019      	str	r1, [r3, #0]
 80054d0:	e002      	b.n	80054d8 <_printf_i+0x1d4>
 80054d2:	0670      	lsls	r0, r6, #25
 80054d4:	d5fb      	bpl.n	80054ce <_printf_i+0x1ca>
 80054d6:	8019      	strh	r1, [r3, #0]
 80054d8:	2300      	movs	r3, #0
 80054da:	4615      	mov	r5, r2
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	e7ba      	b.n	8005456 <_printf_i+0x152>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	2100      	movs	r1, #0
 80054e4:	1d1a      	adds	r2, r3, #4
 80054e6:	602a      	str	r2, [r5, #0]
 80054e8:	681d      	ldr	r5, [r3, #0]
 80054ea:	6862      	ldr	r2, [r4, #4]
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 fed5 	bl	800629c <memchr>
 80054f2:	b108      	cbz	r0, 80054f8 <_printf_i+0x1f4>
 80054f4:	1b40      	subs	r0, r0, r5
 80054f6:	6060      	str	r0, [r4, #4]
 80054f8:	6863      	ldr	r3, [r4, #4]
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	2300      	movs	r3, #0
 80054fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005502:	e7a8      	b.n	8005456 <_printf_i+0x152>
 8005504:	462a      	mov	r2, r5
 8005506:	4649      	mov	r1, r9
 8005508:	4640      	mov	r0, r8
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	47d0      	blx	sl
 800550e:	3001      	adds	r0, #1
 8005510:	d0ab      	beq.n	800546a <_printf_i+0x166>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	079b      	lsls	r3, r3, #30
 8005516:	d413      	bmi.n	8005540 <_printf_i+0x23c>
 8005518:	68e0      	ldr	r0, [r4, #12]
 800551a:	9b03      	ldr	r3, [sp, #12]
 800551c:	4298      	cmp	r0, r3
 800551e:	bfb8      	it	lt
 8005520:	4618      	movlt	r0, r3
 8005522:	e7a4      	b.n	800546e <_printf_i+0x16a>
 8005524:	2301      	movs	r3, #1
 8005526:	4632      	mov	r2, r6
 8005528:	4649      	mov	r1, r9
 800552a:	4640      	mov	r0, r8
 800552c:	47d0      	blx	sl
 800552e:	3001      	adds	r0, #1
 8005530:	d09b      	beq.n	800546a <_printf_i+0x166>
 8005532:	3501      	adds	r5, #1
 8005534:	68e3      	ldr	r3, [r4, #12]
 8005536:	9903      	ldr	r1, [sp, #12]
 8005538:	1a5b      	subs	r3, r3, r1
 800553a:	42ab      	cmp	r3, r5
 800553c:	dcf2      	bgt.n	8005524 <_printf_i+0x220>
 800553e:	e7eb      	b.n	8005518 <_printf_i+0x214>
 8005540:	2500      	movs	r5, #0
 8005542:	f104 0619 	add.w	r6, r4, #25
 8005546:	e7f5      	b.n	8005534 <_printf_i+0x230>
 8005548:	080080ce 	.word	0x080080ce
 800554c:	080080df 	.word	0x080080df

08005550 <siprintf>:
 8005550:	b40e      	push	{r1, r2, r3}
 8005552:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005556:	b500      	push	{lr}
 8005558:	b09c      	sub	sp, #112	; 0x70
 800555a:	ab1d      	add	r3, sp, #116	; 0x74
 800555c:	9002      	str	r0, [sp, #8]
 800555e:	9006      	str	r0, [sp, #24]
 8005560:	9107      	str	r1, [sp, #28]
 8005562:	9104      	str	r1, [sp, #16]
 8005564:	4808      	ldr	r0, [pc, #32]	; (8005588 <siprintf+0x38>)
 8005566:	4909      	ldr	r1, [pc, #36]	; (800558c <siprintf+0x3c>)
 8005568:	f853 2b04 	ldr.w	r2, [r3], #4
 800556c:	9105      	str	r1, [sp, #20]
 800556e:	6800      	ldr	r0, [r0, #0]
 8005570:	a902      	add	r1, sp, #8
 8005572:	9301      	str	r3, [sp, #4]
 8005574:	f001 fb7c 	bl	8006c70 <_svfiprintf_r>
 8005578:	2200      	movs	r2, #0
 800557a:	9b02      	ldr	r3, [sp, #8]
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	b01c      	add	sp, #112	; 0x70
 8005580:	f85d eb04 	ldr.w	lr, [sp], #4
 8005584:	b003      	add	sp, #12
 8005586:	4770      	bx	lr
 8005588:	20000010 	.word	0x20000010
 800558c:	ffff0208 	.word	0xffff0208

08005590 <quorem>:
 8005590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005594:	6903      	ldr	r3, [r0, #16]
 8005596:	690c      	ldr	r4, [r1, #16]
 8005598:	4607      	mov	r7, r0
 800559a:	42a3      	cmp	r3, r4
 800559c:	f2c0 8082 	blt.w	80056a4 <quorem+0x114>
 80055a0:	3c01      	subs	r4, #1
 80055a2:	f100 0514 	add.w	r5, r0, #20
 80055a6:	f101 0814 	add.w	r8, r1, #20
 80055aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055b8:	3301      	adds	r3, #1
 80055ba:	429a      	cmp	r2, r3
 80055bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80055c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055c8:	d331      	bcc.n	800562e <quorem+0x9e>
 80055ca:	f04f 0e00 	mov.w	lr, #0
 80055ce:	4640      	mov	r0, r8
 80055d0:	46ac      	mov	ip, r5
 80055d2:	46f2      	mov	sl, lr
 80055d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80055d8:	b293      	uxth	r3, r2
 80055da:	fb06 e303 	mla	r3, r6, r3, lr
 80055de:	0c12      	lsrs	r2, r2, #16
 80055e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	fb06 e202 	mla	r2, r6, r2, lr
 80055ea:	ebaa 0303 	sub.w	r3, sl, r3
 80055ee:	f8dc a000 	ldr.w	sl, [ip]
 80055f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055f6:	fa1f fa8a 	uxth.w	sl, sl
 80055fa:	4453      	add	r3, sl
 80055fc:	f8dc a000 	ldr.w	sl, [ip]
 8005600:	b292      	uxth	r2, r2
 8005602:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005606:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800560a:	b29b      	uxth	r3, r3
 800560c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005610:	4581      	cmp	r9, r0
 8005612:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005616:	f84c 3b04 	str.w	r3, [ip], #4
 800561a:	d2db      	bcs.n	80055d4 <quorem+0x44>
 800561c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005620:	b92b      	cbnz	r3, 800562e <quorem+0x9e>
 8005622:	9b01      	ldr	r3, [sp, #4]
 8005624:	3b04      	subs	r3, #4
 8005626:	429d      	cmp	r5, r3
 8005628:	461a      	mov	r2, r3
 800562a:	d32f      	bcc.n	800568c <quorem+0xfc>
 800562c:	613c      	str	r4, [r7, #16]
 800562e:	4638      	mov	r0, r7
 8005630:	f001 f8ce 	bl	80067d0 <__mcmp>
 8005634:	2800      	cmp	r0, #0
 8005636:	db25      	blt.n	8005684 <quorem+0xf4>
 8005638:	4628      	mov	r0, r5
 800563a:	f04f 0c00 	mov.w	ip, #0
 800563e:	3601      	adds	r6, #1
 8005640:	f858 1b04 	ldr.w	r1, [r8], #4
 8005644:	f8d0 e000 	ldr.w	lr, [r0]
 8005648:	b28b      	uxth	r3, r1
 800564a:	ebac 0303 	sub.w	r3, ip, r3
 800564e:	fa1f f28e 	uxth.w	r2, lr
 8005652:	4413      	add	r3, r2
 8005654:	0c0a      	lsrs	r2, r1, #16
 8005656:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800565a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005664:	45c1      	cmp	r9, r8
 8005666:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800566a:	f840 3b04 	str.w	r3, [r0], #4
 800566e:	d2e7      	bcs.n	8005640 <quorem+0xb0>
 8005670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005674:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005678:	b922      	cbnz	r2, 8005684 <quorem+0xf4>
 800567a:	3b04      	subs	r3, #4
 800567c:	429d      	cmp	r5, r3
 800567e:	461a      	mov	r2, r3
 8005680:	d30a      	bcc.n	8005698 <quorem+0x108>
 8005682:	613c      	str	r4, [r7, #16]
 8005684:	4630      	mov	r0, r6
 8005686:	b003      	add	sp, #12
 8005688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	3b04      	subs	r3, #4
 8005690:	2a00      	cmp	r2, #0
 8005692:	d1cb      	bne.n	800562c <quorem+0x9c>
 8005694:	3c01      	subs	r4, #1
 8005696:	e7c6      	b.n	8005626 <quorem+0x96>
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	3b04      	subs	r3, #4
 800569c:	2a00      	cmp	r2, #0
 800569e:	d1f0      	bne.n	8005682 <quorem+0xf2>
 80056a0:	3c01      	subs	r4, #1
 80056a2:	e7eb      	b.n	800567c <quorem+0xec>
 80056a4:	2000      	movs	r0, #0
 80056a6:	e7ee      	b.n	8005686 <quorem+0xf6>

080056a8 <_dtoa_r>:
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	4616      	mov	r6, r2
 80056ae:	461f      	mov	r7, r3
 80056b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80056b2:	b099      	sub	sp, #100	; 0x64
 80056b4:	4605      	mov	r5, r0
 80056b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80056ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80056be:	b974      	cbnz	r4, 80056de <_dtoa_r+0x36>
 80056c0:	2010      	movs	r0, #16
 80056c2:	f000 fde3 	bl	800628c <malloc>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6268      	str	r0, [r5, #36]	; 0x24
 80056ca:	b920      	cbnz	r0, 80056d6 <_dtoa_r+0x2e>
 80056cc:	21ea      	movs	r1, #234	; 0xea
 80056ce:	4ba8      	ldr	r3, [pc, #672]	; (8005970 <_dtoa_r+0x2c8>)
 80056d0:	48a8      	ldr	r0, [pc, #672]	; (8005974 <_dtoa_r+0x2cc>)
 80056d2:	f001 fbdd 	bl	8006e90 <__assert_func>
 80056d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056da:	6004      	str	r4, [r0, #0]
 80056dc:	60c4      	str	r4, [r0, #12]
 80056de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056e0:	6819      	ldr	r1, [r3, #0]
 80056e2:	b151      	cbz	r1, 80056fa <_dtoa_r+0x52>
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	2301      	movs	r3, #1
 80056e8:	4093      	lsls	r3, r2
 80056ea:	604a      	str	r2, [r1, #4]
 80056ec:	608b      	str	r3, [r1, #8]
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 fe30 	bl	8006354 <_Bfree>
 80056f4:	2200      	movs	r2, #0
 80056f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	1e3b      	subs	r3, r7, #0
 80056fc:	bfaf      	iteee	ge
 80056fe:	2300      	movge	r3, #0
 8005700:	2201      	movlt	r2, #1
 8005702:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005706:	9305      	strlt	r3, [sp, #20]
 8005708:	bfa8      	it	ge
 800570a:	f8c8 3000 	strge.w	r3, [r8]
 800570e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005712:	4b99      	ldr	r3, [pc, #612]	; (8005978 <_dtoa_r+0x2d0>)
 8005714:	bfb8      	it	lt
 8005716:	f8c8 2000 	strlt.w	r2, [r8]
 800571a:	ea33 0309 	bics.w	r3, r3, r9
 800571e:	d119      	bne.n	8005754 <_dtoa_r+0xac>
 8005720:	f242 730f 	movw	r3, #9999	; 0x270f
 8005724:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800572c:	4333      	orrs	r3, r6
 800572e:	f000 857f 	beq.w	8006230 <_dtoa_r+0xb88>
 8005732:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005734:	b953      	cbnz	r3, 800574c <_dtoa_r+0xa4>
 8005736:	4b91      	ldr	r3, [pc, #580]	; (800597c <_dtoa_r+0x2d4>)
 8005738:	e022      	b.n	8005780 <_dtoa_r+0xd8>
 800573a:	4b91      	ldr	r3, [pc, #580]	; (8005980 <_dtoa_r+0x2d8>)
 800573c:	9303      	str	r3, [sp, #12]
 800573e:	3308      	adds	r3, #8
 8005740:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	9803      	ldr	r0, [sp, #12]
 8005746:	b019      	add	sp, #100	; 0x64
 8005748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800574c:	4b8b      	ldr	r3, [pc, #556]	; (800597c <_dtoa_r+0x2d4>)
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	3303      	adds	r3, #3
 8005752:	e7f5      	b.n	8005740 <_dtoa_r+0x98>
 8005754:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005758:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800575c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005760:	2200      	movs	r2, #0
 8005762:	2300      	movs	r3, #0
 8005764:	f7fb f98c 	bl	8000a80 <__aeabi_dcmpeq>
 8005768:	4680      	mov	r8, r0
 800576a:	b158      	cbz	r0, 8005784 <_dtoa_r+0xdc>
 800576c:	2301      	movs	r3, #1
 800576e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8558 	beq.w	800622a <_dtoa_r+0xb82>
 800577a:	4882      	ldr	r0, [pc, #520]	; (8005984 <_dtoa_r+0x2dc>)
 800577c:	6018      	str	r0, [r3, #0]
 800577e:	1e43      	subs	r3, r0, #1
 8005780:	9303      	str	r3, [sp, #12]
 8005782:	e7df      	b.n	8005744 <_dtoa_r+0x9c>
 8005784:	ab16      	add	r3, sp, #88	; 0x58
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	ab17      	add	r3, sp, #92	; 0x5c
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	4628      	mov	r0, r5
 800578e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005792:	f001 f8c5 	bl	8006920 <__d2b>
 8005796:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800579a:	4683      	mov	fp, r0
 800579c:	2c00      	cmp	r4, #0
 800579e:	d07f      	beq.n	80058a0 <_dtoa_r+0x1f8>
 80057a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80057aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80057b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80057b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80057ba:	2200      	movs	r2, #0
 80057bc:	4b72      	ldr	r3, [pc, #456]	; (8005988 <_dtoa_r+0x2e0>)
 80057be:	f7fa fd3f 	bl	8000240 <__aeabi_dsub>
 80057c2:	a365      	add	r3, pc, #404	; (adr r3, 8005958 <_dtoa_r+0x2b0>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f7fa fef2 	bl	80005b0 <__aeabi_dmul>
 80057cc:	a364      	add	r3, pc, #400	; (adr r3, 8005960 <_dtoa_r+0x2b8>)
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	f7fa fd37 	bl	8000244 <__adddf3>
 80057d6:	4606      	mov	r6, r0
 80057d8:	4620      	mov	r0, r4
 80057da:	460f      	mov	r7, r1
 80057dc:	f7fa fe7e 	bl	80004dc <__aeabi_i2d>
 80057e0:	a361      	add	r3, pc, #388	; (adr r3, 8005968 <_dtoa_r+0x2c0>)
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f7fa fee3 	bl	80005b0 <__aeabi_dmul>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4630      	mov	r0, r6
 80057f0:	4639      	mov	r1, r7
 80057f2:	f7fa fd27 	bl	8000244 <__adddf3>
 80057f6:	4606      	mov	r6, r0
 80057f8:	460f      	mov	r7, r1
 80057fa:	f7fb f989 	bl	8000b10 <__aeabi_d2iz>
 80057fe:	2200      	movs	r2, #0
 8005800:	4682      	mov	sl, r0
 8005802:	2300      	movs	r3, #0
 8005804:	4630      	mov	r0, r6
 8005806:	4639      	mov	r1, r7
 8005808:	f7fb f944 	bl	8000a94 <__aeabi_dcmplt>
 800580c:	b148      	cbz	r0, 8005822 <_dtoa_r+0x17a>
 800580e:	4650      	mov	r0, sl
 8005810:	f7fa fe64 	bl	80004dc <__aeabi_i2d>
 8005814:	4632      	mov	r2, r6
 8005816:	463b      	mov	r3, r7
 8005818:	f7fb f932 	bl	8000a80 <__aeabi_dcmpeq>
 800581c:	b908      	cbnz	r0, 8005822 <_dtoa_r+0x17a>
 800581e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005822:	f1ba 0f16 	cmp.w	sl, #22
 8005826:	d858      	bhi.n	80058da <_dtoa_r+0x232>
 8005828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800582c:	4b57      	ldr	r3, [pc, #348]	; (800598c <_dtoa_r+0x2e4>)
 800582e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	f7fb f92d 	bl	8000a94 <__aeabi_dcmplt>
 800583a:	2800      	cmp	r0, #0
 800583c:	d04f      	beq.n	80058de <_dtoa_r+0x236>
 800583e:	2300      	movs	r3, #0
 8005840:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005844:	930f      	str	r3, [sp, #60]	; 0x3c
 8005846:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005848:	1b1c      	subs	r4, r3, r4
 800584a:	1e63      	subs	r3, r4, #1
 800584c:	9309      	str	r3, [sp, #36]	; 0x24
 800584e:	bf49      	itett	mi
 8005850:	f1c4 0301 	rsbmi	r3, r4, #1
 8005854:	2300      	movpl	r3, #0
 8005856:	9306      	strmi	r3, [sp, #24]
 8005858:	2300      	movmi	r3, #0
 800585a:	bf54      	ite	pl
 800585c:	9306      	strpl	r3, [sp, #24]
 800585e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005860:	f1ba 0f00 	cmp.w	sl, #0
 8005864:	db3d      	blt.n	80058e2 <_dtoa_r+0x23a>
 8005866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005868:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800586c:	4453      	add	r3, sl
 800586e:	9309      	str	r3, [sp, #36]	; 0x24
 8005870:	2300      	movs	r3, #0
 8005872:	930a      	str	r3, [sp, #40]	; 0x28
 8005874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005876:	2b09      	cmp	r3, #9
 8005878:	f200 808c 	bhi.w	8005994 <_dtoa_r+0x2ec>
 800587c:	2b05      	cmp	r3, #5
 800587e:	bfc4      	itt	gt
 8005880:	3b04      	subgt	r3, #4
 8005882:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005884:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005886:	bfc8      	it	gt
 8005888:	2400      	movgt	r4, #0
 800588a:	f1a3 0302 	sub.w	r3, r3, #2
 800588e:	bfd8      	it	le
 8005890:	2401      	movle	r4, #1
 8005892:	2b03      	cmp	r3, #3
 8005894:	f200 808a 	bhi.w	80059ac <_dtoa_r+0x304>
 8005898:	e8df f003 	tbb	[pc, r3]
 800589c:	5b4d4f2d 	.word	0x5b4d4f2d
 80058a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80058a4:	441c      	add	r4, r3
 80058a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	bfc3      	ittte	gt
 80058ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058b2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80058b6:	fa09 f303 	lslgt.w	r3, r9, r3
 80058ba:	f1c3 0320 	rsble	r3, r3, #32
 80058be:	bfc6      	itte	gt
 80058c0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80058c4:	4318      	orrgt	r0, r3
 80058c6:	fa06 f003 	lslle.w	r0, r6, r3
 80058ca:	f7fa fdf7 	bl	80004bc <__aeabi_ui2d>
 80058ce:	2301      	movs	r3, #1
 80058d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80058d4:	3c01      	subs	r4, #1
 80058d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80058d8:	e76f      	b.n	80057ba <_dtoa_r+0x112>
 80058da:	2301      	movs	r3, #1
 80058dc:	e7b2      	b.n	8005844 <_dtoa_r+0x19c>
 80058de:	900f      	str	r0, [sp, #60]	; 0x3c
 80058e0:	e7b1      	b.n	8005846 <_dtoa_r+0x19e>
 80058e2:	9b06      	ldr	r3, [sp, #24]
 80058e4:	eba3 030a 	sub.w	r3, r3, sl
 80058e8:	9306      	str	r3, [sp, #24]
 80058ea:	f1ca 0300 	rsb	r3, sl, #0
 80058ee:	930a      	str	r3, [sp, #40]	; 0x28
 80058f0:	2300      	movs	r3, #0
 80058f2:	930e      	str	r3, [sp, #56]	; 0x38
 80058f4:	e7be      	b.n	8005874 <_dtoa_r+0x1cc>
 80058f6:	2300      	movs	r3, #0
 80058f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80058fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dc58      	bgt.n	80059b2 <_dtoa_r+0x30a>
 8005900:	f04f 0901 	mov.w	r9, #1
 8005904:	464b      	mov	r3, r9
 8005906:	f8cd 9020 	str.w	r9, [sp, #32]
 800590a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800590e:	2200      	movs	r2, #0
 8005910:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005912:	6042      	str	r2, [r0, #4]
 8005914:	2204      	movs	r2, #4
 8005916:	f102 0614 	add.w	r6, r2, #20
 800591a:	429e      	cmp	r6, r3
 800591c:	6841      	ldr	r1, [r0, #4]
 800591e:	d94e      	bls.n	80059be <_dtoa_r+0x316>
 8005920:	4628      	mov	r0, r5
 8005922:	f000 fcd7 	bl	80062d4 <_Balloc>
 8005926:	9003      	str	r0, [sp, #12]
 8005928:	2800      	cmp	r0, #0
 800592a:	d14c      	bne.n	80059c6 <_dtoa_r+0x31e>
 800592c:	4602      	mov	r2, r0
 800592e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005932:	4b17      	ldr	r3, [pc, #92]	; (8005990 <_dtoa_r+0x2e8>)
 8005934:	e6cc      	b.n	80056d0 <_dtoa_r+0x28>
 8005936:	2301      	movs	r3, #1
 8005938:	e7de      	b.n	80058f8 <_dtoa_r+0x250>
 800593a:	2300      	movs	r3, #0
 800593c:	930b      	str	r3, [sp, #44]	; 0x2c
 800593e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005940:	eb0a 0903 	add.w	r9, sl, r3
 8005944:	f109 0301 	add.w	r3, r9, #1
 8005948:	2b01      	cmp	r3, #1
 800594a:	9308      	str	r3, [sp, #32]
 800594c:	bfb8      	it	lt
 800594e:	2301      	movlt	r3, #1
 8005950:	e7dd      	b.n	800590e <_dtoa_r+0x266>
 8005952:	2301      	movs	r3, #1
 8005954:	e7f2      	b.n	800593c <_dtoa_r+0x294>
 8005956:	bf00      	nop
 8005958:	636f4361 	.word	0x636f4361
 800595c:	3fd287a7 	.word	0x3fd287a7
 8005960:	8b60c8b3 	.word	0x8b60c8b3
 8005964:	3fc68a28 	.word	0x3fc68a28
 8005968:	509f79fb 	.word	0x509f79fb
 800596c:	3fd34413 	.word	0x3fd34413
 8005970:	080080fd 	.word	0x080080fd
 8005974:	08008114 	.word	0x08008114
 8005978:	7ff00000 	.word	0x7ff00000
 800597c:	080080f9 	.word	0x080080f9
 8005980:	080080f0 	.word	0x080080f0
 8005984:	080080cd 	.word	0x080080cd
 8005988:	3ff80000 	.word	0x3ff80000
 800598c:	08008208 	.word	0x08008208
 8005990:	0800816f 	.word	0x0800816f
 8005994:	2401      	movs	r4, #1
 8005996:	2300      	movs	r3, #0
 8005998:	940b      	str	r4, [sp, #44]	; 0x2c
 800599a:	9322      	str	r3, [sp, #136]	; 0x88
 800599c:	f04f 39ff 	mov.w	r9, #4294967295
 80059a0:	2200      	movs	r2, #0
 80059a2:	2312      	movs	r3, #18
 80059a4:	f8cd 9020 	str.w	r9, [sp, #32]
 80059a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80059aa:	e7b0      	b.n	800590e <_dtoa_r+0x266>
 80059ac:	2301      	movs	r3, #1
 80059ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80059b0:	e7f4      	b.n	800599c <_dtoa_r+0x2f4>
 80059b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80059b6:	464b      	mov	r3, r9
 80059b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80059bc:	e7a7      	b.n	800590e <_dtoa_r+0x266>
 80059be:	3101      	adds	r1, #1
 80059c0:	6041      	str	r1, [r0, #4]
 80059c2:	0052      	lsls	r2, r2, #1
 80059c4:	e7a7      	b.n	8005916 <_dtoa_r+0x26e>
 80059c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059c8:	9a03      	ldr	r2, [sp, #12]
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	9b08      	ldr	r3, [sp, #32]
 80059ce:	2b0e      	cmp	r3, #14
 80059d0:	f200 80a8 	bhi.w	8005b24 <_dtoa_r+0x47c>
 80059d4:	2c00      	cmp	r4, #0
 80059d6:	f000 80a5 	beq.w	8005b24 <_dtoa_r+0x47c>
 80059da:	f1ba 0f00 	cmp.w	sl, #0
 80059de:	dd34      	ble.n	8005a4a <_dtoa_r+0x3a2>
 80059e0:	4a9a      	ldr	r2, [pc, #616]	; (8005c4c <_dtoa_r+0x5a4>)
 80059e2:	f00a 030f 	and.w	r3, sl, #15
 80059e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059ea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80059ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80059f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80059fa:	d016      	beq.n	8005a2a <_dtoa_r+0x382>
 80059fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a00:	4b93      	ldr	r3, [pc, #588]	; (8005c50 <_dtoa_r+0x5a8>)
 8005a02:	2703      	movs	r7, #3
 8005a04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a08:	f7fa fefc 	bl	8000804 <__aeabi_ddiv>
 8005a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a10:	f004 040f 	and.w	r4, r4, #15
 8005a14:	4e8e      	ldr	r6, [pc, #568]	; (8005c50 <_dtoa_r+0x5a8>)
 8005a16:	b954      	cbnz	r4, 8005a2e <_dtoa_r+0x386>
 8005a18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a20:	f7fa fef0 	bl	8000804 <__aeabi_ddiv>
 8005a24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a28:	e029      	b.n	8005a7e <_dtoa_r+0x3d6>
 8005a2a:	2702      	movs	r7, #2
 8005a2c:	e7f2      	b.n	8005a14 <_dtoa_r+0x36c>
 8005a2e:	07e1      	lsls	r1, r4, #31
 8005a30:	d508      	bpl.n	8005a44 <_dtoa_r+0x39c>
 8005a32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a3a:	f7fa fdb9 	bl	80005b0 <__aeabi_dmul>
 8005a3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a42:	3701      	adds	r7, #1
 8005a44:	1064      	asrs	r4, r4, #1
 8005a46:	3608      	adds	r6, #8
 8005a48:	e7e5      	b.n	8005a16 <_dtoa_r+0x36e>
 8005a4a:	f000 80a5 	beq.w	8005b98 <_dtoa_r+0x4f0>
 8005a4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a52:	f1ca 0400 	rsb	r4, sl, #0
 8005a56:	4b7d      	ldr	r3, [pc, #500]	; (8005c4c <_dtoa_r+0x5a4>)
 8005a58:	f004 020f 	and.w	r2, r4, #15
 8005a5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	f7fa fda4 	bl	80005b0 <__aeabi_dmul>
 8005a68:	2702      	movs	r7, #2
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a70:	4e77      	ldr	r6, [pc, #476]	; (8005c50 <_dtoa_r+0x5a8>)
 8005a72:	1124      	asrs	r4, r4, #4
 8005a74:	2c00      	cmp	r4, #0
 8005a76:	f040 8084 	bne.w	8005b82 <_dtoa_r+0x4da>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1d2      	bne.n	8005a24 <_dtoa_r+0x37c>
 8005a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 808b 	beq.w	8005b9c <_dtoa_r+0x4f4>
 8005a86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a92:	2200      	movs	r2, #0
 8005a94:	4b6f      	ldr	r3, [pc, #444]	; (8005c54 <_dtoa_r+0x5ac>)
 8005a96:	f7fa fffd 	bl	8000a94 <__aeabi_dcmplt>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d07e      	beq.n	8005b9c <_dtoa_r+0x4f4>
 8005a9e:	9b08      	ldr	r3, [sp, #32]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d07b      	beq.n	8005b9c <_dtoa_r+0x4f4>
 8005aa4:	f1b9 0f00 	cmp.w	r9, #0
 8005aa8:	dd38      	ble.n	8005b1c <_dtoa_r+0x474>
 8005aaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4b69      	ldr	r3, [pc, #420]	; (8005c58 <_dtoa_r+0x5b0>)
 8005ab2:	f7fa fd7d 	bl	80005b0 <__aeabi_dmul>
 8005ab6:	464c      	mov	r4, r9
 8005ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005abc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005ac0:	3701      	adds	r7, #1
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	f7fa fd0a 	bl	80004dc <__aeabi_i2d>
 8005ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005acc:	f7fa fd70 	bl	80005b0 <__aeabi_dmul>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4b62      	ldr	r3, [pc, #392]	; (8005c5c <_dtoa_r+0x5b4>)
 8005ad4:	f7fa fbb6 	bl	8000244 <__adddf3>
 8005ad8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005adc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ae0:	9611      	str	r6, [sp, #68]	; 0x44
 8005ae2:	2c00      	cmp	r4, #0
 8005ae4:	d15d      	bne.n	8005ba2 <_dtoa_r+0x4fa>
 8005ae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aea:	2200      	movs	r2, #0
 8005aec:	4b5c      	ldr	r3, [pc, #368]	; (8005c60 <_dtoa_r+0x5b8>)
 8005aee:	f7fa fba7 	bl	8000240 <__aeabi_dsub>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005afa:	4633      	mov	r3, r6
 8005afc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005afe:	f7fa ffe7 	bl	8000ad0 <__aeabi_dcmpgt>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	f040 829c 	bne.w	8006040 <_dtoa_r+0x998>
 8005b08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005b12:	f7fa ffbf 	bl	8000a94 <__aeabi_dcmplt>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	f040 8290 	bne.w	800603c <_dtoa_r+0x994>
 8005b1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005b20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f2c0 8152 	blt.w	8005dd0 <_dtoa_r+0x728>
 8005b2c:	f1ba 0f0e 	cmp.w	sl, #14
 8005b30:	f300 814e 	bgt.w	8005dd0 <_dtoa_r+0x728>
 8005b34:	4b45      	ldr	r3, [pc, #276]	; (8005c4c <_dtoa_r+0x5a4>)
 8005b36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005b42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f280 80db 	bge.w	8005d00 <_dtoa_r+0x658>
 8005b4a:	9b08      	ldr	r3, [sp, #32]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f300 80d7 	bgt.w	8005d00 <_dtoa_r+0x658>
 8005b52:	f040 8272 	bne.w	800603a <_dtoa_r+0x992>
 8005b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	4b40      	ldr	r3, [pc, #256]	; (8005c60 <_dtoa_r+0x5b8>)
 8005b5e:	f7fa fd27 	bl	80005b0 <__aeabi_dmul>
 8005b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b66:	f7fa ffa9 	bl	8000abc <__aeabi_dcmpge>
 8005b6a:	9c08      	ldr	r4, [sp, #32]
 8005b6c:	4626      	mov	r6, r4
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	f040 8248 	bne.w	8006004 <_dtoa_r+0x95c>
 8005b74:	2331      	movs	r3, #49	; 0x31
 8005b76:	9f03      	ldr	r7, [sp, #12]
 8005b78:	f10a 0a01 	add.w	sl, sl, #1
 8005b7c:	f807 3b01 	strb.w	r3, [r7], #1
 8005b80:	e244      	b.n	800600c <_dtoa_r+0x964>
 8005b82:	07e2      	lsls	r2, r4, #31
 8005b84:	d505      	bpl.n	8005b92 <_dtoa_r+0x4ea>
 8005b86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b8a:	f7fa fd11 	bl	80005b0 <__aeabi_dmul>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	3701      	adds	r7, #1
 8005b92:	1064      	asrs	r4, r4, #1
 8005b94:	3608      	adds	r6, #8
 8005b96:	e76d      	b.n	8005a74 <_dtoa_r+0x3cc>
 8005b98:	2702      	movs	r7, #2
 8005b9a:	e770      	b.n	8005a7e <_dtoa_r+0x3d6>
 8005b9c:	46d0      	mov	r8, sl
 8005b9e:	9c08      	ldr	r4, [sp, #32]
 8005ba0:	e78f      	b.n	8005ac2 <_dtoa_r+0x41a>
 8005ba2:	9903      	ldr	r1, [sp, #12]
 8005ba4:	4b29      	ldr	r3, [pc, #164]	; (8005c4c <_dtoa_r+0x5a4>)
 8005ba6:	4421      	add	r1, r4
 8005ba8:	9112      	str	r1, [sp, #72]	; 0x48
 8005baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005bb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	d055      	beq.n	8005c68 <_dtoa_r+0x5c0>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	4929      	ldr	r1, [pc, #164]	; (8005c64 <_dtoa_r+0x5bc>)
 8005bc0:	f7fa fe20 	bl	8000804 <__aeabi_ddiv>
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	4632      	mov	r2, r6
 8005bc8:	f7fa fb3a 	bl	8000240 <__aeabi_dsub>
 8005bcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bd0:	9f03      	ldr	r7, [sp, #12]
 8005bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bd6:	f7fa ff9b 	bl	8000b10 <__aeabi_d2iz>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	f7fa fc7e 	bl	80004dc <__aeabi_i2d>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005be8:	f7fa fb2a 	bl	8000240 <__aeabi_dsub>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	3430      	adds	r4, #48	; 0x30
 8005bf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bfa:	f807 4b01 	strb.w	r4, [r7], #1
 8005bfe:	f7fa ff49 	bl	8000a94 <__aeabi_dcmplt>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d174      	bne.n	8005cf0 <_dtoa_r+0x648>
 8005c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	4911      	ldr	r1, [pc, #68]	; (8005c54 <_dtoa_r+0x5ac>)
 8005c0e:	f7fa fb17 	bl	8000240 <__aeabi_dsub>
 8005c12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c16:	f7fa ff3d 	bl	8000a94 <__aeabi_dcmplt>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f040 80b7 	bne.w	8005d8e <_dtoa_r+0x6e6>
 8005c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c22:	429f      	cmp	r7, r3
 8005c24:	f43f af7a 	beq.w	8005b1c <_dtoa_r+0x474>
 8005c28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <_dtoa_r+0x5b0>)
 8005c30:	f7fa fcbe 	bl	80005b0 <__aeabi_dmul>
 8005c34:	2200      	movs	r2, #0
 8005c36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <_dtoa_r+0x5b0>)
 8005c40:	f7fa fcb6 	bl	80005b0 <__aeabi_dmul>
 8005c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c48:	e7c3      	b.n	8005bd2 <_dtoa_r+0x52a>
 8005c4a:	bf00      	nop
 8005c4c:	08008208 	.word	0x08008208
 8005c50:	080081e0 	.word	0x080081e0
 8005c54:	3ff00000 	.word	0x3ff00000
 8005c58:	40240000 	.word	0x40240000
 8005c5c:	401c0000 	.word	0x401c0000
 8005c60:	40140000 	.word	0x40140000
 8005c64:	3fe00000 	.word	0x3fe00000
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa fca0 	bl	80005b0 <__aeabi_dmul>
 8005c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c76:	9c03      	ldr	r4, [sp, #12]
 8005c78:	9314      	str	r3, [sp, #80]	; 0x50
 8005c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c7e:	f7fa ff47 	bl	8000b10 <__aeabi_d2iz>
 8005c82:	9015      	str	r0, [sp, #84]	; 0x54
 8005c84:	f7fa fc2a 	bl	80004dc <__aeabi_i2d>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c90:	f7fa fad6 	bl	8000240 <__aeabi_dsub>
 8005c94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c96:	4606      	mov	r6, r0
 8005c98:	3330      	adds	r3, #48	; 0x30
 8005c9a:	f804 3b01 	strb.w	r3, [r4], #1
 8005c9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ca0:	460f      	mov	r7, r1
 8005ca2:	429c      	cmp	r4, r3
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	d124      	bne.n	8005cf4 <_dtoa_r+0x64c>
 8005caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cae:	4bb0      	ldr	r3, [pc, #704]	; (8005f70 <_dtoa_r+0x8c8>)
 8005cb0:	f7fa fac8 	bl	8000244 <__adddf3>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f7fa ff08 	bl	8000ad0 <__aeabi_dcmpgt>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d163      	bne.n	8005d8c <_dtoa_r+0x6e4>
 8005cc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cc8:	2000      	movs	r0, #0
 8005cca:	49a9      	ldr	r1, [pc, #676]	; (8005f70 <_dtoa_r+0x8c8>)
 8005ccc:	f7fa fab8 	bl	8000240 <__aeabi_dsub>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	f7fa fedc 	bl	8000a94 <__aeabi_dcmplt>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f43f af1d 	beq.w	8005b1c <_dtoa_r+0x474>
 8005ce2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005ce4:	1e7b      	subs	r3, r7, #1
 8005ce6:	9314      	str	r3, [sp, #80]	; 0x50
 8005ce8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d0f8      	beq.n	8005ce2 <_dtoa_r+0x63a>
 8005cf0:	46c2      	mov	sl, r8
 8005cf2:	e03b      	b.n	8005d6c <_dtoa_r+0x6c4>
 8005cf4:	4b9f      	ldr	r3, [pc, #636]	; (8005f74 <_dtoa_r+0x8cc>)
 8005cf6:	f7fa fc5b 	bl	80005b0 <__aeabi_dmul>
 8005cfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cfe:	e7bc      	b.n	8005c7a <_dtoa_r+0x5d2>
 8005d00:	9f03      	ldr	r7, [sp, #12]
 8005d02:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005d06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	f7fa fd79 	bl	8000804 <__aeabi_ddiv>
 8005d12:	f7fa fefd 	bl	8000b10 <__aeabi_d2iz>
 8005d16:	4604      	mov	r4, r0
 8005d18:	f7fa fbe0 	bl	80004dc <__aeabi_i2d>
 8005d1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d20:	f7fa fc46 	bl	80005b0 <__aeabi_dmul>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4640      	mov	r0, r8
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	f7fa fa88 	bl	8000240 <__aeabi_dsub>
 8005d30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005d34:	f807 6b01 	strb.w	r6, [r7], #1
 8005d38:	9e03      	ldr	r6, [sp, #12]
 8005d3a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005d3e:	1bbe      	subs	r6, r7, r6
 8005d40:	45b4      	cmp	ip, r6
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	d136      	bne.n	8005db6 <_dtoa_r+0x70e>
 8005d48:	f7fa fa7c 	bl	8000244 <__adddf3>
 8005d4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d50:	4680      	mov	r8, r0
 8005d52:	4689      	mov	r9, r1
 8005d54:	f7fa febc 	bl	8000ad0 <__aeabi_dcmpgt>
 8005d58:	bb58      	cbnz	r0, 8005db2 <_dtoa_r+0x70a>
 8005d5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d5e:	4640      	mov	r0, r8
 8005d60:	4649      	mov	r1, r9
 8005d62:	f7fa fe8d 	bl	8000a80 <__aeabi_dcmpeq>
 8005d66:	b108      	cbz	r0, 8005d6c <_dtoa_r+0x6c4>
 8005d68:	07e1      	lsls	r1, r4, #31
 8005d6a:	d422      	bmi.n	8005db2 <_dtoa_r+0x70a>
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	4659      	mov	r1, fp
 8005d70:	f000 faf0 	bl	8006354 <_Bfree>
 8005d74:	2300      	movs	r3, #0
 8005d76:	703b      	strb	r3, [r7, #0]
 8005d78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d7a:	f10a 0001 	add.w	r0, sl, #1
 8005d7e:	6018      	str	r0, [r3, #0]
 8005d80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f43f acde 	beq.w	8005744 <_dtoa_r+0x9c>
 8005d88:	601f      	str	r7, [r3, #0]
 8005d8a:	e4db      	b.n	8005744 <_dtoa_r+0x9c>
 8005d8c:	4627      	mov	r7, r4
 8005d8e:	463b      	mov	r3, r7
 8005d90:	461f      	mov	r7, r3
 8005d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d96:	2a39      	cmp	r2, #57	; 0x39
 8005d98:	d107      	bne.n	8005daa <_dtoa_r+0x702>
 8005d9a:	9a03      	ldr	r2, [sp, #12]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d1f7      	bne.n	8005d90 <_dtoa_r+0x6e8>
 8005da0:	2230      	movs	r2, #48	; 0x30
 8005da2:	9903      	ldr	r1, [sp, #12]
 8005da4:	f108 0801 	add.w	r8, r8, #1
 8005da8:	700a      	strb	r2, [r1, #0]
 8005daa:	781a      	ldrb	r2, [r3, #0]
 8005dac:	3201      	adds	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e79e      	b.n	8005cf0 <_dtoa_r+0x648>
 8005db2:	46d0      	mov	r8, sl
 8005db4:	e7eb      	b.n	8005d8e <_dtoa_r+0x6e6>
 8005db6:	2200      	movs	r2, #0
 8005db8:	4b6e      	ldr	r3, [pc, #440]	; (8005f74 <_dtoa_r+0x8cc>)
 8005dba:	f7fa fbf9 	bl	80005b0 <__aeabi_dmul>
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4680      	mov	r8, r0
 8005dc4:	4689      	mov	r9, r1
 8005dc6:	f7fa fe5b 	bl	8000a80 <__aeabi_dcmpeq>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d09b      	beq.n	8005d06 <_dtoa_r+0x65e>
 8005dce:	e7cd      	b.n	8005d6c <_dtoa_r+0x6c4>
 8005dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	f000 80d0 	beq.w	8005f78 <_dtoa_r+0x8d0>
 8005dd8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005dda:	2a01      	cmp	r2, #1
 8005ddc:	f300 80ae 	bgt.w	8005f3c <_dtoa_r+0x894>
 8005de0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	f000 80a6 	beq.w	8005f34 <_dtoa_r+0x88c>
 8005de8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005dee:	9f06      	ldr	r7, [sp, #24]
 8005df0:	9a06      	ldr	r2, [sp, #24]
 8005df2:	2101      	movs	r1, #1
 8005df4:	441a      	add	r2, r3
 8005df6:	9206      	str	r2, [sp, #24]
 8005df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	441a      	add	r2, r3
 8005dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8005e00:	f000 fb5e 	bl	80064c0 <__i2b>
 8005e04:	4606      	mov	r6, r0
 8005e06:	2f00      	cmp	r7, #0
 8005e08:	dd0c      	ble.n	8005e24 <_dtoa_r+0x77c>
 8005e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dd09      	ble.n	8005e24 <_dtoa_r+0x77c>
 8005e10:	42bb      	cmp	r3, r7
 8005e12:	bfa8      	it	ge
 8005e14:	463b      	movge	r3, r7
 8005e16:	9a06      	ldr	r2, [sp, #24]
 8005e18:	1aff      	subs	r7, r7, r3
 8005e1a:	1ad2      	subs	r2, r2, r3
 8005e1c:	9206      	str	r2, [sp, #24]
 8005e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	9309      	str	r3, [sp, #36]	; 0x24
 8005e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e26:	b1f3      	cbz	r3, 8005e66 <_dtoa_r+0x7be>
 8005e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 80a8 	beq.w	8005f80 <_dtoa_r+0x8d8>
 8005e30:	2c00      	cmp	r4, #0
 8005e32:	dd10      	ble.n	8005e56 <_dtoa_r+0x7ae>
 8005e34:	4631      	mov	r1, r6
 8005e36:	4622      	mov	r2, r4
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f000 fbff 	bl	800663c <__pow5mult>
 8005e3e:	465a      	mov	r2, fp
 8005e40:	4601      	mov	r1, r0
 8005e42:	4606      	mov	r6, r0
 8005e44:	4628      	mov	r0, r5
 8005e46:	f000 fb51 	bl	80064ec <__multiply>
 8005e4a:	4680      	mov	r8, r0
 8005e4c:	4659      	mov	r1, fp
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 fa80 	bl	8006354 <_Bfree>
 8005e54:	46c3      	mov	fp, r8
 8005e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e58:	1b1a      	subs	r2, r3, r4
 8005e5a:	d004      	beq.n	8005e66 <_dtoa_r+0x7be>
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 fbec 	bl	800663c <__pow5mult>
 8005e64:	4683      	mov	fp, r0
 8005e66:	2101      	movs	r1, #1
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f000 fb29 	bl	80064c0 <__i2b>
 8005e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e70:	4604      	mov	r4, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f340 8086 	ble.w	8005f84 <_dtoa_r+0x8dc>
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 fbdd 	bl	800663c <__pow5mult>
 8005e82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e84:	4604      	mov	r4, r0
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	dd7f      	ble.n	8005f8a <_dtoa_r+0x8e2>
 8005e8a:	f04f 0800 	mov.w	r8, #0
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e94:	6918      	ldr	r0, [r3, #16]
 8005e96:	f000 fac5 	bl	8006424 <__hi0bits>
 8005e9a:	f1c0 0020 	rsb	r0, r0, #32
 8005e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea0:	4418      	add	r0, r3
 8005ea2:	f010 001f 	ands.w	r0, r0, #31
 8005ea6:	f000 8092 	beq.w	8005fce <_dtoa_r+0x926>
 8005eaa:	f1c0 0320 	rsb	r3, r0, #32
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	f340 808a 	ble.w	8005fc8 <_dtoa_r+0x920>
 8005eb4:	f1c0 001c 	rsb	r0, r0, #28
 8005eb8:	9b06      	ldr	r3, [sp, #24]
 8005eba:	4407      	add	r7, r0
 8005ebc:	4403      	add	r3, r0
 8005ebe:	9306      	str	r3, [sp, #24]
 8005ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec2:	4403      	add	r3, r0
 8005ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec6:	9b06      	ldr	r3, [sp, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dd05      	ble.n	8005ed8 <_dtoa_r+0x830>
 8005ecc:	4659      	mov	r1, fp
 8005ece:	461a      	mov	r2, r3
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f000 fc0d 	bl	80066f0 <__lshift>
 8005ed6:	4683      	mov	fp, r0
 8005ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	dd05      	ble.n	8005eea <_dtoa_r+0x842>
 8005ede:	4621      	mov	r1, r4
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 fc04 	bl	80066f0 <__lshift>
 8005ee8:	4604      	mov	r4, r0
 8005eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d070      	beq.n	8005fd2 <_dtoa_r+0x92a>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4658      	mov	r0, fp
 8005ef4:	f000 fc6c 	bl	80067d0 <__mcmp>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	da6a      	bge.n	8005fd2 <_dtoa_r+0x92a>
 8005efc:	2300      	movs	r3, #0
 8005efe:	4659      	mov	r1, fp
 8005f00:	220a      	movs	r2, #10
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 fa48 	bl	8006398 <__multadd>
 8005f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f0a:	4683      	mov	fp, r0
 8005f0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8194 	beq.w	800623e <_dtoa_r+0xb96>
 8005f16:	4631      	mov	r1, r6
 8005f18:	2300      	movs	r3, #0
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 fa3b 	bl	8006398 <__multadd>
 8005f22:	f1b9 0f00 	cmp.w	r9, #0
 8005f26:	4606      	mov	r6, r0
 8005f28:	f300 8093 	bgt.w	8006052 <_dtoa_r+0x9aa>
 8005f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	dc57      	bgt.n	8005fe2 <_dtoa_r+0x93a>
 8005f32:	e08e      	b.n	8006052 <_dtoa_r+0x9aa>
 8005f34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f3a:	e757      	b.n	8005dec <_dtoa_r+0x744>
 8005f3c:	9b08      	ldr	r3, [sp, #32]
 8005f3e:	1e5c      	subs	r4, r3, #1
 8005f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f42:	42a3      	cmp	r3, r4
 8005f44:	bfb7      	itett	lt
 8005f46:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005f48:	1b1c      	subge	r4, r3, r4
 8005f4a:	1ae2      	sublt	r2, r4, r3
 8005f4c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005f4e:	bfbe      	ittt	lt
 8005f50:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005f52:	189b      	addlt	r3, r3, r2
 8005f54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005f56:	9b08      	ldr	r3, [sp, #32]
 8005f58:	bfb8      	it	lt
 8005f5a:	2400      	movlt	r4, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfbb      	ittet	lt
 8005f60:	9b06      	ldrlt	r3, [sp, #24]
 8005f62:	9a08      	ldrlt	r2, [sp, #32]
 8005f64:	9f06      	ldrge	r7, [sp, #24]
 8005f66:	1a9f      	sublt	r7, r3, r2
 8005f68:	bfac      	ite	ge
 8005f6a:	9b08      	ldrge	r3, [sp, #32]
 8005f6c:	2300      	movlt	r3, #0
 8005f6e:	e73f      	b.n	8005df0 <_dtoa_r+0x748>
 8005f70:	3fe00000 	.word	0x3fe00000
 8005f74:	40240000 	.word	0x40240000
 8005f78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f7a:	9f06      	ldr	r7, [sp, #24]
 8005f7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005f7e:	e742      	b.n	8005e06 <_dtoa_r+0x75e>
 8005f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f82:	e76b      	b.n	8005e5c <_dtoa_r+0x7b4>
 8005f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	dc19      	bgt.n	8005fbe <_dtoa_r+0x916>
 8005f8a:	9b04      	ldr	r3, [sp, #16]
 8005f8c:	b9bb      	cbnz	r3, 8005fbe <_dtoa_r+0x916>
 8005f8e:	9b05      	ldr	r3, [sp, #20]
 8005f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f94:	b99b      	cbnz	r3, 8005fbe <_dtoa_r+0x916>
 8005f96:	9b05      	ldr	r3, [sp, #20]
 8005f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	0d1b      	lsrs	r3, r3, #20
 8005f9e:	051b      	lsls	r3, r3, #20
 8005fa0:	b183      	cbz	r3, 8005fc4 <_dtoa_r+0x91c>
 8005fa2:	f04f 0801 	mov.w	r8, #1
 8005fa6:	9b06      	ldr	r3, [sp, #24]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	9306      	str	r3, [sp, #24]
 8005fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fae:	3301      	adds	r3, #1
 8005fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f47f af6a 	bne.w	8005e8e <_dtoa_r+0x7e6>
 8005fba:	2001      	movs	r0, #1
 8005fbc:	e76f      	b.n	8005e9e <_dtoa_r+0x7f6>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	e7f6      	b.n	8005fb2 <_dtoa_r+0x90a>
 8005fc4:	4698      	mov	r8, r3
 8005fc6:	e7f4      	b.n	8005fb2 <_dtoa_r+0x90a>
 8005fc8:	f43f af7d 	beq.w	8005ec6 <_dtoa_r+0x81e>
 8005fcc:	4618      	mov	r0, r3
 8005fce:	301c      	adds	r0, #28
 8005fd0:	e772      	b.n	8005eb8 <_dtoa_r+0x810>
 8005fd2:	9b08      	ldr	r3, [sp, #32]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dc36      	bgt.n	8006046 <_dtoa_r+0x99e>
 8005fd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	dd33      	ble.n	8006046 <_dtoa_r+0x99e>
 8005fde:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe2:	f1b9 0f00 	cmp.w	r9, #0
 8005fe6:	d10d      	bne.n	8006004 <_dtoa_r+0x95c>
 8005fe8:	4621      	mov	r1, r4
 8005fea:	464b      	mov	r3, r9
 8005fec:	2205      	movs	r2, #5
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 f9d2 	bl	8006398 <__multadd>
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	4658      	mov	r0, fp
 8005ffa:	f000 fbe9 	bl	80067d0 <__mcmp>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f73f adb8 	bgt.w	8005b74 <_dtoa_r+0x4cc>
 8006004:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006006:	9f03      	ldr	r7, [sp, #12]
 8006008:	ea6f 0a03 	mvn.w	sl, r3
 800600c:	f04f 0800 	mov.w	r8, #0
 8006010:	4621      	mov	r1, r4
 8006012:	4628      	mov	r0, r5
 8006014:	f000 f99e 	bl	8006354 <_Bfree>
 8006018:	2e00      	cmp	r6, #0
 800601a:	f43f aea7 	beq.w	8005d6c <_dtoa_r+0x6c4>
 800601e:	f1b8 0f00 	cmp.w	r8, #0
 8006022:	d005      	beq.n	8006030 <_dtoa_r+0x988>
 8006024:	45b0      	cmp	r8, r6
 8006026:	d003      	beq.n	8006030 <_dtoa_r+0x988>
 8006028:	4641      	mov	r1, r8
 800602a:	4628      	mov	r0, r5
 800602c:	f000 f992 	bl	8006354 <_Bfree>
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	f000 f98e 	bl	8006354 <_Bfree>
 8006038:	e698      	b.n	8005d6c <_dtoa_r+0x6c4>
 800603a:	2400      	movs	r4, #0
 800603c:	4626      	mov	r6, r4
 800603e:	e7e1      	b.n	8006004 <_dtoa_r+0x95c>
 8006040:	46c2      	mov	sl, r8
 8006042:	4626      	mov	r6, r4
 8006044:	e596      	b.n	8005b74 <_dtoa_r+0x4cc>
 8006046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80fd 	beq.w	800624c <_dtoa_r+0xba4>
 8006052:	2f00      	cmp	r7, #0
 8006054:	dd05      	ble.n	8006062 <_dtoa_r+0x9ba>
 8006056:	4631      	mov	r1, r6
 8006058:	463a      	mov	r2, r7
 800605a:	4628      	mov	r0, r5
 800605c:	f000 fb48 	bl	80066f0 <__lshift>
 8006060:	4606      	mov	r6, r0
 8006062:	f1b8 0f00 	cmp.w	r8, #0
 8006066:	d05c      	beq.n	8006122 <_dtoa_r+0xa7a>
 8006068:	4628      	mov	r0, r5
 800606a:	6871      	ldr	r1, [r6, #4]
 800606c:	f000 f932 	bl	80062d4 <_Balloc>
 8006070:	4607      	mov	r7, r0
 8006072:	b928      	cbnz	r0, 8006080 <_dtoa_r+0x9d8>
 8006074:	4602      	mov	r2, r0
 8006076:	f240 21ea 	movw	r1, #746	; 0x2ea
 800607a:	4b7f      	ldr	r3, [pc, #508]	; (8006278 <_dtoa_r+0xbd0>)
 800607c:	f7ff bb28 	b.w	80056d0 <_dtoa_r+0x28>
 8006080:	6932      	ldr	r2, [r6, #16]
 8006082:	f106 010c 	add.w	r1, r6, #12
 8006086:	3202      	adds	r2, #2
 8006088:	0092      	lsls	r2, r2, #2
 800608a:	300c      	adds	r0, #12
 800608c:	f000 f914 	bl	80062b8 <memcpy>
 8006090:	2201      	movs	r2, #1
 8006092:	4639      	mov	r1, r7
 8006094:	4628      	mov	r0, r5
 8006096:	f000 fb2b 	bl	80066f0 <__lshift>
 800609a:	46b0      	mov	r8, r6
 800609c:	4606      	mov	r6, r0
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	3301      	adds	r3, #1
 80060a2:	9308      	str	r3, [sp, #32]
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	444b      	add	r3, r9
 80060a8:	930a      	str	r3, [sp, #40]	; 0x28
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	9309      	str	r3, [sp, #36]	; 0x24
 80060b2:	9b08      	ldr	r3, [sp, #32]
 80060b4:	4621      	mov	r1, r4
 80060b6:	3b01      	subs	r3, #1
 80060b8:	4658      	mov	r0, fp
 80060ba:	9304      	str	r3, [sp, #16]
 80060bc:	f7ff fa68 	bl	8005590 <quorem>
 80060c0:	4603      	mov	r3, r0
 80060c2:	4641      	mov	r1, r8
 80060c4:	3330      	adds	r3, #48	; 0x30
 80060c6:	9006      	str	r0, [sp, #24]
 80060c8:	4658      	mov	r0, fp
 80060ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80060cc:	f000 fb80 	bl	80067d0 <__mcmp>
 80060d0:	4632      	mov	r2, r6
 80060d2:	4681      	mov	r9, r0
 80060d4:	4621      	mov	r1, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 fb96 	bl	8006808 <__mdiff>
 80060dc:	68c2      	ldr	r2, [r0, #12]
 80060de:	4607      	mov	r7, r0
 80060e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e2:	bb02      	cbnz	r2, 8006126 <_dtoa_r+0xa7e>
 80060e4:	4601      	mov	r1, r0
 80060e6:	4658      	mov	r0, fp
 80060e8:	f000 fb72 	bl	80067d0 <__mcmp>
 80060ec:	4602      	mov	r2, r0
 80060ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060f0:	4639      	mov	r1, r7
 80060f2:	4628      	mov	r0, r5
 80060f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80060f8:	f000 f92c 	bl	8006354 <_Bfree>
 80060fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006100:	9f08      	ldr	r7, [sp, #32]
 8006102:	ea43 0102 	orr.w	r1, r3, r2
 8006106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006108:	430b      	orrs	r3, r1
 800610a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800610c:	d10d      	bne.n	800612a <_dtoa_r+0xa82>
 800610e:	2b39      	cmp	r3, #57	; 0x39
 8006110:	d029      	beq.n	8006166 <_dtoa_r+0xabe>
 8006112:	f1b9 0f00 	cmp.w	r9, #0
 8006116:	dd01      	ble.n	800611c <_dtoa_r+0xa74>
 8006118:	9b06      	ldr	r3, [sp, #24]
 800611a:	3331      	adds	r3, #49	; 0x31
 800611c:	9a04      	ldr	r2, [sp, #16]
 800611e:	7013      	strb	r3, [r2, #0]
 8006120:	e776      	b.n	8006010 <_dtoa_r+0x968>
 8006122:	4630      	mov	r0, r6
 8006124:	e7b9      	b.n	800609a <_dtoa_r+0x9f2>
 8006126:	2201      	movs	r2, #1
 8006128:	e7e2      	b.n	80060f0 <_dtoa_r+0xa48>
 800612a:	f1b9 0f00 	cmp.w	r9, #0
 800612e:	db06      	blt.n	800613e <_dtoa_r+0xa96>
 8006130:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006132:	ea41 0909 	orr.w	r9, r1, r9
 8006136:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006138:	ea59 0101 	orrs.w	r1, r9, r1
 800613c:	d120      	bne.n	8006180 <_dtoa_r+0xad8>
 800613e:	2a00      	cmp	r2, #0
 8006140:	ddec      	ble.n	800611c <_dtoa_r+0xa74>
 8006142:	4659      	mov	r1, fp
 8006144:	2201      	movs	r2, #1
 8006146:	4628      	mov	r0, r5
 8006148:	9308      	str	r3, [sp, #32]
 800614a:	f000 fad1 	bl	80066f0 <__lshift>
 800614e:	4621      	mov	r1, r4
 8006150:	4683      	mov	fp, r0
 8006152:	f000 fb3d 	bl	80067d0 <__mcmp>
 8006156:	2800      	cmp	r0, #0
 8006158:	9b08      	ldr	r3, [sp, #32]
 800615a:	dc02      	bgt.n	8006162 <_dtoa_r+0xaba>
 800615c:	d1de      	bne.n	800611c <_dtoa_r+0xa74>
 800615e:	07da      	lsls	r2, r3, #31
 8006160:	d5dc      	bpl.n	800611c <_dtoa_r+0xa74>
 8006162:	2b39      	cmp	r3, #57	; 0x39
 8006164:	d1d8      	bne.n	8006118 <_dtoa_r+0xa70>
 8006166:	2339      	movs	r3, #57	; 0x39
 8006168:	9a04      	ldr	r2, [sp, #16]
 800616a:	7013      	strb	r3, [r2, #0]
 800616c:	463b      	mov	r3, r7
 800616e:	461f      	mov	r7, r3
 8006170:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006174:	3b01      	subs	r3, #1
 8006176:	2a39      	cmp	r2, #57	; 0x39
 8006178:	d050      	beq.n	800621c <_dtoa_r+0xb74>
 800617a:	3201      	adds	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e747      	b.n	8006010 <_dtoa_r+0x968>
 8006180:	2a00      	cmp	r2, #0
 8006182:	dd03      	ble.n	800618c <_dtoa_r+0xae4>
 8006184:	2b39      	cmp	r3, #57	; 0x39
 8006186:	d0ee      	beq.n	8006166 <_dtoa_r+0xabe>
 8006188:	3301      	adds	r3, #1
 800618a:	e7c7      	b.n	800611c <_dtoa_r+0xa74>
 800618c:	9a08      	ldr	r2, [sp, #32]
 800618e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006190:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006194:	428a      	cmp	r2, r1
 8006196:	d02a      	beq.n	80061ee <_dtoa_r+0xb46>
 8006198:	4659      	mov	r1, fp
 800619a:	2300      	movs	r3, #0
 800619c:	220a      	movs	r2, #10
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 f8fa 	bl	8006398 <__multadd>
 80061a4:	45b0      	cmp	r8, r6
 80061a6:	4683      	mov	fp, r0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	f04f 020a 	mov.w	r2, #10
 80061b0:	4641      	mov	r1, r8
 80061b2:	4628      	mov	r0, r5
 80061b4:	d107      	bne.n	80061c6 <_dtoa_r+0xb1e>
 80061b6:	f000 f8ef 	bl	8006398 <__multadd>
 80061ba:	4680      	mov	r8, r0
 80061bc:	4606      	mov	r6, r0
 80061be:	9b08      	ldr	r3, [sp, #32]
 80061c0:	3301      	adds	r3, #1
 80061c2:	9308      	str	r3, [sp, #32]
 80061c4:	e775      	b.n	80060b2 <_dtoa_r+0xa0a>
 80061c6:	f000 f8e7 	bl	8006398 <__multadd>
 80061ca:	4631      	mov	r1, r6
 80061cc:	4680      	mov	r8, r0
 80061ce:	2300      	movs	r3, #0
 80061d0:	220a      	movs	r2, #10
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 f8e0 	bl	8006398 <__multadd>
 80061d8:	4606      	mov	r6, r0
 80061da:	e7f0      	b.n	80061be <_dtoa_r+0xb16>
 80061dc:	f1b9 0f00 	cmp.w	r9, #0
 80061e0:	bfcc      	ite	gt
 80061e2:	464f      	movgt	r7, r9
 80061e4:	2701      	movle	r7, #1
 80061e6:	f04f 0800 	mov.w	r8, #0
 80061ea:	9a03      	ldr	r2, [sp, #12]
 80061ec:	4417      	add	r7, r2
 80061ee:	4659      	mov	r1, fp
 80061f0:	2201      	movs	r2, #1
 80061f2:	4628      	mov	r0, r5
 80061f4:	9308      	str	r3, [sp, #32]
 80061f6:	f000 fa7b 	bl	80066f0 <__lshift>
 80061fa:	4621      	mov	r1, r4
 80061fc:	4683      	mov	fp, r0
 80061fe:	f000 fae7 	bl	80067d0 <__mcmp>
 8006202:	2800      	cmp	r0, #0
 8006204:	dcb2      	bgt.n	800616c <_dtoa_r+0xac4>
 8006206:	d102      	bne.n	800620e <_dtoa_r+0xb66>
 8006208:	9b08      	ldr	r3, [sp, #32]
 800620a:	07db      	lsls	r3, r3, #31
 800620c:	d4ae      	bmi.n	800616c <_dtoa_r+0xac4>
 800620e:	463b      	mov	r3, r7
 8006210:	461f      	mov	r7, r3
 8006212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006216:	2a30      	cmp	r2, #48	; 0x30
 8006218:	d0fa      	beq.n	8006210 <_dtoa_r+0xb68>
 800621a:	e6f9      	b.n	8006010 <_dtoa_r+0x968>
 800621c:	9a03      	ldr	r2, [sp, #12]
 800621e:	429a      	cmp	r2, r3
 8006220:	d1a5      	bne.n	800616e <_dtoa_r+0xac6>
 8006222:	2331      	movs	r3, #49	; 0x31
 8006224:	f10a 0a01 	add.w	sl, sl, #1
 8006228:	e779      	b.n	800611e <_dtoa_r+0xa76>
 800622a:	4b14      	ldr	r3, [pc, #80]	; (800627c <_dtoa_r+0xbd4>)
 800622c:	f7ff baa8 	b.w	8005780 <_dtoa_r+0xd8>
 8006230:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006232:	2b00      	cmp	r3, #0
 8006234:	f47f aa81 	bne.w	800573a <_dtoa_r+0x92>
 8006238:	4b11      	ldr	r3, [pc, #68]	; (8006280 <_dtoa_r+0xbd8>)
 800623a:	f7ff baa1 	b.w	8005780 <_dtoa_r+0xd8>
 800623e:	f1b9 0f00 	cmp.w	r9, #0
 8006242:	dc03      	bgt.n	800624c <_dtoa_r+0xba4>
 8006244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006246:	2b02      	cmp	r3, #2
 8006248:	f73f aecb 	bgt.w	8005fe2 <_dtoa_r+0x93a>
 800624c:	9f03      	ldr	r7, [sp, #12]
 800624e:	4621      	mov	r1, r4
 8006250:	4658      	mov	r0, fp
 8006252:	f7ff f99d 	bl	8005590 <quorem>
 8006256:	9a03      	ldr	r2, [sp, #12]
 8006258:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800625c:	f807 3b01 	strb.w	r3, [r7], #1
 8006260:	1aba      	subs	r2, r7, r2
 8006262:	4591      	cmp	r9, r2
 8006264:	ddba      	ble.n	80061dc <_dtoa_r+0xb34>
 8006266:	4659      	mov	r1, fp
 8006268:	2300      	movs	r3, #0
 800626a:	220a      	movs	r2, #10
 800626c:	4628      	mov	r0, r5
 800626e:	f000 f893 	bl	8006398 <__multadd>
 8006272:	4683      	mov	fp, r0
 8006274:	e7eb      	b.n	800624e <_dtoa_r+0xba6>
 8006276:	bf00      	nop
 8006278:	0800816f 	.word	0x0800816f
 800627c:	080080cc 	.word	0x080080cc
 8006280:	080080f0 	.word	0x080080f0

08006284 <_localeconv_r>:
 8006284:	4800      	ldr	r0, [pc, #0]	; (8006288 <_localeconv_r+0x4>)
 8006286:	4770      	bx	lr
 8006288:	20000164 	.word	0x20000164

0800628c <malloc>:
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <malloc+0xc>)
 800628e:	4601      	mov	r1, r0
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	f000 bc1d 	b.w	8006ad0 <_malloc_r>
 8006296:	bf00      	nop
 8006298:	20000010 	.word	0x20000010

0800629c <memchr>:
 800629c:	4603      	mov	r3, r0
 800629e:	b510      	push	{r4, lr}
 80062a0:	b2c9      	uxtb	r1, r1
 80062a2:	4402      	add	r2, r0
 80062a4:	4293      	cmp	r3, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	d101      	bne.n	80062ae <memchr+0x12>
 80062aa:	2000      	movs	r0, #0
 80062ac:	e003      	b.n	80062b6 <memchr+0x1a>
 80062ae:	7804      	ldrb	r4, [r0, #0]
 80062b0:	3301      	adds	r3, #1
 80062b2:	428c      	cmp	r4, r1
 80062b4:	d1f6      	bne.n	80062a4 <memchr+0x8>
 80062b6:	bd10      	pop	{r4, pc}

080062b8 <memcpy>:
 80062b8:	440a      	add	r2, r1
 80062ba:	4291      	cmp	r1, r2
 80062bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80062c0:	d100      	bne.n	80062c4 <memcpy+0xc>
 80062c2:	4770      	bx	lr
 80062c4:	b510      	push	{r4, lr}
 80062c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ca:	4291      	cmp	r1, r2
 80062cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062d0:	d1f9      	bne.n	80062c6 <memcpy+0xe>
 80062d2:	bd10      	pop	{r4, pc}

080062d4 <_Balloc>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062d8:	4604      	mov	r4, r0
 80062da:	460d      	mov	r5, r1
 80062dc:	b976      	cbnz	r6, 80062fc <_Balloc+0x28>
 80062de:	2010      	movs	r0, #16
 80062e0:	f7ff ffd4 	bl	800628c <malloc>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6260      	str	r0, [r4, #36]	; 0x24
 80062e8:	b920      	cbnz	r0, 80062f4 <_Balloc+0x20>
 80062ea:	2166      	movs	r1, #102	; 0x66
 80062ec:	4b17      	ldr	r3, [pc, #92]	; (800634c <_Balloc+0x78>)
 80062ee:	4818      	ldr	r0, [pc, #96]	; (8006350 <_Balloc+0x7c>)
 80062f0:	f000 fdce 	bl	8006e90 <__assert_func>
 80062f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062f8:	6006      	str	r6, [r0, #0]
 80062fa:	60c6      	str	r6, [r0, #12]
 80062fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062fe:	68f3      	ldr	r3, [r6, #12]
 8006300:	b183      	cbz	r3, 8006324 <_Balloc+0x50>
 8006302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800630a:	b9b8      	cbnz	r0, 800633c <_Balloc+0x68>
 800630c:	2101      	movs	r1, #1
 800630e:	fa01 f605 	lsl.w	r6, r1, r5
 8006312:	1d72      	adds	r2, r6, #5
 8006314:	4620      	mov	r0, r4
 8006316:	0092      	lsls	r2, r2, #2
 8006318:	f000 fb5e 	bl	80069d8 <_calloc_r>
 800631c:	b160      	cbz	r0, 8006338 <_Balloc+0x64>
 800631e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006322:	e00e      	b.n	8006342 <_Balloc+0x6e>
 8006324:	2221      	movs	r2, #33	; 0x21
 8006326:	2104      	movs	r1, #4
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fb55 	bl	80069d8 <_calloc_r>
 800632e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006330:	60f0      	str	r0, [r6, #12]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e4      	bne.n	8006302 <_Balloc+0x2e>
 8006338:	2000      	movs	r0, #0
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	6802      	ldr	r2, [r0, #0]
 800633e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006342:	2300      	movs	r3, #0
 8006344:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006348:	e7f7      	b.n	800633a <_Balloc+0x66>
 800634a:	bf00      	nop
 800634c:	080080fd 	.word	0x080080fd
 8006350:	08008180 	.word	0x08008180

08006354 <_Bfree>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006358:	4605      	mov	r5, r0
 800635a:	460c      	mov	r4, r1
 800635c:	b976      	cbnz	r6, 800637c <_Bfree+0x28>
 800635e:	2010      	movs	r0, #16
 8006360:	f7ff ff94 	bl	800628c <malloc>
 8006364:	4602      	mov	r2, r0
 8006366:	6268      	str	r0, [r5, #36]	; 0x24
 8006368:	b920      	cbnz	r0, 8006374 <_Bfree+0x20>
 800636a:	218a      	movs	r1, #138	; 0x8a
 800636c:	4b08      	ldr	r3, [pc, #32]	; (8006390 <_Bfree+0x3c>)
 800636e:	4809      	ldr	r0, [pc, #36]	; (8006394 <_Bfree+0x40>)
 8006370:	f000 fd8e 	bl	8006e90 <__assert_func>
 8006374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006378:	6006      	str	r6, [r0, #0]
 800637a:	60c6      	str	r6, [r0, #12]
 800637c:	b13c      	cbz	r4, 800638e <_Bfree+0x3a>
 800637e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006380:	6862      	ldr	r2, [r4, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006388:	6021      	str	r1, [r4, #0]
 800638a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	080080fd 	.word	0x080080fd
 8006394:	08008180 	.word	0x08008180

08006398 <__multadd>:
 8006398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639c:	4607      	mov	r7, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	461e      	mov	r6, r3
 80063a2:	2000      	movs	r0, #0
 80063a4:	690d      	ldr	r5, [r1, #16]
 80063a6:	f101 0c14 	add.w	ip, r1, #20
 80063aa:	f8dc 3000 	ldr.w	r3, [ip]
 80063ae:	3001      	adds	r0, #1
 80063b0:	b299      	uxth	r1, r3
 80063b2:	fb02 6101 	mla	r1, r2, r1, r6
 80063b6:	0c1e      	lsrs	r6, r3, #16
 80063b8:	0c0b      	lsrs	r3, r1, #16
 80063ba:	fb02 3306 	mla	r3, r2, r6, r3
 80063be:	b289      	uxth	r1, r1
 80063c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063c4:	4285      	cmp	r5, r0
 80063c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063ca:	f84c 1b04 	str.w	r1, [ip], #4
 80063ce:	dcec      	bgt.n	80063aa <__multadd+0x12>
 80063d0:	b30e      	cbz	r6, 8006416 <__multadd+0x7e>
 80063d2:	68a3      	ldr	r3, [r4, #8]
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	dc19      	bgt.n	800640c <__multadd+0x74>
 80063d8:	6861      	ldr	r1, [r4, #4]
 80063da:	4638      	mov	r0, r7
 80063dc:	3101      	adds	r1, #1
 80063de:	f7ff ff79 	bl	80062d4 <_Balloc>
 80063e2:	4680      	mov	r8, r0
 80063e4:	b928      	cbnz	r0, 80063f2 <__multadd+0x5a>
 80063e6:	4602      	mov	r2, r0
 80063e8:	21b5      	movs	r1, #181	; 0xb5
 80063ea:	4b0c      	ldr	r3, [pc, #48]	; (800641c <__multadd+0x84>)
 80063ec:	480c      	ldr	r0, [pc, #48]	; (8006420 <__multadd+0x88>)
 80063ee:	f000 fd4f 	bl	8006e90 <__assert_func>
 80063f2:	6922      	ldr	r2, [r4, #16]
 80063f4:	f104 010c 	add.w	r1, r4, #12
 80063f8:	3202      	adds	r2, #2
 80063fa:	0092      	lsls	r2, r2, #2
 80063fc:	300c      	adds	r0, #12
 80063fe:	f7ff ff5b 	bl	80062b8 <memcpy>
 8006402:	4621      	mov	r1, r4
 8006404:	4638      	mov	r0, r7
 8006406:	f7ff ffa5 	bl	8006354 <_Bfree>
 800640a:	4644      	mov	r4, r8
 800640c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006410:	3501      	adds	r5, #1
 8006412:	615e      	str	r6, [r3, #20]
 8006414:	6125      	str	r5, [r4, #16]
 8006416:	4620      	mov	r0, r4
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641c:	0800816f 	.word	0x0800816f
 8006420:	08008180 	.word	0x08008180

08006424 <__hi0bits>:
 8006424:	0c02      	lsrs	r2, r0, #16
 8006426:	0412      	lsls	r2, r2, #16
 8006428:	4603      	mov	r3, r0
 800642a:	b9ca      	cbnz	r2, 8006460 <__hi0bits+0x3c>
 800642c:	0403      	lsls	r3, r0, #16
 800642e:	2010      	movs	r0, #16
 8006430:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006434:	bf04      	itt	eq
 8006436:	021b      	lsleq	r3, r3, #8
 8006438:	3008      	addeq	r0, #8
 800643a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800643e:	bf04      	itt	eq
 8006440:	011b      	lsleq	r3, r3, #4
 8006442:	3004      	addeq	r0, #4
 8006444:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006448:	bf04      	itt	eq
 800644a:	009b      	lsleq	r3, r3, #2
 800644c:	3002      	addeq	r0, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	db05      	blt.n	800645e <__hi0bits+0x3a>
 8006452:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006456:	f100 0001 	add.w	r0, r0, #1
 800645a:	bf08      	it	eq
 800645c:	2020      	moveq	r0, #32
 800645e:	4770      	bx	lr
 8006460:	2000      	movs	r0, #0
 8006462:	e7e5      	b.n	8006430 <__hi0bits+0xc>

08006464 <__lo0bits>:
 8006464:	6803      	ldr	r3, [r0, #0]
 8006466:	4602      	mov	r2, r0
 8006468:	f013 0007 	ands.w	r0, r3, #7
 800646c:	d00b      	beq.n	8006486 <__lo0bits+0x22>
 800646e:	07d9      	lsls	r1, r3, #31
 8006470:	d421      	bmi.n	80064b6 <__lo0bits+0x52>
 8006472:	0798      	lsls	r0, r3, #30
 8006474:	bf49      	itett	mi
 8006476:	085b      	lsrmi	r3, r3, #1
 8006478:	089b      	lsrpl	r3, r3, #2
 800647a:	2001      	movmi	r0, #1
 800647c:	6013      	strmi	r3, [r2, #0]
 800647e:	bf5c      	itt	pl
 8006480:	2002      	movpl	r0, #2
 8006482:	6013      	strpl	r3, [r2, #0]
 8006484:	4770      	bx	lr
 8006486:	b299      	uxth	r1, r3
 8006488:	b909      	cbnz	r1, 800648e <__lo0bits+0x2a>
 800648a:	2010      	movs	r0, #16
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	b2d9      	uxtb	r1, r3
 8006490:	b909      	cbnz	r1, 8006496 <__lo0bits+0x32>
 8006492:	3008      	adds	r0, #8
 8006494:	0a1b      	lsrs	r3, r3, #8
 8006496:	0719      	lsls	r1, r3, #28
 8006498:	bf04      	itt	eq
 800649a:	091b      	lsreq	r3, r3, #4
 800649c:	3004      	addeq	r0, #4
 800649e:	0799      	lsls	r1, r3, #30
 80064a0:	bf04      	itt	eq
 80064a2:	089b      	lsreq	r3, r3, #2
 80064a4:	3002      	addeq	r0, #2
 80064a6:	07d9      	lsls	r1, r3, #31
 80064a8:	d403      	bmi.n	80064b2 <__lo0bits+0x4e>
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	f100 0001 	add.w	r0, r0, #1
 80064b0:	d003      	beq.n	80064ba <__lo0bits+0x56>
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	4770      	bx	lr
 80064b6:	2000      	movs	r0, #0
 80064b8:	4770      	bx	lr
 80064ba:	2020      	movs	r0, #32
 80064bc:	4770      	bx	lr
	...

080064c0 <__i2b>:
 80064c0:	b510      	push	{r4, lr}
 80064c2:	460c      	mov	r4, r1
 80064c4:	2101      	movs	r1, #1
 80064c6:	f7ff ff05 	bl	80062d4 <_Balloc>
 80064ca:	4602      	mov	r2, r0
 80064cc:	b928      	cbnz	r0, 80064da <__i2b+0x1a>
 80064ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064d2:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <__i2b+0x24>)
 80064d4:	4804      	ldr	r0, [pc, #16]	; (80064e8 <__i2b+0x28>)
 80064d6:	f000 fcdb 	bl	8006e90 <__assert_func>
 80064da:	2301      	movs	r3, #1
 80064dc:	6144      	str	r4, [r0, #20]
 80064de:	6103      	str	r3, [r0, #16]
 80064e0:	bd10      	pop	{r4, pc}
 80064e2:	bf00      	nop
 80064e4:	0800816f 	.word	0x0800816f
 80064e8:	08008180 	.word	0x08008180

080064ec <__multiply>:
 80064ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f0:	4691      	mov	r9, r2
 80064f2:	690a      	ldr	r2, [r1, #16]
 80064f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064f8:	460c      	mov	r4, r1
 80064fa:	429a      	cmp	r2, r3
 80064fc:	bfbe      	ittt	lt
 80064fe:	460b      	movlt	r3, r1
 8006500:	464c      	movlt	r4, r9
 8006502:	4699      	movlt	r9, r3
 8006504:	6927      	ldr	r7, [r4, #16]
 8006506:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	6861      	ldr	r1, [r4, #4]
 800650e:	eb07 060a 	add.w	r6, r7, sl
 8006512:	42b3      	cmp	r3, r6
 8006514:	b085      	sub	sp, #20
 8006516:	bfb8      	it	lt
 8006518:	3101      	addlt	r1, #1
 800651a:	f7ff fedb 	bl	80062d4 <_Balloc>
 800651e:	b930      	cbnz	r0, 800652e <__multiply+0x42>
 8006520:	4602      	mov	r2, r0
 8006522:	f240 115d 	movw	r1, #349	; 0x15d
 8006526:	4b43      	ldr	r3, [pc, #268]	; (8006634 <__multiply+0x148>)
 8006528:	4843      	ldr	r0, [pc, #268]	; (8006638 <__multiply+0x14c>)
 800652a:	f000 fcb1 	bl	8006e90 <__assert_func>
 800652e:	f100 0514 	add.w	r5, r0, #20
 8006532:	462b      	mov	r3, r5
 8006534:	2200      	movs	r2, #0
 8006536:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800653a:	4543      	cmp	r3, r8
 800653c:	d321      	bcc.n	8006582 <__multiply+0x96>
 800653e:	f104 0314 	add.w	r3, r4, #20
 8006542:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006546:	f109 0314 	add.w	r3, r9, #20
 800654a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800654e:	9202      	str	r2, [sp, #8]
 8006550:	1b3a      	subs	r2, r7, r4
 8006552:	3a15      	subs	r2, #21
 8006554:	f022 0203 	bic.w	r2, r2, #3
 8006558:	3204      	adds	r2, #4
 800655a:	f104 0115 	add.w	r1, r4, #21
 800655e:	428f      	cmp	r7, r1
 8006560:	bf38      	it	cc
 8006562:	2204      	movcc	r2, #4
 8006564:	9201      	str	r2, [sp, #4]
 8006566:	9a02      	ldr	r2, [sp, #8]
 8006568:	9303      	str	r3, [sp, #12]
 800656a:	429a      	cmp	r2, r3
 800656c:	d80c      	bhi.n	8006588 <__multiply+0x9c>
 800656e:	2e00      	cmp	r6, #0
 8006570:	dd03      	ble.n	800657a <__multiply+0x8e>
 8006572:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006576:	2b00      	cmp	r3, #0
 8006578:	d059      	beq.n	800662e <__multiply+0x142>
 800657a:	6106      	str	r6, [r0, #16]
 800657c:	b005      	add	sp, #20
 800657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006582:	f843 2b04 	str.w	r2, [r3], #4
 8006586:	e7d8      	b.n	800653a <__multiply+0x4e>
 8006588:	f8b3 a000 	ldrh.w	sl, [r3]
 800658c:	f1ba 0f00 	cmp.w	sl, #0
 8006590:	d023      	beq.n	80065da <__multiply+0xee>
 8006592:	46a9      	mov	r9, r5
 8006594:	f04f 0c00 	mov.w	ip, #0
 8006598:	f104 0e14 	add.w	lr, r4, #20
 800659c:	f85e 2b04 	ldr.w	r2, [lr], #4
 80065a0:	f8d9 1000 	ldr.w	r1, [r9]
 80065a4:	fa1f fb82 	uxth.w	fp, r2
 80065a8:	b289      	uxth	r1, r1
 80065aa:	fb0a 110b 	mla	r1, sl, fp, r1
 80065ae:	4461      	add	r1, ip
 80065b0:	f8d9 c000 	ldr.w	ip, [r9]
 80065b4:	0c12      	lsrs	r2, r2, #16
 80065b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80065ba:	fb0a c202 	mla	r2, sl, r2, ip
 80065be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065c2:	b289      	uxth	r1, r1
 80065c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065c8:	4577      	cmp	r7, lr
 80065ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065ce:	f849 1b04 	str.w	r1, [r9], #4
 80065d2:	d8e3      	bhi.n	800659c <__multiply+0xb0>
 80065d4:	9a01      	ldr	r2, [sp, #4]
 80065d6:	f845 c002 	str.w	ip, [r5, r2]
 80065da:	9a03      	ldr	r2, [sp, #12]
 80065dc:	3304      	adds	r3, #4
 80065de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80065e2:	f1b9 0f00 	cmp.w	r9, #0
 80065e6:	d020      	beq.n	800662a <__multiply+0x13e>
 80065e8:	46ae      	mov	lr, r5
 80065ea:	f04f 0a00 	mov.w	sl, #0
 80065ee:	6829      	ldr	r1, [r5, #0]
 80065f0:	f104 0c14 	add.w	ip, r4, #20
 80065f4:	f8bc b000 	ldrh.w	fp, [ip]
 80065f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80065fc:	b289      	uxth	r1, r1
 80065fe:	fb09 220b 	mla	r2, r9, fp, r2
 8006602:	4492      	add	sl, r2
 8006604:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006608:	f84e 1b04 	str.w	r1, [lr], #4
 800660c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006610:	f8be 1000 	ldrh.w	r1, [lr]
 8006614:	0c12      	lsrs	r2, r2, #16
 8006616:	fb09 1102 	mla	r1, r9, r2, r1
 800661a:	4567      	cmp	r7, ip
 800661c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006620:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006624:	d8e6      	bhi.n	80065f4 <__multiply+0x108>
 8006626:	9a01      	ldr	r2, [sp, #4]
 8006628:	50a9      	str	r1, [r5, r2]
 800662a:	3504      	adds	r5, #4
 800662c:	e79b      	b.n	8006566 <__multiply+0x7a>
 800662e:	3e01      	subs	r6, #1
 8006630:	e79d      	b.n	800656e <__multiply+0x82>
 8006632:	bf00      	nop
 8006634:	0800816f 	.word	0x0800816f
 8006638:	08008180 	.word	0x08008180

0800663c <__pow5mult>:
 800663c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006640:	4615      	mov	r5, r2
 8006642:	f012 0203 	ands.w	r2, r2, #3
 8006646:	4606      	mov	r6, r0
 8006648:	460f      	mov	r7, r1
 800664a:	d007      	beq.n	800665c <__pow5mult+0x20>
 800664c:	4c25      	ldr	r4, [pc, #148]	; (80066e4 <__pow5mult+0xa8>)
 800664e:	3a01      	subs	r2, #1
 8006650:	2300      	movs	r3, #0
 8006652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006656:	f7ff fe9f 	bl	8006398 <__multadd>
 800665a:	4607      	mov	r7, r0
 800665c:	10ad      	asrs	r5, r5, #2
 800665e:	d03d      	beq.n	80066dc <__pow5mult+0xa0>
 8006660:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006662:	b97c      	cbnz	r4, 8006684 <__pow5mult+0x48>
 8006664:	2010      	movs	r0, #16
 8006666:	f7ff fe11 	bl	800628c <malloc>
 800666a:	4602      	mov	r2, r0
 800666c:	6270      	str	r0, [r6, #36]	; 0x24
 800666e:	b928      	cbnz	r0, 800667c <__pow5mult+0x40>
 8006670:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006674:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <__pow5mult+0xac>)
 8006676:	481d      	ldr	r0, [pc, #116]	; (80066ec <__pow5mult+0xb0>)
 8006678:	f000 fc0a 	bl	8006e90 <__assert_func>
 800667c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006680:	6004      	str	r4, [r0, #0]
 8006682:	60c4      	str	r4, [r0, #12]
 8006684:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800668c:	b94c      	cbnz	r4, 80066a2 <__pow5mult+0x66>
 800668e:	f240 2171 	movw	r1, #625	; 0x271
 8006692:	4630      	mov	r0, r6
 8006694:	f7ff ff14 	bl	80064c0 <__i2b>
 8006698:	2300      	movs	r3, #0
 800669a:	4604      	mov	r4, r0
 800669c:	f8c8 0008 	str.w	r0, [r8, #8]
 80066a0:	6003      	str	r3, [r0, #0]
 80066a2:	f04f 0900 	mov.w	r9, #0
 80066a6:	07eb      	lsls	r3, r5, #31
 80066a8:	d50a      	bpl.n	80066c0 <__pow5mult+0x84>
 80066aa:	4639      	mov	r1, r7
 80066ac:	4622      	mov	r2, r4
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff ff1c 	bl	80064ec <__multiply>
 80066b4:	4680      	mov	r8, r0
 80066b6:	4639      	mov	r1, r7
 80066b8:	4630      	mov	r0, r6
 80066ba:	f7ff fe4b 	bl	8006354 <_Bfree>
 80066be:	4647      	mov	r7, r8
 80066c0:	106d      	asrs	r5, r5, #1
 80066c2:	d00b      	beq.n	80066dc <__pow5mult+0xa0>
 80066c4:	6820      	ldr	r0, [r4, #0]
 80066c6:	b938      	cbnz	r0, 80066d8 <__pow5mult+0x9c>
 80066c8:	4622      	mov	r2, r4
 80066ca:	4621      	mov	r1, r4
 80066cc:	4630      	mov	r0, r6
 80066ce:	f7ff ff0d 	bl	80064ec <__multiply>
 80066d2:	6020      	str	r0, [r4, #0]
 80066d4:	f8c0 9000 	str.w	r9, [r0]
 80066d8:	4604      	mov	r4, r0
 80066da:	e7e4      	b.n	80066a6 <__pow5mult+0x6a>
 80066dc:	4638      	mov	r0, r7
 80066de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e2:	bf00      	nop
 80066e4:	080082d0 	.word	0x080082d0
 80066e8:	080080fd 	.word	0x080080fd
 80066ec:	08008180 	.word	0x08008180

080066f0 <__lshift>:
 80066f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	460c      	mov	r4, r1
 80066f6:	4607      	mov	r7, r0
 80066f8:	4691      	mov	r9, r2
 80066fa:	6923      	ldr	r3, [r4, #16]
 80066fc:	6849      	ldr	r1, [r1, #4]
 80066fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006702:	68a3      	ldr	r3, [r4, #8]
 8006704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006708:	f108 0601 	add.w	r6, r8, #1
 800670c:	42b3      	cmp	r3, r6
 800670e:	db0b      	blt.n	8006728 <__lshift+0x38>
 8006710:	4638      	mov	r0, r7
 8006712:	f7ff fddf 	bl	80062d4 <_Balloc>
 8006716:	4605      	mov	r5, r0
 8006718:	b948      	cbnz	r0, 800672e <__lshift+0x3e>
 800671a:	4602      	mov	r2, r0
 800671c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006720:	4b29      	ldr	r3, [pc, #164]	; (80067c8 <__lshift+0xd8>)
 8006722:	482a      	ldr	r0, [pc, #168]	; (80067cc <__lshift+0xdc>)
 8006724:	f000 fbb4 	bl	8006e90 <__assert_func>
 8006728:	3101      	adds	r1, #1
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	e7ee      	b.n	800670c <__lshift+0x1c>
 800672e:	2300      	movs	r3, #0
 8006730:	f100 0114 	add.w	r1, r0, #20
 8006734:	f100 0210 	add.w	r2, r0, #16
 8006738:	4618      	mov	r0, r3
 800673a:	4553      	cmp	r3, sl
 800673c:	db37      	blt.n	80067ae <__lshift+0xbe>
 800673e:	6920      	ldr	r0, [r4, #16]
 8006740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006744:	f104 0314 	add.w	r3, r4, #20
 8006748:	f019 091f 	ands.w	r9, r9, #31
 800674c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006750:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006754:	d02f      	beq.n	80067b6 <__lshift+0xc6>
 8006756:	468a      	mov	sl, r1
 8006758:	f04f 0c00 	mov.w	ip, #0
 800675c:	f1c9 0e20 	rsb	lr, r9, #32
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	fa02 f209 	lsl.w	r2, r2, r9
 8006766:	ea42 020c 	orr.w	r2, r2, ip
 800676a:	f84a 2b04 	str.w	r2, [sl], #4
 800676e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006772:	4298      	cmp	r0, r3
 8006774:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006778:	d8f2      	bhi.n	8006760 <__lshift+0x70>
 800677a:	1b03      	subs	r3, r0, r4
 800677c:	3b15      	subs	r3, #21
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	3304      	adds	r3, #4
 8006784:	f104 0215 	add.w	r2, r4, #21
 8006788:	4290      	cmp	r0, r2
 800678a:	bf38      	it	cc
 800678c:	2304      	movcc	r3, #4
 800678e:	f841 c003 	str.w	ip, [r1, r3]
 8006792:	f1bc 0f00 	cmp.w	ip, #0
 8006796:	d001      	beq.n	800679c <__lshift+0xac>
 8006798:	f108 0602 	add.w	r6, r8, #2
 800679c:	3e01      	subs	r6, #1
 800679e:	4638      	mov	r0, r7
 80067a0:	4621      	mov	r1, r4
 80067a2:	612e      	str	r6, [r5, #16]
 80067a4:	f7ff fdd6 	bl	8006354 <_Bfree>
 80067a8:	4628      	mov	r0, r5
 80067aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80067b2:	3301      	adds	r3, #1
 80067b4:	e7c1      	b.n	800673a <__lshift+0x4a>
 80067b6:	3904      	subs	r1, #4
 80067b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067bc:	4298      	cmp	r0, r3
 80067be:	f841 2f04 	str.w	r2, [r1, #4]!
 80067c2:	d8f9      	bhi.n	80067b8 <__lshift+0xc8>
 80067c4:	e7ea      	b.n	800679c <__lshift+0xac>
 80067c6:	bf00      	nop
 80067c8:	0800816f 	.word	0x0800816f
 80067cc:	08008180 	.word	0x08008180

080067d0 <__mcmp>:
 80067d0:	4603      	mov	r3, r0
 80067d2:	690a      	ldr	r2, [r1, #16]
 80067d4:	6900      	ldr	r0, [r0, #16]
 80067d6:	b530      	push	{r4, r5, lr}
 80067d8:	1a80      	subs	r0, r0, r2
 80067da:	d10d      	bne.n	80067f8 <__mcmp+0x28>
 80067dc:	3314      	adds	r3, #20
 80067de:	3114      	adds	r1, #20
 80067e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80067e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80067e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067f0:	4295      	cmp	r5, r2
 80067f2:	d002      	beq.n	80067fa <__mcmp+0x2a>
 80067f4:	d304      	bcc.n	8006800 <__mcmp+0x30>
 80067f6:	2001      	movs	r0, #1
 80067f8:	bd30      	pop	{r4, r5, pc}
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	d3f4      	bcc.n	80067e8 <__mcmp+0x18>
 80067fe:	e7fb      	b.n	80067f8 <__mcmp+0x28>
 8006800:	f04f 30ff 	mov.w	r0, #4294967295
 8006804:	e7f8      	b.n	80067f8 <__mcmp+0x28>
	...

08006808 <__mdiff>:
 8006808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	460d      	mov	r5, r1
 800680e:	4607      	mov	r7, r0
 8006810:	4611      	mov	r1, r2
 8006812:	4628      	mov	r0, r5
 8006814:	4614      	mov	r4, r2
 8006816:	f7ff ffdb 	bl	80067d0 <__mcmp>
 800681a:	1e06      	subs	r6, r0, #0
 800681c:	d111      	bne.n	8006842 <__mdiff+0x3a>
 800681e:	4631      	mov	r1, r6
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff fd57 	bl	80062d4 <_Balloc>
 8006826:	4602      	mov	r2, r0
 8006828:	b928      	cbnz	r0, 8006836 <__mdiff+0x2e>
 800682a:	f240 2132 	movw	r1, #562	; 0x232
 800682e:	4b3a      	ldr	r3, [pc, #232]	; (8006918 <__mdiff+0x110>)
 8006830:	483a      	ldr	r0, [pc, #232]	; (800691c <__mdiff+0x114>)
 8006832:	f000 fb2d 	bl	8006e90 <__assert_func>
 8006836:	2301      	movs	r3, #1
 8006838:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800683c:	4610      	mov	r0, r2
 800683e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	bfa4      	itt	ge
 8006844:	4623      	movge	r3, r4
 8006846:	462c      	movge	r4, r5
 8006848:	4638      	mov	r0, r7
 800684a:	6861      	ldr	r1, [r4, #4]
 800684c:	bfa6      	itte	ge
 800684e:	461d      	movge	r5, r3
 8006850:	2600      	movge	r6, #0
 8006852:	2601      	movlt	r6, #1
 8006854:	f7ff fd3e 	bl	80062d4 <_Balloc>
 8006858:	4602      	mov	r2, r0
 800685a:	b918      	cbnz	r0, 8006864 <__mdiff+0x5c>
 800685c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006860:	4b2d      	ldr	r3, [pc, #180]	; (8006918 <__mdiff+0x110>)
 8006862:	e7e5      	b.n	8006830 <__mdiff+0x28>
 8006864:	f102 0814 	add.w	r8, r2, #20
 8006868:	46c2      	mov	sl, r8
 800686a:	f04f 0c00 	mov.w	ip, #0
 800686e:	6927      	ldr	r7, [r4, #16]
 8006870:	60c6      	str	r6, [r0, #12]
 8006872:	692e      	ldr	r6, [r5, #16]
 8006874:	f104 0014 	add.w	r0, r4, #20
 8006878:	f105 0914 	add.w	r9, r5, #20
 800687c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006880:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006884:	3410      	adds	r4, #16
 8006886:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800688a:	f859 3b04 	ldr.w	r3, [r9], #4
 800688e:	fa1f f18b 	uxth.w	r1, fp
 8006892:	448c      	add	ip, r1
 8006894:	b299      	uxth	r1, r3
 8006896:	0c1b      	lsrs	r3, r3, #16
 8006898:	ebac 0101 	sub.w	r1, ip, r1
 800689c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80068a4:	b289      	uxth	r1, r1
 80068a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80068aa:	454e      	cmp	r6, r9
 80068ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80068b0:	f84a 3b04 	str.w	r3, [sl], #4
 80068b4:	d8e7      	bhi.n	8006886 <__mdiff+0x7e>
 80068b6:	1b73      	subs	r3, r6, r5
 80068b8:	3b15      	subs	r3, #21
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	3515      	adds	r5, #21
 80068c0:	3304      	adds	r3, #4
 80068c2:	42ae      	cmp	r6, r5
 80068c4:	bf38      	it	cc
 80068c6:	2304      	movcc	r3, #4
 80068c8:	4418      	add	r0, r3
 80068ca:	4443      	add	r3, r8
 80068cc:	461e      	mov	r6, r3
 80068ce:	4605      	mov	r5, r0
 80068d0:	4575      	cmp	r5, lr
 80068d2:	d30e      	bcc.n	80068f2 <__mdiff+0xea>
 80068d4:	f10e 0103 	add.w	r1, lr, #3
 80068d8:	1a09      	subs	r1, r1, r0
 80068da:	f021 0103 	bic.w	r1, r1, #3
 80068de:	3803      	subs	r0, #3
 80068e0:	4586      	cmp	lr, r0
 80068e2:	bf38      	it	cc
 80068e4:	2100      	movcc	r1, #0
 80068e6:	4419      	add	r1, r3
 80068e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80068ec:	b18b      	cbz	r3, 8006912 <__mdiff+0x10a>
 80068ee:	6117      	str	r7, [r2, #16]
 80068f0:	e7a4      	b.n	800683c <__mdiff+0x34>
 80068f2:	f855 8b04 	ldr.w	r8, [r5], #4
 80068f6:	fa1f f188 	uxth.w	r1, r8
 80068fa:	4461      	add	r1, ip
 80068fc:	140c      	asrs	r4, r1, #16
 80068fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006902:	b289      	uxth	r1, r1
 8006904:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006908:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800690c:	f846 1b04 	str.w	r1, [r6], #4
 8006910:	e7de      	b.n	80068d0 <__mdiff+0xc8>
 8006912:	3f01      	subs	r7, #1
 8006914:	e7e8      	b.n	80068e8 <__mdiff+0xe0>
 8006916:	bf00      	nop
 8006918:	0800816f 	.word	0x0800816f
 800691c:	08008180 	.word	0x08008180

08006920 <__d2b>:
 8006920:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006924:	2101      	movs	r1, #1
 8006926:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800692a:	4690      	mov	r8, r2
 800692c:	461d      	mov	r5, r3
 800692e:	f7ff fcd1 	bl	80062d4 <_Balloc>
 8006932:	4604      	mov	r4, r0
 8006934:	b930      	cbnz	r0, 8006944 <__d2b+0x24>
 8006936:	4602      	mov	r2, r0
 8006938:	f240 310a 	movw	r1, #778	; 0x30a
 800693c:	4b24      	ldr	r3, [pc, #144]	; (80069d0 <__d2b+0xb0>)
 800693e:	4825      	ldr	r0, [pc, #148]	; (80069d4 <__d2b+0xb4>)
 8006940:	f000 faa6 	bl	8006e90 <__assert_func>
 8006944:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006948:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800694c:	bb2d      	cbnz	r5, 800699a <__d2b+0x7a>
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	f1b8 0300 	subs.w	r3, r8, #0
 8006954:	d026      	beq.n	80069a4 <__d2b+0x84>
 8006956:	4668      	mov	r0, sp
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	f7ff fd83 	bl	8006464 <__lo0bits>
 800695e:	9900      	ldr	r1, [sp, #0]
 8006960:	b1f0      	cbz	r0, 80069a0 <__d2b+0x80>
 8006962:	9a01      	ldr	r2, [sp, #4]
 8006964:	f1c0 0320 	rsb	r3, r0, #32
 8006968:	fa02 f303 	lsl.w	r3, r2, r3
 800696c:	430b      	orrs	r3, r1
 800696e:	40c2      	lsrs	r2, r0
 8006970:	6163      	str	r3, [r4, #20]
 8006972:	9201      	str	r2, [sp, #4]
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	bf14      	ite	ne
 800697a:	2102      	movne	r1, #2
 800697c:	2101      	moveq	r1, #1
 800697e:	61a3      	str	r3, [r4, #24]
 8006980:	6121      	str	r1, [r4, #16]
 8006982:	b1c5      	cbz	r5, 80069b6 <__d2b+0x96>
 8006984:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006988:	4405      	add	r5, r0
 800698a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800698e:	603d      	str	r5, [r7, #0]
 8006990:	6030      	str	r0, [r6, #0]
 8006992:	4620      	mov	r0, r4
 8006994:	b002      	add	sp, #8
 8006996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800699a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800699e:	e7d6      	b.n	800694e <__d2b+0x2e>
 80069a0:	6161      	str	r1, [r4, #20]
 80069a2:	e7e7      	b.n	8006974 <__d2b+0x54>
 80069a4:	a801      	add	r0, sp, #4
 80069a6:	f7ff fd5d 	bl	8006464 <__lo0bits>
 80069aa:	2101      	movs	r1, #1
 80069ac:	9b01      	ldr	r3, [sp, #4]
 80069ae:	6121      	str	r1, [r4, #16]
 80069b0:	6163      	str	r3, [r4, #20]
 80069b2:	3020      	adds	r0, #32
 80069b4:	e7e5      	b.n	8006982 <__d2b+0x62>
 80069b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80069ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069be:	6038      	str	r0, [r7, #0]
 80069c0:	6918      	ldr	r0, [r3, #16]
 80069c2:	f7ff fd2f 	bl	8006424 <__hi0bits>
 80069c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80069ca:	6031      	str	r1, [r6, #0]
 80069cc:	e7e1      	b.n	8006992 <__d2b+0x72>
 80069ce:	bf00      	nop
 80069d0:	0800816f 	.word	0x0800816f
 80069d4:	08008180 	.word	0x08008180

080069d8 <_calloc_r>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	fba1 5402 	umull	r5, r4, r1, r2
 80069de:	b934      	cbnz	r4, 80069ee <_calloc_r+0x16>
 80069e0:	4629      	mov	r1, r5
 80069e2:	f000 f875 	bl	8006ad0 <_malloc_r>
 80069e6:	4606      	mov	r6, r0
 80069e8:	b928      	cbnz	r0, 80069f6 <_calloc_r+0x1e>
 80069ea:	4630      	mov	r0, r6
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	220c      	movs	r2, #12
 80069f0:	2600      	movs	r6, #0
 80069f2:	6002      	str	r2, [r0, #0]
 80069f4:	e7f9      	b.n	80069ea <_calloc_r+0x12>
 80069f6:	462a      	mov	r2, r5
 80069f8:	4621      	mov	r1, r4
 80069fa:	f7fe f941 	bl	8004c80 <memset>
 80069fe:	e7f4      	b.n	80069ea <_calloc_r+0x12>

08006a00 <_free_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4605      	mov	r5, r0
 8006a04:	2900      	cmp	r1, #0
 8006a06:	d040      	beq.n	8006a8a <_free_r+0x8a>
 8006a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0c:	1f0c      	subs	r4, r1, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfb8      	it	lt
 8006a12:	18e4      	addlt	r4, r4, r3
 8006a14:	f000 fa98 	bl	8006f48 <__malloc_lock>
 8006a18:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <_free_r+0x8c>)
 8006a1a:	6813      	ldr	r3, [r2, #0]
 8006a1c:	b933      	cbnz	r3, 8006a2c <_free_r+0x2c>
 8006a1e:	6063      	str	r3, [r4, #4]
 8006a20:	6014      	str	r4, [r2, #0]
 8006a22:	4628      	mov	r0, r5
 8006a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a28:	f000 ba94 	b.w	8006f54 <__malloc_unlock>
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d908      	bls.n	8006a42 <_free_r+0x42>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	1821      	adds	r1, r4, r0
 8006a34:	428b      	cmp	r3, r1
 8006a36:	bf01      	itttt	eq
 8006a38:	6819      	ldreq	r1, [r3, #0]
 8006a3a:	685b      	ldreq	r3, [r3, #4]
 8006a3c:	1809      	addeq	r1, r1, r0
 8006a3e:	6021      	streq	r1, [r4, #0]
 8006a40:	e7ed      	b.n	8006a1e <_free_r+0x1e>
 8006a42:	461a      	mov	r2, r3
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b10b      	cbz	r3, 8006a4c <_free_r+0x4c>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d9fa      	bls.n	8006a42 <_free_r+0x42>
 8006a4c:	6811      	ldr	r1, [r2, #0]
 8006a4e:	1850      	adds	r0, r2, r1
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d10b      	bne.n	8006a6c <_free_r+0x6c>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	4401      	add	r1, r0
 8006a58:	1850      	adds	r0, r2, r1
 8006a5a:	4283      	cmp	r3, r0
 8006a5c:	6011      	str	r1, [r2, #0]
 8006a5e:	d1e0      	bne.n	8006a22 <_free_r+0x22>
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4401      	add	r1, r0
 8006a66:	6011      	str	r1, [r2, #0]
 8006a68:	6053      	str	r3, [r2, #4]
 8006a6a:	e7da      	b.n	8006a22 <_free_r+0x22>
 8006a6c:	d902      	bls.n	8006a74 <_free_r+0x74>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	e7d6      	b.n	8006a22 <_free_r+0x22>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	1821      	adds	r1, r4, r0
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf01      	itttt	eq
 8006a7c:	6819      	ldreq	r1, [r3, #0]
 8006a7e:	685b      	ldreq	r3, [r3, #4]
 8006a80:	1809      	addeq	r1, r1, r0
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	6063      	str	r3, [r4, #4]
 8006a86:	6054      	str	r4, [r2, #4]
 8006a88:	e7cb      	b.n	8006a22 <_free_r+0x22>
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20000398 	.word	0x20000398

08006a90 <sbrk_aligned>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4e0e      	ldr	r6, [pc, #56]	; (8006acc <sbrk_aligned+0x3c>)
 8006a94:	460c      	mov	r4, r1
 8006a96:	6831      	ldr	r1, [r6, #0]
 8006a98:	4605      	mov	r5, r0
 8006a9a:	b911      	cbnz	r1, 8006aa2 <sbrk_aligned+0x12>
 8006a9c:	f000 f9e8 	bl	8006e70 <_sbrk_r>
 8006aa0:	6030      	str	r0, [r6, #0]
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f9e3 	bl	8006e70 <_sbrk_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	d00a      	beq.n	8006ac4 <sbrk_aligned+0x34>
 8006aae:	1cc4      	adds	r4, r0, #3
 8006ab0:	f024 0403 	bic.w	r4, r4, #3
 8006ab4:	42a0      	cmp	r0, r4
 8006ab6:	d007      	beq.n	8006ac8 <sbrk_aligned+0x38>
 8006ab8:	1a21      	subs	r1, r4, r0
 8006aba:	4628      	mov	r0, r5
 8006abc:	f000 f9d8 	bl	8006e70 <_sbrk_r>
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d101      	bne.n	8006ac8 <sbrk_aligned+0x38>
 8006ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	2000039c 	.word	0x2000039c

08006ad0 <_malloc_r>:
 8006ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad4:	1ccd      	adds	r5, r1, #3
 8006ad6:	f025 0503 	bic.w	r5, r5, #3
 8006ada:	3508      	adds	r5, #8
 8006adc:	2d0c      	cmp	r5, #12
 8006ade:	bf38      	it	cc
 8006ae0:	250c      	movcc	r5, #12
 8006ae2:	2d00      	cmp	r5, #0
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	db01      	blt.n	8006aec <_malloc_r+0x1c>
 8006ae8:	42a9      	cmp	r1, r5
 8006aea:	d905      	bls.n	8006af8 <_malloc_r+0x28>
 8006aec:	230c      	movs	r3, #12
 8006aee:	2600      	movs	r6, #0
 8006af0:	603b      	str	r3, [r7, #0]
 8006af2:	4630      	mov	r0, r6
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	4e2e      	ldr	r6, [pc, #184]	; (8006bb4 <_malloc_r+0xe4>)
 8006afa:	f000 fa25 	bl	8006f48 <__malloc_lock>
 8006afe:	6833      	ldr	r3, [r6, #0]
 8006b00:	461c      	mov	r4, r3
 8006b02:	bb34      	cbnz	r4, 8006b52 <_malloc_r+0x82>
 8006b04:	4629      	mov	r1, r5
 8006b06:	4638      	mov	r0, r7
 8006b08:	f7ff ffc2 	bl	8006a90 <sbrk_aligned>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	4604      	mov	r4, r0
 8006b10:	d14d      	bne.n	8006bae <_malloc_r+0xde>
 8006b12:	6834      	ldr	r4, [r6, #0]
 8006b14:	4626      	mov	r6, r4
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	d140      	bne.n	8006b9c <_malloc_r+0xcc>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4638      	mov	r0, r7
 8006b20:	eb04 0803 	add.w	r8, r4, r3
 8006b24:	f000 f9a4 	bl	8006e70 <_sbrk_r>
 8006b28:	4580      	cmp	r8, r0
 8006b2a:	d13a      	bne.n	8006ba2 <_malloc_r+0xd2>
 8006b2c:	6821      	ldr	r1, [r4, #0]
 8006b2e:	3503      	adds	r5, #3
 8006b30:	1a6d      	subs	r5, r5, r1
 8006b32:	f025 0503 	bic.w	r5, r5, #3
 8006b36:	3508      	adds	r5, #8
 8006b38:	2d0c      	cmp	r5, #12
 8006b3a:	bf38      	it	cc
 8006b3c:	250c      	movcc	r5, #12
 8006b3e:	4638      	mov	r0, r7
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7ff ffa5 	bl	8006a90 <sbrk_aligned>
 8006b46:	3001      	adds	r0, #1
 8006b48:	d02b      	beq.n	8006ba2 <_malloc_r+0xd2>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	442b      	add	r3, r5
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	e00e      	b.n	8006b70 <_malloc_r+0xa0>
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	1b52      	subs	r2, r2, r5
 8006b56:	d41e      	bmi.n	8006b96 <_malloc_r+0xc6>
 8006b58:	2a0b      	cmp	r2, #11
 8006b5a:	d916      	bls.n	8006b8a <_malloc_r+0xba>
 8006b5c:	1961      	adds	r1, r4, r5
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	6025      	str	r5, [r4, #0]
 8006b62:	bf18      	it	ne
 8006b64:	6059      	strne	r1, [r3, #4]
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	bf08      	it	eq
 8006b6a:	6031      	streq	r1, [r6, #0]
 8006b6c:	5162      	str	r2, [r4, r5]
 8006b6e:	604b      	str	r3, [r1, #4]
 8006b70:	4638      	mov	r0, r7
 8006b72:	f104 060b 	add.w	r6, r4, #11
 8006b76:	f000 f9ed 	bl	8006f54 <__malloc_unlock>
 8006b7a:	f026 0607 	bic.w	r6, r6, #7
 8006b7e:	1d23      	adds	r3, r4, #4
 8006b80:	1af2      	subs	r2, r6, r3
 8006b82:	d0b6      	beq.n	8006af2 <_malloc_r+0x22>
 8006b84:	1b9b      	subs	r3, r3, r6
 8006b86:	50a3      	str	r3, [r4, r2]
 8006b88:	e7b3      	b.n	8006af2 <_malloc_r+0x22>
 8006b8a:	6862      	ldr	r2, [r4, #4]
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	bf0c      	ite	eq
 8006b90:	6032      	streq	r2, [r6, #0]
 8006b92:	605a      	strne	r2, [r3, #4]
 8006b94:	e7ec      	b.n	8006b70 <_malloc_r+0xa0>
 8006b96:	4623      	mov	r3, r4
 8006b98:	6864      	ldr	r4, [r4, #4]
 8006b9a:	e7b2      	b.n	8006b02 <_malloc_r+0x32>
 8006b9c:	4634      	mov	r4, r6
 8006b9e:	6876      	ldr	r6, [r6, #4]
 8006ba0:	e7b9      	b.n	8006b16 <_malloc_r+0x46>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	f000 f9d4 	bl	8006f54 <__malloc_unlock>
 8006bac:	e7a1      	b.n	8006af2 <_malloc_r+0x22>
 8006bae:	6025      	str	r5, [r4, #0]
 8006bb0:	e7de      	b.n	8006b70 <_malloc_r+0xa0>
 8006bb2:	bf00      	nop
 8006bb4:	20000398 	.word	0x20000398

08006bb8 <__ssputs_r>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	688e      	ldr	r6, [r1, #8]
 8006bbe:	4682      	mov	sl, r0
 8006bc0:	429e      	cmp	r6, r3
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	4690      	mov	r8, r2
 8006bc6:	461f      	mov	r7, r3
 8006bc8:	d838      	bhi.n	8006c3c <__ssputs_r+0x84>
 8006bca:	898a      	ldrh	r2, [r1, #12]
 8006bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bd0:	d032      	beq.n	8006c38 <__ssputs_r+0x80>
 8006bd2:	6825      	ldr	r5, [r4, #0]
 8006bd4:	6909      	ldr	r1, [r1, #16]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	eba5 0901 	sub.w	r9, r5, r1
 8006bdc:	6965      	ldr	r5, [r4, #20]
 8006bde:	444b      	add	r3, r9
 8006be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006be8:	106d      	asrs	r5, r5, #1
 8006bea:	429d      	cmp	r5, r3
 8006bec:	bf38      	it	cc
 8006bee:	461d      	movcc	r5, r3
 8006bf0:	0553      	lsls	r3, r2, #21
 8006bf2:	d531      	bpl.n	8006c58 <__ssputs_r+0xa0>
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	f7ff ff6b 	bl	8006ad0 <_malloc_r>
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	b950      	cbnz	r0, 8006c14 <__ssputs_r+0x5c>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	f8ca 3000 	str.w	r3, [sl]
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c14:	464a      	mov	r2, r9
 8006c16:	6921      	ldr	r1, [r4, #16]
 8006c18:	f7ff fb4e 	bl	80062b8 <memcpy>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	6126      	str	r6, [r4, #16]
 8006c2a:	444e      	add	r6, r9
 8006c2c:	6026      	str	r6, [r4, #0]
 8006c2e:	463e      	mov	r6, r7
 8006c30:	6165      	str	r5, [r4, #20]
 8006c32:	eba5 0509 	sub.w	r5, r5, r9
 8006c36:	60a5      	str	r5, [r4, #8]
 8006c38:	42be      	cmp	r6, r7
 8006c3a:	d900      	bls.n	8006c3e <__ssputs_r+0x86>
 8006c3c:	463e      	mov	r6, r7
 8006c3e:	4632      	mov	r2, r6
 8006c40:	4641      	mov	r1, r8
 8006c42:	6820      	ldr	r0, [r4, #0]
 8006c44:	f000 f966 	bl	8006f14 <memmove>
 8006c48:	68a3      	ldr	r3, [r4, #8]
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	1b9b      	subs	r3, r3, r6
 8006c4e:	60a3      	str	r3, [r4, #8]
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	4433      	add	r3, r6
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	e7db      	b.n	8006c10 <__ssputs_r+0x58>
 8006c58:	462a      	mov	r2, r5
 8006c5a:	f000 f981 	bl	8006f60 <_realloc_r>
 8006c5e:	4606      	mov	r6, r0
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d1e1      	bne.n	8006c28 <__ssputs_r+0x70>
 8006c64:	4650      	mov	r0, sl
 8006c66:	6921      	ldr	r1, [r4, #16]
 8006c68:	f7ff feca 	bl	8006a00 <_free_r>
 8006c6c:	e7c7      	b.n	8006bfe <__ssputs_r+0x46>
	...

08006c70 <_svfiprintf_r>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	4698      	mov	r8, r3
 8006c76:	898b      	ldrh	r3, [r1, #12]
 8006c78:	4607      	mov	r7, r0
 8006c7a:	061b      	lsls	r3, r3, #24
 8006c7c:	460d      	mov	r5, r1
 8006c7e:	4614      	mov	r4, r2
 8006c80:	b09d      	sub	sp, #116	; 0x74
 8006c82:	d50e      	bpl.n	8006ca2 <_svfiprintf_r+0x32>
 8006c84:	690b      	ldr	r3, [r1, #16]
 8006c86:	b963      	cbnz	r3, 8006ca2 <_svfiprintf_r+0x32>
 8006c88:	2140      	movs	r1, #64	; 0x40
 8006c8a:	f7ff ff21 	bl	8006ad0 <_malloc_r>
 8006c8e:	6028      	str	r0, [r5, #0]
 8006c90:	6128      	str	r0, [r5, #16]
 8006c92:	b920      	cbnz	r0, 8006c9e <_svfiprintf_r+0x2e>
 8006c94:	230c      	movs	r3, #12
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	e0d1      	b.n	8006e42 <_svfiprintf_r+0x1d2>
 8006c9e:	2340      	movs	r3, #64	; 0x40
 8006ca0:	616b      	str	r3, [r5, #20]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca6:	2320      	movs	r3, #32
 8006ca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cac:	2330      	movs	r3, #48	; 0x30
 8006cae:	f04f 0901 	mov.w	r9, #1
 8006cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e5c <_svfiprintf_r+0x1ec>
 8006cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cbe:	4623      	mov	r3, r4
 8006cc0:	469a      	mov	sl, r3
 8006cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cc6:	b10a      	cbz	r2, 8006ccc <_svfiprintf_r+0x5c>
 8006cc8:	2a25      	cmp	r2, #37	; 0x25
 8006cca:	d1f9      	bne.n	8006cc0 <_svfiprintf_r+0x50>
 8006ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8006cd0:	d00b      	beq.n	8006cea <_svfiprintf_r+0x7a>
 8006cd2:	465b      	mov	r3, fp
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f7ff ff6d 	bl	8006bb8 <__ssputs_r>
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f000 80aa 	beq.w	8006e38 <_svfiprintf_r+0x1c8>
 8006ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ce6:	445a      	add	r2, fp
 8006ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8006cea:	f89a 3000 	ldrb.w	r3, [sl]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80a2 	beq.w	8006e38 <_svfiprintf_r+0x1c8>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cfe:	f10a 0a01 	add.w	sl, sl, #1
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	9307      	str	r3, [sp, #28]
 8006d06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d0a:	931a      	str	r3, [sp, #104]	; 0x68
 8006d0c:	4654      	mov	r4, sl
 8006d0e:	2205      	movs	r2, #5
 8006d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d14:	4851      	ldr	r0, [pc, #324]	; (8006e5c <_svfiprintf_r+0x1ec>)
 8006d16:	f7ff fac1 	bl	800629c <memchr>
 8006d1a:	9a04      	ldr	r2, [sp, #16]
 8006d1c:	b9d8      	cbnz	r0, 8006d56 <_svfiprintf_r+0xe6>
 8006d1e:	06d0      	lsls	r0, r2, #27
 8006d20:	bf44      	itt	mi
 8006d22:	2320      	movmi	r3, #32
 8006d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d28:	0711      	lsls	r1, r2, #28
 8006d2a:	bf44      	itt	mi
 8006d2c:	232b      	movmi	r3, #43	; 0x2b
 8006d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d32:	f89a 3000 	ldrb.w	r3, [sl]
 8006d36:	2b2a      	cmp	r3, #42	; 0x2a
 8006d38:	d015      	beq.n	8006d66 <_svfiprintf_r+0xf6>
 8006d3a:	4654      	mov	r4, sl
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f04f 0c0a 	mov.w	ip, #10
 8006d42:	9a07      	ldr	r2, [sp, #28]
 8006d44:	4621      	mov	r1, r4
 8006d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d4a:	3b30      	subs	r3, #48	; 0x30
 8006d4c:	2b09      	cmp	r3, #9
 8006d4e:	d94e      	bls.n	8006dee <_svfiprintf_r+0x17e>
 8006d50:	b1b0      	cbz	r0, 8006d80 <_svfiprintf_r+0x110>
 8006d52:	9207      	str	r2, [sp, #28]
 8006d54:	e014      	b.n	8006d80 <_svfiprintf_r+0x110>
 8006d56:	eba0 0308 	sub.w	r3, r0, r8
 8006d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	46a2      	mov	sl, r4
 8006d62:	9304      	str	r3, [sp, #16]
 8006d64:	e7d2      	b.n	8006d0c <_svfiprintf_r+0x9c>
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	1d19      	adds	r1, r3, #4
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	9103      	str	r1, [sp, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bfbb      	ittet	lt
 8006d72:	425b      	neglt	r3, r3
 8006d74:	f042 0202 	orrlt.w	r2, r2, #2
 8006d78:	9307      	strge	r3, [sp, #28]
 8006d7a:	9307      	strlt	r3, [sp, #28]
 8006d7c:	bfb8      	it	lt
 8006d7e:	9204      	strlt	r2, [sp, #16]
 8006d80:	7823      	ldrb	r3, [r4, #0]
 8006d82:	2b2e      	cmp	r3, #46	; 0x2e
 8006d84:	d10c      	bne.n	8006da0 <_svfiprintf_r+0x130>
 8006d86:	7863      	ldrb	r3, [r4, #1]
 8006d88:	2b2a      	cmp	r3, #42	; 0x2a
 8006d8a:	d135      	bne.n	8006df8 <_svfiprintf_r+0x188>
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	3402      	adds	r4, #2
 8006d90:	1d1a      	adds	r2, r3, #4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	9203      	str	r2, [sp, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bfb8      	it	lt
 8006d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d9e:	9305      	str	r3, [sp, #20]
 8006da0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006e60 <_svfiprintf_r+0x1f0>
 8006da4:	2203      	movs	r2, #3
 8006da6:	4650      	mov	r0, sl
 8006da8:	7821      	ldrb	r1, [r4, #0]
 8006daa:	f7ff fa77 	bl	800629c <memchr>
 8006dae:	b140      	cbz	r0, 8006dc2 <_svfiprintf_r+0x152>
 8006db0:	2340      	movs	r3, #64	; 0x40
 8006db2:	eba0 000a 	sub.w	r0, r0, sl
 8006db6:	fa03 f000 	lsl.w	r0, r3, r0
 8006dba:	9b04      	ldr	r3, [sp, #16]
 8006dbc:	3401      	adds	r4, #1
 8006dbe:	4303      	orrs	r3, r0
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc6:	2206      	movs	r2, #6
 8006dc8:	4826      	ldr	r0, [pc, #152]	; (8006e64 <_svfiprintf_r+0x1f4>)
 8006dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dce:	f7ff fa65 	bl	800629c <memchr>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d038      	beq.n	8006e48 <_svfiprintf_r+0x1d8>
 8006dd6:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <_svfiprintf_r+0x1f8>)
 8006dd8:	bb1b      	cbnz	r3, 8006e22 <_svfiprintf_r+0x1b2>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	3307      	adds	r3, #7
 8006dde:	f023 0307 	bic.w	r3, r3, #7
 8006de2:	3308      	adds	r3, #8
 8006de4:	9303      	str	r3, [sp, #12]
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	4433      	add	r3, r6
 8006dea:	9309      	str	r3, [sp, #36]	; 0x24
 8006dec:	e767      	b.n	8006cbe <_svfiprintf_r+0x4e>
 8006dee:	460c      	mov	r4, r1
 8006df0:	2001      	movs	r0, #1
 8006df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006df6:	e7a5      	b.n	8006d44 <_svfiprintf_r+0xd4>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f04f 0c0a 	mov.w	ip, #10
 8006dfe:	4619      	mov	r1, r3
 8006e00:	3401      	adds	r4, #1
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	4620      	mov	r0, r4
 8006e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e0a:	3a30      	subs	r2, #48	; 0x30
 8006e0c:	2a09      	cmp	r2, #9
 8006e0e:	d903      	bls.n	8006e18 <_svfiprintf_r+0x1a8>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0c5      	beq.n	8006da0 <_svfiprintf_r+0x130>
 8006e14:	9105      	str	r1, [sp, #20]
 8006e16:	e7c3      	b.n	8006da0 <_svfiprintf_r+0x130>
 8006e18:	4604      	mov	r4, r0
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e20:	e7f0      	b.n	8006e04 <_svfiprintf_r+0x194>
 8006e22:	ab03      	add	r3, sp, #12
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	462a      	mov	r2, r5
 8006e28:	4638      	mov	r0, r7
 8006e2a:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <_svfiprintf_r+0x1fc>)
 8006e2c:	a904      	add	r1, sp, #16
 8006e2e:	f7fd ffcd 	bl	8004dcc <_printf_float>
 8006e32:	1c42      	adds	r2, r0, #1
 8006e34:	4606      	mov	r6, r0
 8006e36:	d1d6      	bne.n	8006de6 <_svfiprintf_r+0x176>
 8006e38:	89ab      	ldrh	r3, [r5, #12]
 8006e3a:	065b      	lsls	r3, r3, #25
 8006e3c:	f53f af2c 	bmi.w	8006c98 <_svfiprintf_r+0x28>
 8006e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e42:	b01d      	add	sp, #116	; 0x74
 8006e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e48:	ab03      	add	r3, sp, #12
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	462a      	mov	r2, r5
 8006e4e:	4638      	mov	r0, r7
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <_svfiprintf_r+0x1fc>)
 8006e52:	a904      	add	r1, sp, #16
 8006e54:	f7fe fa56 	bl	8005304 <_printf_i>
 8006e58:	e7eb      	b.n	8006e32 <_svfiprintf_r+0x1c2>
 8006e5a:	bf00      	nop
 8006e5c:	080082dc 	.word	0x080082dc
 8006e60:	080082e2 	.word	0x080082e2
 8006e64:	080082e6 	.word	0x080082e6
 8006e68:	08004dcd 	.word	0x08004dcd
 8006e6c:	08006bb9 	.word	0x08006bb9

08006e70 <_sbrk_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	2300      	movs	r3, #0
 8006e74:	4d05      	ldr	r5, [pc, #20]	; (8006e8c <_sbrk_r+0x1c>)
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	f7fb fb14 	bl	80024a8 <_sbrk>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_sbrk_r+0x1a>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_sbrk_r+0x1a>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	200003a0 	.word	0x200003a0

08006e90 <__assert_func>:
 8006e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e92:	4614      	mov	r4, r2
 8006e94:	461a      	mov	r2, r3
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <__assert_func+0x2c>)
 8006e98:	4605      	mov	r5, r0
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68d8      	ldr	r0, [r3, #12]
 8006e9e:	b14c      	cbz	r4, 8006eb4 <__assert_func+0x24>
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <__assert_func+0x30>)
 8006ea2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ea6:	9100      	str	r1, [sp, #0]
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	4906      	ldr	r1, [pc, #24]	; (8006ec4 <__assert_func+0x34>)
 8006eac:	f000 f80e 	bl	8006ecc <fiprintf>
 8006eb0:	f000 faaa 	bl	8007408 <abort>
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <__assert_func+0x38>)
 8006eb6:	461c      	mov	r4, r3
 8006eb8:	e7f3      	b.n	8006ea2 <__assert_func+0x12>
 8006eba:	bf00      	nop
 8006ebc:	20000010 	.word	0x20000010
 8006ec0:	080082ed 	.word	0x080082ed
 8006ec4:	080082fa 	.word	0x080082fa
 8006ec8:	08008328 	.word	0x08008328

08006ecc <fiprintf>:
 8006ecc:	b40e      	push	{r1, r2, r3}
 8006ece:	b503      	push	{r0, r1, lr}
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	ab03      	add	r3, sp, #12
 8006ed4:	4805      	ldr	r0, [pc, #20]	; (8006eec <fiprintf+0x20>)
 8006ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eda:	6800      	ldr	r0, [r0, #0]
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	f000 f895 	bl	800700c <_vfiprintf_r>
 8006ee2:	b002      	add	sp, #8
 8006ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee8:	b003      	add	sp, #12
 8006eea:	4770      	bx	lr
 8006eec:	20000010 	.word	0x20000010

08006ef0 <__ascii_mbtowc>:
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	b901      	cbnz	r1, 8006ef6 <__ascii_mbtowc+0x6>
 8006ef4:	a901      	add	r1, sp, #4
 8006ef6:	b142      	cbz	r2, 8006f0a <__ascii_mbtowc+0x1a>
 8006ef8:	b14b      	cbz	r3, 8006f0e <__ascii_mbtowc+0x1e>
 8006efa:	7813      	ldrb	r3, [r2, #0]
 8006efc:	600b      	str	r3, [r1, #0]
 8006efe:	7812      	ldrb	r2, [r2, #0]
 8006f00:	1e10      	subs	r0, r2, #0
 8006f02:	bf18      	it	ne
 8006f04:	2001      	movne	r0, #1
 8006f06:	b002      	add	sp, #8
 8006f08:	4770      	bx	lr
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	e7fb      	b.n	8006f06 <__ascii_mbtowc+0x16>
 8006f0e:	f06f 0001 	mvn.w	r0, #1
 8006f12:	e7f8      	b.n	8006f06 <__ascii_mbtowc+0x16>

08006f14 <memmove>:
 8006f14:	4288      	cmp	r0, r1
 8006f16:	b510      	push	{r4, lr}
 8006f18:	eb01 0402 	add.w	r4, r1, r2
 8006f1c:	d902      	bls.n	8006f24 <memmove+0x10>
 8006f1e:	4284      	cmp	r4, r0
 8006f20:	4623      	mov	r3, r4
 8006f22:	d807      	bhi.n	8006f34 <memmove+0x20>
 8006f24:	1e43      	subs	r3, r0, #1
 8006f26:	42a1      	cmp	r1, r4
 8006f28:	d008      	beq.n	8006f3c <memmove+0x28>
 8006f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f32:	e7f8      	b.n	8006f26 <memmove+0x12>
 8006f34:	4601      	mov	r1, r0
 8006f36:	4402      	add	r2, r0
 8006f38:	428a      	cmp	r2, r1
 8006f3a:	d100      	bne.n	8006f3e <memmove+0x2a>
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f46:	e7f7      	b.n	8006f38 <memmove+0x24>

08006f48 <__malloc_lock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__malloc_lock+0x8>)
 8006f4a:	f000 bc19 	b.w	8007780 <__retarget_lock_acquire_recursive>
 8006f4e:	bf00      	nop
 8006f50:	200003a4 	.word	0x200003a4

08006f54 <__malloc_unlock>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__malloc_unlock+0x8>)
 8006f56:	f000 bc14 	b.w	8007782 <__retarget_lock_release_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	200003a4 	.word	0x200003a4

08006f60 <_realloc_r>:
 8006f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f64:	4680      	mov	r8, r0
 8006f66:	4614      	mov	r4, r2
 8006f68:	460e      	mov	r6, r1
 8006f6a:	b921      	cbnz	r1, 8006f76 <_realloc_r+0x16>
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	f7ff bdad 	b.w	8006ad0 <_malloc_r>
 8006f76:	b92a      	cbnz	r2, 8006f84 <_realloc_r+0x24>
 8006f78:	f7ff fd42 	bl	8006a00 <_free_r>
 8006f7c:	4625      	mov	r5, r4
 8006f7e:	4628      	mov	r0, r5
 8006f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f84:	f000 fc64 	bl	8007850 <_malloc_usable_size_r>
 8006f88:	4284      	cmp	r4, r0
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	d802      	bhi.n	8006f94 <_realloc_r+0x34>
 8006f8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f92:	d812      	bhi.n	8006fba <_realloc_r+0x5a>
 8006f94:	4621      	mov	r1, r4
 8006f96:	4640      	mov	r0, r8
 8006f98:	f7ff fd9a 	bl	8006ad0 <_malloc_r>
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d0ed      	beq.n	8006f7e <_realloc_r+0x1e>
 8006fa2:	42bc      	cmp	r4, r7
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	bf28      	it	cs
 8006faa:	463a      	movcs	r2, r7
 8006fac:	f7ff f984 	bl	80062b8 <memcpy>
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f7ff fd24 	bl	8006a00 <_free_r>
 8006fb8:	e7e1      	b.n	8006f7e <_realloc_r+0x1e>
 8006fba:	4635      	mov	r5, r6
 8006fbc:	e7df      	b.n	8006f7e <_realloc_r+0x1e>

08006fbe <__sfputc_r>:
 8006fbe:	6893      	ldr	r3, [r2, #8]
 8006fc0:	b410      	push	{r4}
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	6093      	str	r3, [r2, #8]
 8006fc8:	da07      	bge.n	8006fda <__sfputc_r+0x1c>
 8006fca:	6994      	ldr	r4, [r2, #24]
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	db01      	blt.n	8006fd4 <__sfputc_r+0x16>
 8006fd0:	290a      	cmp	r1, #10
 8006fd2:	d102      	bne.n	8006fda <__sfputc_r+0x1c>
 8006fd4:	bc10      	pop	{r4}
 8006fd6:	f000 b949 	b.w	800726c <__swbuf_r>
 8006fda:	6813      	ldr	r3, [r2, #0]
 8006fdc:	1c58      	adds	r0, r3, #1
 8006fde:	6010      	str	r0, [r2, #0]
 8006fe0:	7019      	strb	r1, [r3, #0]
 8006fe2:	4608      	mov	r0, r1
 8006fe4:	bc10      	pop	{r4}
 8006fe6:	4770      	bx	lr

08006fe8 <__sfputs_r>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	4614      	mov	r4, r2
 8006ff0:	18d5      	adds	r5, r2, r3
 8006ff2:	42ac      	cmp	r4, r5
 8006ff4:	d101      	bne.n	8006ffa <__sfputs_r+0x12>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e007      	b.n	800700a <__sfputs_r+0x22>
 8006ffa:	463a      	mov	r2, r7
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007002:	f7ff ffdc 	bl	8006fbe <__sfputc_r>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	d1f3      	bne.n	8006ff2 <__sfputs_r+0xa>
 800700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800700c <_vfiprintf_r>:
 800700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	460d      	mov	r5, r1
 8007012:	4614      	mov	r4, r2
 8007014:	4698      	mov	r8, r3
 8007016:	4606      	mov	r6, r0
 8007018:	b09d      	sub	sp, #116	; 0x74
 800701a:	b118      	cbz	r0, 8007024 <_vfiprintf_r+0x18>
 800701c:	6983      	ldr	r3, [r0, #24]
 800701e:	b90b      	cbnz	r3, 8007024 <_vfiprintf_r+0x18>
 8007020:	f000 fb10 	bl	8007644 <__sinit>
 8007024:	4b89      	ldr	r3, [pc, #548]	; (800724c <_vfiprintf_r+0x240>)
 8007026:	429d      	cmp	r5, r3
 8007028:	d11b      	bne.n	8007062 <_vfiprintf_r+0x56>
 800702a:	6875      	ldr	r5, [r6, #4]
 800702c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800702e:	07d9      	lsls	r1, r3, #31
 8007030:	d405      	bmi.n	800703e <_vfiprintf_r+0x32>
 8007032:	89ab      	ldrh	r3, [r5, #12]
 8007034:	059a      	lsls	r2, r3, #22
 8007036:	d402      	bmi.n	800703e <_vfiprintf_r+0x32>
 8007038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800703a:	f000 fba1 	bl	8007780 <__retarget_lock_acquire_recursive>
 800703e:	89ab      	ldrh	r3, [r5, #12]
 8007040:	071b      	lsls	r3, r3, #28
 8007042:	d501      	bpl.n	8007048 <_vfiprintf_r+0x3c>
 8007044:	692b      	ldr	r3, [r5, #16]
 8007046:	b9eb      	cbnz	r3, 8007084 <_vfiprintf_r+0x78>
 8007048:	4629      	mov	r1, r5
 800704a:	4630      	mov	r0, r6
 800704c:	f000 f96e 	bl	800732c <__swsetup_r>
 8007050:	b1c0      	cbz	r0, 8007084 <_vfiprintf_r+0x78>
 8007052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007054:	07dc      	lsls	r4, r3, #31
 8007056:	d50e      	bpl.n	8007076 <_vfiprintf_r+0x6a>
 8007058:	f04f 30ff 	mov.w	r0, #4294967295
 800705c:	b01d      	add	sp, #116	; 0x74
 800705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007062:	4b7b      	ldr	r3, [pc, #492]	; (8007250 <_vfiprintf_r+0x244>)
 8007064:	429d      	cmp	r5, r3
 8007066:	d101      	bne.n	800706c <_vfiprintf_r+0x60>
 8007068:	68b5      	ldr	r5, [r6, #8]
 800706a:	e7df      	b.n	800702c <_vfiprintf_r+0x20>
 800706c:	4b79      	ldr	r3, [pc, #484]	; (8007254 <_vfiprintf_r+0x248>)
 800706e:	429d      	cmp	r5, r3
 8007070:	bf08      	it	eq
 8007072:	68f5      	ldreq	r5, [r6, #12]
 8007074:	e7da      	b.n	800702c <_vfiprintf_r+0x20>
 8007076:	89ab      	ldrh	r3, [r5, #12]
 8007078:	0598      	lsls	r0, r3, #22
 800707a:	d4ed      	bmi.n	8007058 <_vfiprintf_r+0x4c>
 800707c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800707e:	f000 fb80 	bl	8007782 <__retarget_lock_release_recursive>
 8007082:	e7e9      	b.n	8007058 <_vfiprintf_r+0x4c>
 8007084:	2300      	movs	r3, #0
 8007086:	9309      	str	r3, [sp, #36]	; 0x24
 8007088:	2320      	movs	r3, #32
 800708a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800708e:	2330      	movs	r3, #48	; 0x30
 8007090:	f04f 0901 	mov.w	r9, #1
 8007094:	f8cd 800c 	str.w	r8, [sp, #12]
 8007098:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007258 <_vfiprintf_r+0x24c>
 800709c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070a0:	4623      	mov	r3, r4
 80070a2:	469a      	mov	sl, r3
 80070a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a8:	b10a      	cbz	r2, 80070ae <_vfiprintf_r+0xa2>
 80070aa:	2a25      	cmp	r2, #37	; 0x25
 80070ac:	d1f9      	bne.n	80070a2 <_vfiprintf_r+0x96>
 80070ae:	ebba 0b04 	subs.w	fp, sl, r4
 80070b2:	d00b      	beq.n	80070cc <_vfiprintf_r+0xc0>
 80070b4:	465b      	mov	r3, fp
 80070b6:	4622      	mov	r2, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7ff ff94 	bl	8006fe8 <__sfputs_r>
 80070c0:	3001      	adds	r0, #1
 80070c2:	f000 80aa 	beq.w	800721a <_vfiprintf_r+0x20e>
 80070c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070c8:	445a      	add	r2, fp
 80070ca:	9209      	str	r2, [sp, #36]	; 0x24
 80070cc:	f89a 3000 	ldrb.w	r3, [sl]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80a2 	beq.w	800721a <_vfiprintf_r+0x20e>
 80070d6:	2300      	movs	r3, #0
 80070d8:	f04f 32ff 	mov.w	r2, #4294967295
 80070dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e0:	f10a 0a01 	add.w	sl, sl, #1
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	9307      	str	r3, [sp, #28]
 80070e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ec:	931a      	str	r3, [sp, #104]	; 0x68
 80070ee:	4654      	mov	r4, sl
 80070f0:	2205      	movs	r2, #5
 80070f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f6:	4858      	ldr	r0, [pc, #352]	; (8007258 <_vfiprintf_r+0x24c>)
 80070f8:	f7ff f8d0 	bl	800629c <memchr>
 80070fc:	9a04      	ldr	r2, [sp, #16]
 80070fe:	b9d8      	cbnz	r0, 8007138 <_vfiprintf_r+0x12c>
 8007100:	06d1      	lsls	r1, r2, #27
 8007102:	bf44      	itt	mi
 8007104:	2320      	movmi	r3, #32
 8007106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800710a:	0713      	lsls	r3, r2, #28
 800710c:	bf44      	itt	mi
 800710e:	232b      	movmi	r3, #43	; 0x2b
 8007110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007114:	f89a 3000 	ldrb.w	r3, [sl]
 8007118:	2b2a      	cmp	r3, #42	; 0x2a
 800711a:	d015      	beq.n	8007148 <_vfiprintf_r+0x13c>
 800711c:	4654      	mov	r4, sl
 800711e:	2000      	movs	r0, #0
 8007120:	f04f 0c0a 	mov.w	ip, #10
 8007124:	9a07      	ldr	r2, [sp, #28]
 8007126:	4621      	mov	r1, r4
 8007128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800712c:	3b30      	subs	r3, #48	; 0x30
 800712e:	2b09      	cmp	r3, #9
 8007130:	d94e      	bls.n	80071d0 <_vfiprintf_r+0x1c4>
 8007132:	b1b0      	cbz	r0, 8007162 <_vfiprintf_r+0x156>
 8007134:	9207      	str	r2, [sp, #28]
 8007136:	e014      	b.n	8007162 <_vfiprintf_r+0x156>
 8007138:	eba0 0308 	sub.w	r3, r0, r8
 800713c:	fa09 f303 	lsl.w	r3, r9, r3
 8007140:	4313      	orrs	r3, r2
 8007142:	46a2      	mov	sl, r4
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	e7d2      	b.n	80070ee <_vfiprintf_r+0xe2>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	1d19      	adds	r1, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	9103      	str	r1, [sp, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	bfbb      	ittet	lt
 8007154:	425b      	neglt	r3, r3
 8007156:	f042 0202 	orrlt.w	r2, r2, #2
 800715a:	9307      	strge	r3, [sp, #28]
 800715c:	9307      	strlt	r3, [sp, #28]
 800715e:	bfb8      	it	lt
 8007160:	9204      	strlt	r2, [sp, #16]
 8007162:	7823      	ldrb	r3, [r4, #0]
 8007164:	2b2e      	cmp	r3, #46	; 0x2e
 8007166:	d10c      	bne.n	8007182 <_vfiprintf_r+0x176>
 8007168:	7863      	ldrb	r3, [r4, #1]
 800716a:	2b2a      	cmp	r3, #42	; 0x2a
 800716c:	d135      	bne.n	80071da <_vfiprintf_r+0x1ce>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	3402      	adds	r4, #2
 8007172:	1d1a      	adds	r2, r3, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	9203      	str	r2, [sp, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfb8      	it	lt
 800717c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007180:	9305      	str	r3, [sp, #20]
 8007182:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800725c <_vfiprintf_r+0x250>
 8007186:	2203      	movs	r2, #3
 8007188:	4650      	mov	r0, sl
 800718a:	7821      	ldrb	r1, [r4, #0]
 800718c:	f7ff f886 	bl	800629c <memchr>
 8007190:	b140      	cbz	r0, 80071a4 <_vfiprintf_r+0x198>
 8007192:	2340      	movs	r3, #64	; 0x40
 8007194:	eba0 000a 	sub.w	r0, r0, sl
 8007198:	fa03 f000 	lsl.w	r0, r3, r0
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	3401      	adds	r4, #1
 80071a0:	4303      	orrs	r3, r0
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a8:	2206      	movs	r2, #6
 80071aa:	482d      	ldr	r0, [pc, #180]	; (8007260 <_vfiprintf_r+0x254>)
 80071ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071b0:	f7ff f874 	bl	800629c <memchr>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d03f      	beq.n	8007238 <_vfiprintf_r+0x22c>
 80071b8:	4b2a      	ldr	r3, [pc, #168]	; (8007264 <_vfiprintf_r+0x258>)
 80071ba:	bb1b      	cbnz	r3, 8007204 <_vfiprintf_r+0x1f8>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	3307      	adds	r3, #7
 80071c0:	f023 0307 	bic.w	r3, r3, #7
 80071c4:	3308      	adds	r3, #8
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ca:	443b      	add	r3, r7
 80071cc:	9309      	str	r3, [sp, #36]	; 0x24
 80071ce:	e767      	b.n	80070a0 <_vfiprintf_r+0x94>
 80071d0:	460c      	mov	r4, r1
 80071d2:	2001      	movs	r0, #1
 80071d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d8:	e7a5      	b.n	8007126 <_vfiprintf_r+0x11a>
 80071da:	2300      	movs	r3, #0
 80071dc:	f04f 0c0a 	mov.w	ip, #10
 80071e0:	4619      	mov	r1, r3
 80071e2:	3401      	adds	r4, #1
 80071e4:	9305      	str	r3, [sp, #20]
 80071e6:	4620      	mov	r0, r4
 80071e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ec:	3a30      	subs	r2, #48	; 0x30
 80071ee:	2a09      	cmp	r2, #9
 80071f0:	d903      	bls.n	80071fa <_vfiprintf_r+0x1ee>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0c5      	beq.n	8007182 <_vfiprintf_r+0x176>
 80071f6:	9105      	str	r1, [sp, #20]
 80071f8:	e7c3      	b.n	8007182 <_vfiprintf_r+0x176>
 80071fa:	4604      	mov	r4, r0
 80071fc:	2301      	movs	r3, #1
 80071fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007202:	e7f0      	b.n	80071e6 <_vfiprintf_r+0x1da>
 8007204:	ab03      	add	r3, sp, #12
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	462a      	mov	r2, r5
 800720a:	4630      	mov	r0, r6
 800720c:	4b16      	ldr	r3, [pc, #88]	; (8007268 <_vfiprintf_r+0x25c>)
 800720e:	a904      	add	r1, sp, #16
 8007210:	f7fd fddc 	bl	8004dcc <_printf_float>
 8007214:	4607      	mov	r7, r0
 8007216:	1c78      	adds	r0, r7, #1
 8007218:	d1d6      	bne.n	80071c8 <_vfiprintf_r+0x1bc>
 800721a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800721c:	07d9      	lsls	r1, r3, #31
 800721e:	d405      	bmi.n	800722c <_vfiprintf_r+0x220>
 8007220:	89ab      	ldrh	r3, [r5, #12]
 8007222:	059a      	lsls	r2, r3, #22
 8007224:	d402      	bmi.n	800722c <_vfiprintf_r+0x220>
 8007226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007228:	f000 faab 	bl	8007782 <__retarget_lock_release_recursive>
 800722c:	89ab      	ldrh	r3, [r5, #12]
 800722e:	065b      	lsls	r3, r3, #25
 8007230:	f53f af12 	bmi.w	8007058 <_vfiprintf_r+0x4c>
 8007234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007236:	e711      	b.n	800705c <_vfiprintf_r+0x50>
 8007238:	ab03      	add	r3, sp, #12
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	462a      	mov	r2, r5
 800723e:	4630      	mov	r0, r6
 8007240:	4b09      	ldr	r3, [pc, #36]	; (8007268 <_vfiprintf_r+0x25c>)
 8007242:	a904      	add	r1, sp, #16
 8007244:	f7fe f85e 	bl	8005304 <_printf_i>
 8007248:	e7e4      	b.n	8007214 <_vfiprintf_r+0x208>
 800724a:	bf00      	nop
 800724c:	08008454 	.word	0x08008454
 8007250:	08008474 	.word	0x08008474
 8007254:	08008434 	.word	0x08008434
 8007258:	080082dc 	.word	0x080082dc
 800725c:	080082e2 	.word	0x080082e2
 8007260:	080082e6 	.word	0x080082e6
 8007264:	08004dcd 	.word	0x08004dcd
 8007268:	08006fe9 	.word	0x08006fe9

0800726c <__swbuf_r>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	460e      	mov	r6, r1
 8007270:	4614      	mov	r4, r2
 8007272:	4605      	mov	r5, r0
 8007274:	b118      	cbz	r0, 800727e <__swbuf_r+0x12>
 8007276:	6983      	ldr	r3, [r0, #24]
 8007278:	b90b      	cbnz	r3, 800727e <__swbuf_r+0x12>
 800727a:	f000 f9e3 	bl	8007644 <__sinit>
 800727e:	4b21      	ldr	r3, [pc, #132]	; (8007304 <__swbuf_r+0x98>)
 8007280:	429c      	cmp	r4, r3
 8007282:	d12b      	bne.n	80072dc <__swbuf_r+0x70>
 8007284:	686c      	ldr	r4, [r5, #4]
 8007286:	69a3      	ldr	r3, [r4, #24]
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	071a      	lsls	r2, r3, #28
 800728e:	d52f      	bpl.n	80072f0 <__swbuf_r+0x84>
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	b36b      	cbz	r3, 80072f0 <__swbuf_r+0x84>
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	b2f6      	uxtb	r6, r6
 800729a:	1ac0      	subs	r0, r0, r3
 800729c:	6963      	ldr	r3, [r4, #20]
 800729e:	4637      	mov	r7, r6
 80072a0:	4283      	cmp	r3, r0
 80072a2:	dc04      	bgt.n	80072ae <__swbuf_r+0x42>
 80072a4:	4621      	mov	r1, r4
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 f938 	bl	800751c <_fflush_r>
 80072ac:	bb30      	cbnz	r0, 80072fc <__swbuf_r+0x90>
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	3001      	adds	r0, #1
 80072b2:	3b01      	subs	r3, #1
 80072b4:	60a3      	str	r3, [r4, #8]
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	6022      	str	r2, [r4, #0]
 80072bc:	701e      	strb	r6, [r3, #0]
 80072be:	6963      	ldr	r3, [r4, #20]
 80072c0:	4283      	cmp	r3, r0
 80072c2:	d004      	beq.n	80072ce <__swbuf_r+0x62>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	07db      	lsls	r3, r3, #31
 80072c8:	d506      	bpl.n	80072d8 <__swbuf_r+0x6c>
 80072ca:	2e0a      	cmp	r6, #10
 80072cc:	d104      	bne.n	80072d8 <__swbuf_r+0x6c>
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 f923 	bl	800751c <_fflush_r>
 80072d6:	b988      	cbnz	r0, 80072fc <__swbuf_r+0x90>
 80072d8:	4638      	mov	r0, r7
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <__swbuf_r+0x9c>)
 80072de:	429c      	cmp	r4, r3
 80072e0:	d101      	bne.n	80072e6 <__swbuf_r+0x7a>
 80072e2:	68ac      	ldr	r4, [r5, #8]
 80072e4:	e7cf      	b.n	8007286 <__swbuf_r+0x1a>
 80072e6:	4b09      	ldr	r3, [pc, #36]	; (800730c <__swbuf_r+0xa0>)
 80072e8:	429c      	cmp	r4, r3
 80072ea:	bf08      	it	eq
 80072ec:	68ec      	ldreq	r4, [r5, #12]
 80072ee:	e7ca      	b.n	8007286 <__swbuf_r+0x1a>
 80072f0:	4621      	mov	r1, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	f000 f81a 	bl	800732c <__swsetup_r>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d0cb      	beq.n	8007294 <__swbuf_r+0x28>
 80072fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007300:	e7ea      	b.n	80072d8 <__swbuf_r+0x6c>
 8007302:	bf00      	nop
 8007304:	08008454 	.word	0x08008454
 8007308:	08008474 	.word	0x08008474
 800730c:	08008434 	.word	0x08008434

08007310 <__ascii_wctomb>:
 8007310:	4603      	mov	r3, r0
 8007312:	4608      	mov	r0, r1
 8007314:	b141      	cbz	r1, 8007328 <__ascii_wctomb+0x18>
 8007316:	2aff      	cmp	r2, #255	; 0xff
 8007318:	d904      	bls.n	8007324 <__ascii_wctomb+0x14>
 800731a:	228a      	movs	r2, #138	; 0x8a
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	4770      	bx	lr
 8007324:	2001      	movs	r0, #1
 8007326:	700a      	strb	r2, [r1, #0]
 8007328:	4770      	bx	lr
	...

0800732c <__swsetup_r>:
 800732c:	4b32      	ldr	r3, [pc, #200]	; (80073f8 <__swsetup_r+0xcc>)
 800732e:	b570      	push	{r4, r5, r6, lr}
 8007330:	681d      	ldr	r5, [r3, #0]
 8007332:	4606      	mov	r6, r0
 8007334:	460c      	mov	r4, r1
 8007336:	b125      	cbz	r5, 8007342 <__swsetup_r+0x16>
 8007338:	69ab      	ldr	r3, [r5, #24]
 800733a:	b913      	cbnz	r3, 8007342 <__swsetup_r+0x16>
 800733c:	4628      	mov	r0, r5
 800733e:	f000 f981 	bl	8007644 <__sinit>
 8007342:	4b2e      	ldr	r3, [pc, #184]	; (80073fc <__swsetup_r+0xd0>)
 8007344:	429c      	cmp	r4, r3
 8007346:	d10f      	bne.n	8007368 <__swsetup_r+0x3c>
 8007348:	686c      	ldr	r4, [r5, #4]
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007350:	0719      	lsls	r1, r3, #28
 8007352:	d42c      	bmi.n	80073ae <__swsetup_r+0x82>
 8007354:	06dd      	lsls	r5, r3, #27
 8007356:	d411      	bmi.n	800737c <__swsetup_r+0x50>
 8007358:	2309      	movs	r3, #9
 800735a:	6033      	str	r3, [r6, #0]
 800735c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	e03e      	b.n	80073e6 <__swsetup_r+0xba>
 8007368:	4b25      	ldr	r3, [pc, #148]	; (8007400 <__swsetup_r+0xd4>)
 800736a:	429c      	cmp	r4, r3
 800736c:	d101      	bne.n	8007372 <__swsetup_r+0x46>
 800736e:	68ac      	ldr	r4, [r5, #8]
 8007370:	e7eb      	b.n	800734a <__swsetup_r+0x1e>
 8007372:	4b24      	ldr	r3, [pc, #144]	; (8007404 <__swsetup_r+0xd8>)
 8007374:	429c      	cmp	r4, r3
 8007376:	bf08      	it	eq
 8007378:	68ec      	ldreq	r4, [r5, #12]
 800737a:	e7e6      	b.n	800734a <__swsetup_r+0x1e>
 800737c:	0758      	lsls	r0, r3, #29
 800737e:	d512      	bpl.n	80073a6 <__swsetup_r+0x7a>
 8007380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007382:	b141      	cbz	r1, 8007396 <__swsetup_r+0x6a>
 8007384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007388:	4299      	cmp	r1, r3
 800738a:	d002      	beq.n	8007392 <__swsetup_r+0x66>
 800738c:	4630      	mov	r0, r6
 800738e:	f7ff fb37 	bl	8006a00 <_free_r>
 8007392:	2300      	movs	r3, #0
 8007394:	6363      	str	r3, [r4, #52]	; 0x34
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800739c:	81a3      	strh	r3, [r4, #12]
 800739e:	2300      	movs	r3, #0
 80073a0:	6063      	str	r3, [r4, #4]
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f043 0308 	orr.w	r3, r3, #8
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	b94b      	cbnz	r3, 80073c6 <__swsetup_r+0x9a>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073bc:	d003      	beq.n	80073c6 <__swsetup_r+0x9a>
 80073be:	4621      	mov	r1, r4
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 fa05 	bl	80077d0 <__smakebuf_r>
 80073c6:	89a0      	ldrh	r0, [r4, #12]
 80073c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073cc:	f010 0301 	ands.w	r3, r0, #1
 80073d0:	d00a      	beq.n	80073e8 <__swsetup_r+0xbc>
 80073d2:	2300      	movs	r3, #0
 80073d4:	60a3      	str	r3, [r4, #8]
 80073d6:	6963      	ldr	r3, [r4, #20]
 80073d8:	425b      	negs	r3, r3
 80073da:	61a3      	str	r3, [r4, #24]
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	b943      	cbnz	r3, 80073f2 <__swsetup_r+0xc6>
 80073e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073e4:	d1ba      	bne.n	800735c <__swsetup_r+0x30>
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	0781      	lsls	r1, r0, #30
 80073ea:	bf58      	it	pl
 80073ec:	6963      	ldrpl	r3, [r4, #20]
 80073ee:	60a3      	str	r3, [r4, #8]
 80073f0:	e7f4      	b.n	80073dc <__swsetup_r+0xb0>
 80073f2:	2000      	movs	r0, #0
 80073f4:	e7f7      	b.n	80073e6 <__swsetup_r+0xba>
 80073f6:	bf00      	nop
 80073f8:	20000010 	.word	0x20000010
 80073fc:	08008454 	.word	0x08008454
 8007400:	08008474 	.word	0x08008474
 8007404:	08008434 	.word	0x08008434

08007408 <abort>:
 8007408:	2006      	movs	r0, #6
 800740a:	b508      	push	{r3, lr}
 800740c:	f000 fa50 	bl	80078b0 <raise>
 8007410:	2001      	movs	r0, #1
 8007412:	f7fa ffd6 	bl	80023c2 <_exit>
	...

08007418 <__sflush_r>:
 8007418:	898a      	ldrh	r2, [r1, #12]
 800741a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741c:	4605      	mov	r5, r0
 800741e:	0710      	lsls	r0, r2, #28
 8007420:	460c      	mov	r4, r1
 8007422:	d457      	bmi.n	80074d4 <__sflush_r+0xbc>
 8007424:	684b      	ldr	r3, [r1, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	dc04      	bgt.n	8007434 <__sflush_r+0x1c>
 800742a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	dc01      	bgt.n	8007434 <__sflush_r+0x1c>
 8007430:	2000      	movs	r0, #0
 8007432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007436:	2e00      	cmp	r6, #0
 8007438:	d0fa      	beq.n	8007430 <__sflush_r+0x18>
 800743a:	2300      	movs	r3, #0
 800743c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007440:	682f      	ldr	r7, [r5, #0]
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	d032      	beq.n	80074ac <__sflush_r+0x94>
 8007446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007448:	89a3      	ldrh	r3, [r4, #12]
 800744a:	075a      	lsls	r2, r3, #29
 800744c:	d505      	bpl.n	800745a <__sflush_r+0x42>
 800744e:	6863      	ldr	r3, [r4, #4]
 8007450:	1ac0      	subs	r0, r0, r3
 8007452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007454:	b10b      	cbz	r3, 800745a <__sflush_r+0x42>
 8007456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007458:	1ac0      	subs	r0, r0, r3
 800745a:	2300      	movs	r3, #0
 800745c:	4602      	mov	r2, r0
 800745e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007460:	4628      	mov	r0, r5
 8007462:	6a21      	ldr	r1, [r4, #32]
 8007464:	47b0      	blx	r6
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	d106      	bne.n	800747a <__sflush_r+0x62>
 800746c:	6829      	ldr	r1, [r5, #0]
 800746e:	291d      	cmp	r1, #29
 8007470:	d82c      	bhi.n	80074cc <__sflush_r+0xb4>
 8007472:	4a29      	ldr	r2, [pc, #164]	; (8007518 <__sflush_r+0x100>)
 8007474:	40ca      	lsrs	r2, r1
 8007476:	07d6      	lsls	r6, r2, #31
 8007478:	d528      	bpl.n	80074cc <__sflush_r+0xb4>
 800747a:	2200      	movs	r2, #0
 800747c:	6062      	str	r2, [r4, #4]
 800747e:	6922      	ldr	r2, [r4, #16]
 8007480:	04d9      	lsls	r1, r3, #19
 8007482:	6022      	str	r2, [r4, #0]
 8007484:	d504      	bpl.n	8007490 <__sflush_r+0x78>
 8007486:	1c42      	adds	r2, r0, #1
 8007488:	d101      	bne.n	800748e <__sflush_r+0x76>
 800748a:	682b      	ldr	r3, [r5, #0]
 800748c:	b903      	cbnz	r3, 8007490 <__sflush_r+0x78>
 800748e:	6560      	str	r0, [r4, #84]	; 0x54
 8007490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007492:	602f      	str	r7, [r5, #0]
 8007494:	2900      	cmp	r1, #0
 8007496:	d0cb      	beq.n	8007430 <__sflush_r+0x18>
 8007498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749c:	4299      	cmp	r1, r3
 800749e:	d002      	beq.n	80074a6 <__sflush_r+0x8e>
 80074a0:	4628      	mov	r0, r5
 80074a2:	f7ff faad 	bl	8006a00 <_free_r>
 80074a6:	2000      	movs	r0, #0
 80074a8:	6360      	str	r0, [r4, #52]	; 0x34
 80074aa:	e7c2      	b.n	8007432 <__sflush_r+0x1a>
 80074ac:	6a21      	ldr	r1, [r4, #32]
 80074ae:	2301      	movs	r3, #1
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b0      	blx	r6
 80074b4:	1c41      	adds	r1, r0, #1
 80074b6:	d1c7      	bne.n	8007448 <__sflush_r+0x30>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0c4      	beq.n	8007448 <__sflush_r+0x30>
 80074be:	2b1d      	cmp	r3, #29
 80074c0:	d001      	beq.n	80074c6 <__sflush_r+0xae>
 80074c2:	2b16      	cmp	r3, #22
 80074c4:	d101      	bne.n	80074ca <__sflush_r+0xb2>
 80074c6:	602f      	str	r7, [r5, #0]
 80074c8:	e7b2      	b.n	8007430 <__sflush_r+0x18>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	e7ae      	b.n	8007432 <__sflush_r+0x1a>
 80074d4:	690f      	ldr	r7, [r1, #16]
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	d0aa      	beq.n	8007430 <__sflush_r+0x18>
 80074da:	0793      	lsls	r3, r2, #30
 80074dc:	bf18      	it	ne
 80074de:	2300      	movne	r3, #0
 80074e0:	680e      	ldr	r6, [r1, #0]
 80074e2:	bf08      	it	eq
 80074e4:	694b      	ldreq	r3, [r1, #20]
 80074e6:	1bf6      	subs	r6, r6, r7
 80074e8:	600f      	str	r7, [r1, #0]
 80074ea:	608b      	str	r3, [r1, #8]
 80074ec:	2e00      	cmp	r6, #0
 80074ee:	dd9f      	ble.n	8007430 <__sflush_r+0x18>
 80074f0:	4633      	mov	r3, r6
 80074f2:	463a      	mov	r2, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	6a21      	ldr	r1, [r4, #32]
 80074f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80074fc:	47e0      	blx	ip
 80074fe:	2800      	cmp	r0, #0
 8007500:	dc06      	bgt.n	8007510 <__sflush_r+0xf8>
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	e790      	b.n	8007432 <__sflush_r+0x1a>
 8007510:	4407      	add	r7, r0
 8007512:	1a36      	subs	r6, r6, r0
 8007514:	e7ea      	b.n	80074ec <__sflush_r+0xd4>
 8007516:	bf00      	nop
 8007518:	20400001 	.word	0x20400001

0800751c <_fflush_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	690b      	ldr	r3, [r1, #16]
 8007520:	4605      	mov	r5, r0
 8007522:	460c      	mov	r4, r1
 8007524:	b913      	cbnz	r3, 800752c <_fflush_r+0x10>
 8007526:	2500      	movs	r5, #0
 8007528:	4628      	mov	r0, r5
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	b118      	cbz	r0, 8007536 <_fflush_r+0x1a>
 800752e:	6983      	ldr	r3, [r0, #24]
 8007530:	b90b      	cbnz	r3, 8007536 <_fflush_r+0x1a>
 8007532:	f000 f887 	bl	8007644 <__sinit>
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <_fflush_r+0x6c>)
 8007538:	429c      	cmp	r4, r3
 800753a:	d11b      	bne.n	8007574 <_fflush_r+0x58>
 800753c:	686c      	ldr	r4, [r5, #4]
 800753e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0ef      	beq.n	8007526 <_fflush_r+0xa>
 8007546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007548:	07d0      	lsls	r0, r2, #31
 800754a:	d404      	bmi.n	8007556 <_fflush_r+0x3a>
 800754c:	0599      	lsls	r1, r3, #22
 800754e:	d402      	bmi.n	8007556 <_fflush_r+0x3a>
 8007550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007552:	f000 f915 	bl	8007780 <__retarget_lock_acquire_recursive>
 8007556:	4628      	mov	r0, r5
 8007558:	4621      	mov	r1, r4
 800755a:	f7ff ff5d 	bl	8007418 <__sflush_r>
 800755e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007560:	4605      	mov	r5, r0
 8007562:	07da      	lsls	r2, r3, #31
 8007564:	d4e0      	bmi.n	8007528 <_fflush_r+0xc>
 8007566:	89a3      	ldrh	r3, [r4, #12]
 8007568:	059b      	lsls	r3, r3, #22
 800756a:	d4dd      	bmi.n	8007528 <_fflush_r+0xc>
 800756c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756e:	f000 f908 	bl	8007782 <__retarget_lock_release_recursive>
 8007572:	e7d9      	b.n	8007528 <_fflush_r+0xc>
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <_fflush_r+0x70>)
 8007576:	429c      	cmp	r4, r3
 8007578:	d101      	bne.n	800757e <_fflush_r+0x62>
 800757a:	68ac      	ldr	r4, [r5, #8]
 800757c:	e7df      	b.n	800753e <_fflush_r+0x22>
 800757e:	4b04      	ldr	r3, [pc, #16]	; (8007590 <_fflush_r+0x74>)
 8007580:	429c      	cmp	r4, r3
 8007582:	bf08      	it	eq
 8007584:	68ec      	ldreq	r4, [r5, #12]
 8007586:	e7da      	b.n	800753e <_fflush_r+0x22>
 8007588:	08008454 	.word	0x08008454
 800758c:	08008474 	.word	0x08008474
 8007590:	08008434 	.word	0x08008434

08007594 <std>:
 8007594:	2300      	movs	r3, #0
 8007596:	b510      	push	{r4, lr}
 8007598:	4604      	mov	r4, r0
 800759a:	e9c0 3300 	strd	r3, r3, [r0]
 800759e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075a2:	6083      	str	r3, [r0, #8]
 80075a4:	8181      	strh	r1, [r0, #12]
 80075a6:	6643      	str	r3, [r0, #100]	; 0x64
 80075a8:	81c2      	strh	r2, [r0, #14]
 80075aa:	6183      	str	r3, [r0, #24]
 80075ac:	4619      	mov	r1, r3
 80075ae:	2208      	movs	r2, #8
 80075b0:	305c      	adds	r0, #92	; 0x5c
 80075b2:	f7fd fb65 	bl	8004c80 <memset>
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <std+0x38>)
 80075b8:	6224      	str	r4, [r4, #32]
 80075ba:	6263      	str	r3, [r4, #36]	; 0x24
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <std+0x3c>)
 80075be:	62a3      	str	r3, [r4, #40]	; 0x28
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <std+0x40>)
 80075c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <std+0x44>)
 80075c6:	6323      	str	r3, [r4, #48]	; 0x30
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	bf00      	nop
 80075cc:	080078e9 	.word	0x080078e9
 80075d0:	0800790b 	.word	0x0800790b
 80075d4:	08007943 	.word	0x08007943
 80075d8:	08007967 	.word	0x08007967

080075dc <_cleanup_r>:
 80075dc:	4901      	ldr	r1, [pc, #4]	; (80075e4 <_cleanup_r+0x8>)
 80075de:	f000 b8af 	b.w	8007740 <_fwalk_reent>
 80075e2:	bf00      	nop
 80075e4:	0800751d 	.word	0x0800751d

080075e8 <__sfmoreglue>:
 80075e8:	2268      	movs	r2, #104	; 0x68
 80075ea:	b570      	push	{r4, r5, r6, lr}
 80075ec:	1e4d      	subs	r5, r1, #1
 80075ee:	4355      	muls	r5, r2
 80075f0:	460e      	mov	r6, r1
 80075f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075f6:	f7ff fa6b 	bl	8006ad0 <_malloc_r>
 80075fa:	4604      	mov	r4, r0
 80075fc:	b140      	cbz	r0, 8007610 <__sfmoreglue+0x28>
 80075fe:	2100      	movs	r1, #0
 8007600:	e9c0 1600 	strd	r1, r6, [r0]
 8007604:	300c      	adds	r0, #12
 8007606:	60a0      	str	r0, [r4, #8]
 8007608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800760c:	f7fd fb38 	bl	8004c80 <memset>
 8007610:	4620      	mov	r0, r4
 8007612:	bd70      	pop	{r4, r5, r6, pc}

08007614 <__sfp_lock_acquire>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__sfp_lock_acquire+0x8>)
 8007616:	f000 b8b3 	b.w	8007780 <__retarget_lock_acquire_recursive>
 800761a:	bf00      	nop
 800761c:	200003a5 	.word	0x200003a5

08007620 <__sfp_lock_release>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__sfp_lock_release+0x8>)
 8007622:	f000 b8ae 	b.w	8007782 <__retarget_lock_release_recursive>
 8007626:	bf00      	nop
 8007628:	200003a5 	.word	0x200003a5

0800762c <__sinit_lock_acquire>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__sinit_lock_acquire+0x8>)
 800762e:	f000 b8a7 	b.w	8007780 <__retarget_lock_acquire_recursive>
 8007632:	bf00      	nop
 8007634:	200003a6 	.word	0x200003a6

08007638 <__sinit_lock_release>:
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <__sinit_lock_release+0x8>)
 800763a:	f000 b8a2 	b.w	8007782 <__retarget_lock_release_recursive>
 800763e:	bf00      	nop
 8007640:	200003a6 	.word	0x200003a6

08007644 <__sinit>:
 8007644:	b510      	push	{r4, lr}
 8007646:	4604      	mov	r4, r0
 8007648:	f7ff fff0 	bl	800762c <__sinit_lock_acquire>
 800764c:	69a3      	ldr	r3, [r4, #24]
 800764e:	b11b      	cbz	r3, 8007658 <__sinit+0x14>
 8007650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007654:	f7ff bff0 	b.w	8007638 <__sinit_lock_release>
 8007658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800765c:	6523      	str	r3, [r4, #80]	; 0x50
 800765e:	4b13      	ldr	r3, [pc, #76]	; (80076ac <__sinit+0x68>)
 8007660:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <__sinit+0x6c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	62a2      	str	r2, [r4, #40]	; 0x28
 8007666:	42a3      	cmp	r3, r4
 8007668:	bf08      	it	eq
 800766a:	2301      	moveq	r3, #1
 800766c:	4620      	mov	r0, r4
 800766e:	bf08      	it	eq
 8007670:	61a3      	streq	r3, [r4, #24]
 8007672:	f000 f81f 	bl	80076b4 <__sfp>
 8007676:	6060      	str	r0, [r4, #4]
 8007678:	4620      	mov	r0, r4
 800767a:	f000 f81b 	bl	80076b4 <__sfp>
 800767e:	60a0      	str	r0, [r4, #8]
 8007680:	4620      	mov	r0, r4
 8007682:	f000 f817 	bl	80076b4 <__sfp>
 8007686:	2200      	movs	r2, #0
 8007688:	2104      	movs	r1, #4
 800768a:	60e0      	str	r0, [r4, #12]
 800768c:	6860      	ldr	r0, [r4, #4]
 800768e:	f7ff ff81 	bl	8007594 <std>
 8007692:	2201      	movs	r2, #1
 8007694:	2109      	movs	r1, #9
 8007696:	68a0      	ldr	r0, [r4, #8]
 8007698:	f7ff ff7c 	bl	8007594 <std>
 800769c:	2202      	movs	r2, #2
 800769e:	2112      	movs	r1, #18
 80076a0:	68e0      	ldr	r0, [r4, #12]
 80076a2:	f7ff ff77 	bl	8007594 <std>
 80076a6:	2301      	movs	r3, #1
 80076a8:	61a3      	str	r3, [r4, #24]
 80076aa:	e7d1      	b.n	8007650 <__sinit+0xc>
 80076ac:	080080b8 	.word	0x080080b8
 80076b0:	080075dd 	.word	0x080075dd

080076b4 <__sfp>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	4607      	mov	r7, r0
 80076b8:	f7ff ffac 	bl	8007614 <__sfp_lock_acquire>
 80076bc:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <__sfp+0x84>)
 80076be:	681e      	ldr	r6, [r3, #0]
 80076c0:	69b3      	ldr	r3, [r6, #24]
 80076c2:	b913      	cbnz	r3, 80076ca <__sfp+0x16>
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7ff ffbd 	bl	8007644 <__sinit>
 80076ca:	3648      	adds	r6, #72	; 0x48
 80076cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	d503      	bpl.n	80076dc <__sfp+0x28>
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	b30b      	cbz	r3, 800771c <__sfp+0x68>
 80076d8:	6836      	ldr	r6, [r6, #0]
 80076da:	e7f7      	b.n	80076cc <__sfp+0x18>
 80076dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076e0:	b9d5      	cbnz	r5, 8007718 <__sfp+0x64>
 80076e2:	4b16      	ldr	r3, [pc, #88]	; (800773c <__sfp+0x88>)
 80076e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076e8:	60e3      	str	r3, [r4, #12]
 80076ea:	6665      	str	r5, [r4, #100]	; 0x64
 80076ec:	f000 f847 	bl	800777e <__retarget_lock_init_recursive>
 80076f0:	f7ff ff96 	bl	8007620 <__sfp_lock_release>
 80076f4:	2208      	movs	r2, #8
 80076f6:	4629      	mov	r1, r5
 80076f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007700:	6025      	str	r5, [r4, #0]
 8007702:	61a5      	str	r5, [r4, #24]
 8007704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007708:	f7fd faba 	bl	8004c80 <memset>
 800770c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007714:	4620      	mov	r0, r4
 8007716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007718:	3468      	adds	r4, #104	; 0x68
 800771a:	e7d9      	b.n	80076d0 <__sfp+0x1c>
 800771c:	2104      	movs	r1, #4
 800771e:	4638      	mov	r0, r7
 8007720:	f7ff ff62 	bl	80075e8 <__sfmoreglue>
 8007724:	4604      	mov	r4, r0
 8007726:	6030      	str	r0, [r6, #0]
 8007728:	2800      	cmp	r0, #0
 800772a:	d1d5      	bne.n	80076d8 <__sfp+0x24>
 800772c:	f7ff ff78 	bl	8007620 <__sfp_lock_release>
 8007730:	230c      	movs	r3, #12
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	e7ee      	b.n	8007714 <__sfp+0x60>
 8007736:	bf00      	nop
 8007738:	080080b8 	.word	0x080080b8
 800773c:	ffff0001 	.word	0xffff0001

08007740 <_fwalk_reent>:
 8007740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007744:	4606      	mov	r6, r0
 8007746:	4688      	mov	r8, r1
 8007748:	2700      	movs	r7, #0
 800774a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800774e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007752:	f1b9 0901 	subs.w	r9, r9, #1
 8007756:	d505      	bpl.n	8007764 <_fwalk_reent+0x24>
 8007758:	6824      	ldr	r4, [r4, #0]
 800775a:	2c00      	cmp	r4, #0
 800775c:	d1f7      	bne.n	800774e <_fwalk_reent+0xe>
 800775e:	4638      	mov	r0, r7
 8007760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007764:	89ab      	ldrh	r3, [r5, #12]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d907      	bls.n	800777a <_fwalk_reent+0x3a>
 800776a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800776e:	3301      	adds	r3, #1
 8007770:	d003      	beq.n	800777a <_fwalk_reent+0x3a>
 8007772:	4629      	mov	r1, r5
 8007774:	4630      	mov	r0, r6
 8007776:	47c0      	blx	r8
 8007778:	4307      	orrs	r7, r0
 800777a:	3568      	adds	r5, #104	; 0x68
 800777c:	e7e9      	b.n	8007752 <_fwalk_reent+0x12>

0800777e <__retarget_lock_init_recursive>:
 800777e:	4770      	bx	lr

08007780 <__retarget_lock_acquire_recursive>:
 8007780:	4770      	bx	lr

08007782 <__retarget_lock_release_recursive>:
 8007782:	4770      	bx	lr

08007784 <__swhatbuf_r>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	460e      	mov	r6, r1
 8007788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778c:	4614      	mov	r4, r2
 800778e:	2900      	cmp	r1, #0
 8007790:	461d      	mov	r5, r3
 8007792:	b096      	sub	sp, #88	; 0x58
 8007794:	da08      	bge.n	80077a8 <__swhatbuf_r+0x24>
 8007796:	2200      	movs	r2, #0
 8007798:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800779c:	602a      	str	r2, [r5, #0]
 800779e:	061a      	lsls	r2, r3, #24
 80077a0:	d410      	bmi.n	80077c4 <__swhatbuf_r+0x40>
 80077a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a6:	e00e      	b.n	80077c6 <__swhatbuf_r+0x42>
 80077a8:	466a      	mov	r2, sp
 80077aa:	f000 f903 	bl	80079b4 <_fstat_r>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	dbf1      	blt.n	8007796 <__swhatbuf_r+0x12>
 80077b2:	9a01      	ldr	r2, [sp, #4]
 80077b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077bc:	425a      	negs	r2, r3
 80077be:	415a      	adcs	r2, r3
 80077c0:	602a      	str	r2, [r5, #0]
 80077c2:	e7ee      	b.n	80077a2 <__swhatbuf_r+0x1e>
 80077c4:	2340      	movs	r3, #64	; 0x40
 80077c6:	2000      	movs	r0, #0
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	b016      	add	sp, #88	; 0x58
 80077cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080077d0 <__smakebuf_r>:
 80077d0:	898b      	ldrh	r3, [r1, #12]
 80077d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077d4:	079d      	lsls	r5, r3, #30
 80077d6:	4606      	mov	r6, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	d507      	bpl.n	80077ec <__smakebuf_r+0x1c>
 80077dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	6123      	str	r3, [r4, #16]
 80077e4:	2301      	movs	r3, #1
 80077e6:	6163      	str	r3, [r4, #20]
 80077e8:	b002      	add	sp, #8
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	466a      	mov	r2, sp
 80077ee:	ab01      	add	r3, sp, #4
 80077f0:	f7ff ffc8 	bl	8007784 <__swhatbuf_r>
 80077f4:	9900      	ldr	r1, [sp, #0]
 80077f6:	4605      	mov	r5, r0
 80077f8:	4630      	mov	r0, r6
 80077fa:	f7ff f969 	bl	8006ad0 <_malloc_r>
 80077fe:	b948      	cbnz	r0, 8007814 <__smakebuf_r+0x44>
 8007800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007804:	059a      	lsls	r2, r3, #22
 8007806:	d4ef      	bmi.n	80077e8 <__smakebuf_r+0x18>
 8007808:	f023 0303 	bic.w	r3, r3, #3
 800780c:	f043 0302 	orr.w	r3, r3, #2
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	e7e3      	b.n	80077dc <__smakebuf_r+0xc>
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <__smakebuf_r+0x7c>)
 8007816:	62b3      	str	r3, [r6, #40]	; 0x28
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	6020      	str	r0, [r4, #0]
 800781c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007820:	81a3      	strh	r3, [r4, #12]
 8007822:	9b00      	ldr	r3, [sp, #0]
 8007824:	6120      	str	r0, [r4, #16]
 8007826:	6163      	str	r3, [r4, #20]
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	b15b      	cbz	r3, 8007844 <__smakebuf_r+0x74>
 800782c:	4630      	mov	r0, r6
 800782e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007832:	f000 f8d1 	bl	80079d8 <_isatty_r>
 8007836:	b128      	cbz	r0, 8007844 <__smakebuf_r+0x74>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f023 0303 	bic.w	r3, r3, #3
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	81a3      	strh	r3, [r4, #12]
 8007844:	89a0      	ldrh	r0, [r4, #12]
 8007846:	4305      	orrs	r5, r0
 8007848:	81a5      	strh	r5, [r4, #12]
 800784a:	e7cd      	b.n	80077e8 <__smakebuf_r+0x18>
 800784c:	080075dd 	.word	0x080075dd

08007850 <_malloc_usable_size_r>:
 8007850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007854:	1f18      	subs	r0, r3, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	bfbc      	itt	lt
 800785a:	580b      	ldrlt	r3, [r1, r0]
 800785c:	18c0      	addlt	r0, r0, r3
 800785e:	4770      	bx	lr

08007860 <_raise_r>:
 8007860:	291f      	cmp	r1, #31
 8007862:	b538      	push	{r3, r4, r5, lr}
 8007864:	4604      	mov	r4, r0
 8007866:	460d      	mov	r5, r1
 8007868:	d904      	bls.n	8007874 <_raise_r+0x14>
 800786a:	2316      	movs	r3, #22
 800786c:	6003      	str	r3, [r0, #0]
 800786e:	f04f 30ff 	mov.w	r0, #4294967295
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007876:	b112      	cbz	r2, 800787e <_raise_r+0x1e>
 8007878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800787c:	b94b      	cbnz	r3, 8007892 <_raise_r+0x32>
 800787e:	4620      	mov	r0, r4
 8007880:	f000 f830 	bl	80078e4 <_getpid_r>
 8007884:	462a      	mov	r2, r5
 8007886:	4601      	mov	r1, r0
 8007888:	4620      	mov	r0, r4
 800788a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800788e:	f000 b817 	b.w	80078c0 <_kill_r>
 8007892:	2b01      	cmp	r3, #1
 8007894:	d00a      	beq.n	80078ac <_raise_r+0x4c>
 8007896:	1c59      	adds	r1, r3, #1
 8007898:	d103      	bne.n	80078a2 <_raise_r+0x42>
 800789a:	2316      	movs	r3, #22
 800789c:	6003      	str	r3, [r0, #0]
 800789e:	2001      	movs	r0, #1
 80078a0:	e7e7      	b.n	8007872 <_raise_r+0x12>
 80078a2:	2400      	movs	r4, #0
 80078a4:	4628      	mov	r0, r5
 80078a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078aa:	4798      	blx	r3
 80078ac:	2000      	movs	r0, #0
 80078ae:	e7e0      	b.n	8007872 <_raise_r+0x12>

080078b0 <raise>:
 80078b0:	4b02      	ldr	r3, [pc, #8]	; (80078bc <raise+0xc>)
 80078b2:	4601      	mov	r1, r0
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	f7ff bfd3 	b.w	8007860 <_raise_r>
 80078ba:	bf00      	nop
 80078bc:	20000010 	.word	0x20000010

080078c0 <_kill_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	2300      	movs	r3, #0
 80078c4:	4d06      	ldr	r5, [pc, #24]	; (80078e0 <_kill_r+0x20>)
 80078c6:	4604      	mov	r4, r0
 80078c8:	4608      	mov	r0, r1
 80078ca:	4611      	mov	r1, r2
 80078cc:	602b      	str	r3, [r5, #0]
 80078ce:	f7fa fd68 	bl	80023a2 <_kill>
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	d102      	bne.n	80078dc <_kill_r+0x1c>
 80078d6:	682b      	ldr	r3, [r5, #0]
 80078d8:	b103      	cbz	r3, 80078dc <_kill_r+0x1c>
 80078da:	6023      	str	r3, [r4, #0]
 80078dc:	bd38      	pop	{r3, r4, r5, pc}
 80078de:	bf00      	nop
 80078e0:	200003a0 	.word	0x200003a0

080078e4 <_getpid_r>:
 80078e4:	f7fa bd56 	b.w	8002394 <_getpid>

080078e8 <__sread>:
 80078e8:	b510      	push	{r4, lr}
 80078ea:	460c      	mov	r4, r1
 80078ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f0:	f000 f894 	bl	8007a1c <_read_r>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	bfab      	itete	ge
 80078f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078fa:	89a3      	ldrhlt	r3, [r4, #12]
 80078fc:	181b      	addge	r3, r3, r0
 80078fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007902:	bfac      	ite	ge
 8007904:	6563      	strge	r3, [r4, #84]	; 0x54
 8007906:	81a3      	strhlt	r3, [r4, #12]
 8007908:	bd10      	pop	{r4, pc}

0800790a <__swrite>:
 800790a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790e:	461f      	mov	r7, r3
 8007910:	898b      	ldrh	r3, [r1, #12]
 8007912:	4605      	mov	r5, r0
 8007914:	05db      	lsls	r3, r3, #23
 8007916:	460c      	mov	r4, r1
 8007918:	4616      	mov	r6, r2
 800791a:	d505      	bpl.n	8007928 <__swrite+0x1e>
 800791c:	2302      	movs	r3, #2
 800791e:	2200      	movs	r2, #0
 8007920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007924:	f000 f868 	bl	80079f8 <_lseek_r>
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	4632      	mov	r2, r6
 800792c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007930:	81a3      	strh	r3, [r4, #12]
 8007932:	4628      	mov	r0, r5
 8007934:	463b      	mov	r3, r7
 8007936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800793a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800793e:	f000 b817 	b.w	8007970 <_write_r>

08007942 <__sseek>:
 8007942:	b510      	push	{r4, lr}
 8007944:	460c      	mov	r4, r1
 8007946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794a:	f000 f855 	bl	80079f8 <_lseek_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	bf15      	itete	ne
 8007954:	6560      	strne	r0, [r4, #84]	; 0x54
 8007956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800795a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800795e:	81a3      	strheq	r3, [r4, #12]
 8007960:	bf18      	it	ne
 8007962:	81a3      	strhne	r3, [r4, #12]
 8007964:	bd10      	pop	{r4, pc}

08007966 <__sclose>:
 8007966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796a:	f000 b813 	b.w	8007994 <_close_r>
	...

08007970 <_write_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4604      	mov	r4, r0
 8007974:	4608      	mov	r0, r1
 8007976:	4611      	mov	r1, r2
 8007978:	2200      	movs	r2, #0
 800797a:	4d05      	ldr	r5, [pc, #20]	; (8007990 <_write_r+0x20>)
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	f7fa fd46 	bl	8002410 <_write>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_write_r+0x1e>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_write_r+0x1e>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	200003a0 	.word	0x200003a0

08007994 <_close_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	2300      	movs	r3, #0
 8007998:	4d05      	ldr	r5, [pc, #20]	; (80079b0 <_close_r+0x1c>)
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	f7fa fd52 	bl	8002448 <_close>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_close_r+0x1a>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_close_r+0x1a>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	200003a0 	.word	0x200003a0

080079b4 <_fstat_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	2300      	movs	r3, #0
 80079b8:	4d06      	ldr	r5, [pc, #24]	; (80079d4 <_fstat_r+0x20>)
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	4611      	mov	r1, r2
 80079c0:	602b      	str	r3, [r5, #0]
 80079c2:	f7fa fd4c 	bl	800245e <_fstat>
 80079c6:	1c43      	adds	r3, r0, #1
 80079c8:	d102      	bne.n	80079d0 <_fstat_r+0x1c>
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	b103      	cbz	r3, 80079d0 <_fstat_r+0x1c>
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	bd38      	pop	{r3, r4, r5, pc}
 80079d2:	bf00      	nop
 80079d4:	200003a0 	.word	0x200003a0

080079d8 <_isatty_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	2300      	movs	r3, #0
 80079dc:	4d05      	ldr	r5, [pc, #20]	; (80079f4 <_isatty_r+0x1c>)
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	602b      	str	r3, [r5, #0]
 80079e4:	f7fa fd4a 	bl	800247c <_isatty>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_isatty_r+0x1a>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_isatty_r+0x1a>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	200003a0 	.word	0x200003a0

080079f8 <_lseek_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	4611      	mov	r1, r2
 8007a00:	2200      	movs	r2, #0
 8007a02:	4d05      	ldr	r5, [pc, #20]	; (8007a18 <_lseek_r+0x20>)
 8007a04:	602a      	str	r2, [r5, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f7fa fd42 	bl	8002490 <_lseek>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_lseek_r+0x1e>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_lseek_r+0x1e>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	200003a0 	.word	0x200003a0

08007a1c <_read_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4608      	mov	r0, r1
 8007a22:	4611      	mov	r1, r2
 8007a24:	2200      	movs	r2, #0
 8007a26:	4d05      	ldr	r5, [pc, #20]	; (8007a3c <_read_r+0x20>)
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f7fa fcd3 	bl	80023d6 <_read>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_read_r+0x1e>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_read_r+0x1e>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	200003a0 	.word	0x200003a0

08007a40 <_init>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr

08007a4c <_fini>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	bf00      	nop
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr
