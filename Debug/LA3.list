
LA3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008758  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  08008940  08008940  00018940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093fc  080093fc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080093fc  080093fc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093fc  080093fc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001e4  080095e8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  080095e8  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013272  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342a  00000000  00000000  0003347f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000368b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00037ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5c3  00000000  00000000  00038f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dfe  00000000  00000000  000554c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2049  00000000  00000000  0006d2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f30a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006530  00000000  00000000  0010f35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e4 	.word	0x200001e4
 8000204:	00000000 	.word	0x00000000
 8000208:	08008928 	.word	0x08008928

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e8 	.word	0x200001e8
 8000224:	08008928 	.word	0x08008928

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_f2iz>:
 80011a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011b0:	d30f      	bcc.n	80011d2 <__aeabi_f2iz+0x2a>
 80011b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ba:	d90d      	bls.n	80011d8 <__aeabi_f2iz+0x30>
 80011bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011c8:	fa23 f002 	lsr.w	r0, r3, r2
 80011cc:	bf18      	it	ne
 80011ce:	4240      	negne	r0, r0
 80011d0:	4770      	bx	lr
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	4770      	bx	lr
 80011d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011dc:	d101      	bne.n	80011e2 <__aeabi_f2iz+0x3a>
 80011de:	0242      	lsls	r2, r0, #9
 80011e0:	d105      	bne.n	80011ee <__aeabi_f2iz+0x46>
 80011e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011e6:	bf08      	it	eq
 80011e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011ec:	4770      	bx	lr
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	4770      	bx	lr

080011f4 <MPU9250_OnActivate>:

static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

__weak void MPU9250_OnActivate()
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8001204:	f7ff fff6 	bl	80011f4 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET); // pull it low to start reading
 8001208:	2200      	movs	r2, #0
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <MPU9250_Activate+0x18>)
 800120e:	f002 f9ec 	bl	80035ea <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40011000 	.word	0x40011000

0800121c <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET); // pull it up to stop communication
 8001220:	2201      	movs	r2, #1
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <MPU9250_Deactivate+0x14>)
 8001226:	f002 f9e0 	bl	80035ea <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40011000 	.word	0x40011000

08001234 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af02      	add	r7, sp, #8
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8001242:	f107 020f 	add.w	r2, r7, #15
 8001246:	1df9      	adds	r1, r7, #7
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <SPIx_WriteRead+0x38>)
 8001252:	f003 fccb 	bl	8004bec <HAL_SPI_TransmitReceive>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SPIx_WriteRead+0x2c>
	{
		return -1;
 800125c:	23ff      	movs	r3, #255	; 0xff
 800125e:	e000      	b.n	8001262 <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000388 	.word	0x20000388

08001270 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
 800127c:	4613      	mov	r3, r2
 800127e:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001280:	f7ff ffbe 	bl	8001200 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffd4 	bl	8001234 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 800128c:	e00a      	b.n	80012a4 <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*pBuffer);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffce 	bl	8001234 <SPIx_WriteRead>
		NumByteToWrite--;
 8001298:	883b      	ldrh	r3, [r7, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3301      	adds	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 80012a4:	883b      	ldrh	r3, [r7, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f1      	bne.n	800128e <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 80012aa:	f7ff ffb7 	bl	800121c <MPU9250_Deactivate>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
 80012c4:	4613      	mov	r3, r2
 80012c6:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 80012c8:	f7ff ff9a 	bl	8001200 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 80012d6:	f107 010f 	add.w	r1, r7, #15
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	2201      	movs	r2, #1
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MPU_SPI_Read+0x48>)
 80012e2:	f003 fa36 	bl	8004752 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&MPU9250_SPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 80012e6:	883a      	ldrh	r2, [r7, #0]
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4804      	ldr	r0, [pc, #16]	; (8001300 <MPU_SPI_Read+0x48>)
 80012f0:	f003 fb6b 	bl	80049ca <HAL_SPI_Receive>
	MPU9250_Deactivate();
 80012f4:	f7ff ff92 	bl	800121c <MPU9250_Deactivate>
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000388 	.word	0x20000388

08001304 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	460a      	mov	r2, r1
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	4613      	mov	r3, r2
 8001312:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8001314:	79f9      	ldrb	r1, [r7, #7]
 8001316:	1dbb      	adds	r3, r7, #6
 8001318:	2201      	movs	r2, #1
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffa8 	bl	8001270 <MPU_SPI_Write>
	HAL_Delay(10);
 8001320:	200a      	movs	r0, #10
 8001322:	f001 fe85 	bl	8003030 <HAL_Delay>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	603a      	str	r2, [r7, #0]
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	460b      	mov	r3, r1
 800133c:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	b29a      	uxth	r2, r3
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4619      	mov	r1, r3
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f7ff ffb6 	bl	80012b8 <MPU_SPI_Read>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	460a      	mov	r2, r1
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	4613      	mov	r3, r2
 8001362:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8001364:	2325      	movs	r3, #37	; 0x25
 8001366:	220c      	movs	r2, #12
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffca 	bl	8001304 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001370:	2226      	movs	r2, #38	; 0x26
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4619      	mov	r1, r3
 8001376:	4610      	mov	r0, r2
 8001378:	f7ff ffc4 	bl	8001304 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 800137c:	2263      	movs	r2, #99	; 0x63
 800137e:	79bb      	ldrb	r3, [r7, #6]
 8001380:	4619      	mov	r1, r3
 8001382:	4610      	mov	r0, r2
 8001384:	f7ff ffbe 	bl	8001304 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8001388:	2227      	movs	r2, #39	; 0x27
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff ffb5 	bl	8001304 <writeRegister>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	603a      	str	r2, [r7, #0]
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	460b      	mov	r3, r1
 80013b0:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 80013b2:	2025      	movs	r0, #37	; 0x25
 80013b4:	220c      	movs	r2, #12
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff ffa1 	bl	8001304 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80013c2:	2226      	movs	r2, #38	; 0x26
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f7ff ff9b 	bl	8001304 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 80013ce:	2027      	movs	r0, #39	; 0x27
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff ff93 	bl	8001304 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 80013de:	2001      	movs	r0, #1
 80013e0:	f001 fe26 	bl	8003030 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 80013e4:	2049      	movs	r0, #73	; 0x49
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff ff9f 	bl	800132e <readRegisters>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 80013fc:	2375      	movs	r3, #117	; 0x75
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <whoAmI+0x18>)
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff93 	bl	800132e <readRegisters>

	// return the register value
	return _buffer[0];
 8001408:	4b01      	ldr	r3, [pc, #4]	; (8001410 <whoAmI+0x18>)
 800140a:	781b      	ldrb	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000200 	.word	0x20000200

08001414 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8001418:	2300      	movs	r3, #0
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <whoAmIAK8963+0x18>)
 800141c:	2101      	movs	r1, #1
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ffbf 	bl	80013a2 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8001424:	4b01      	ldr	r3, [pc, #4]	; (800142c <whoAmIAK8963+0x18>)
 8001426:	781b      	ldrb	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000200 	.word	0x20000200

08001430 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001436:	236b      	movs	r3, #107	; 0x6b
 8001438:	2201      	movs	r2, #1
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff61 	bl	8001304 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8001442:	236a      	movs	r3, #106	; 0x6a
 8001444:	2220      	movs	r2, #32
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5b 	bl	8001304 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 800144e:	2324      	movs	r3, #36	; 0x24
 8001450:	220d      	movs	r2, #13
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff55 	bl	8001304 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800145a:	230a      	movs	r3, #10
 800145c:	2200      	movs	r2, #0
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff77 	bl	8001354 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8001466:	236b      	movs	r3, #107	; 0x6b
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff49 	bl	8001304 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8001472:	200a      	movs	r0, #10
 8001474:	f001 fddc 	bl	8003030 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8001478:	230b      	movs	r3, #11
 800147a:	2201      	movs	r2, #1
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff68 	bl	8001354 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8001484:	236b      	movs	r3, #107	; 0x6b
 8001486:	2201      	movs	r2, #1
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff3a 	bl	8001304 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8001490:	f7ff ffb2 	bl	80013f8 <whoAmI>
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b71      	cmp	r3, #113	; 0x71
 800149c:	d004      	beq.n	80014a8 <MPU9250_Init+0x78>
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b73      	cmp	r3, #115	; 0x73
 80014a2:	d001      	beq.n	80014a8 <MPU9250_Init+0x78>
	{
		return 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e06c      	b.n	8001582 <MPU9250_Init+0x152>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 80014a8:	236c      	movs	r3, #108	; 0x6c
 80014aa:	2200      	movs	r2, #0
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff28 	bl	8001304 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 80014b4:	231c      	movs	r3, #28
 80014b6:	2218      	movs	r2, #24
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff22 	bl	8001304 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 80014c0:	231b      	movs	r3, #27
 80014c2:	2200      	movs	r2, #0
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff1c 	bl	8001304 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 80014cc:	231d      	movs	r3, #29
 80014ce:	2201      	movs	r2, #1
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff16 	bl	8001304 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 80014d8:	231a      	movs	r3, #26
 80014da:	2201      	movs	r2, #1
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff10 	bl	8001304 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 80014e4:	2319      	movs	r3, #25
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff0b 	bl	8001304 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 80014ee:	236a      	movs	r3, #106	; 0x6a
 80014f0:	2220      	movs	r2, #32
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff05 	bl	8001304 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 80014fa:	2324      	movs	r3, #36	; 0x24
 80014fc:	220d      	movs	r2, #13
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff feff 	bl	8001304 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8001506:	f7ff ff85 	bl	8001414 <whoAmIAK8963>
 800150a:	4603      	mov	r3, r0
 800150c:	2b48      	cmp	r3, #72	; 0x48
 800150e:	d001      	beq.n	8001514 <MPU9250_Init+0xe4>
	{
		return 1;
 8001510:	2301      	movs	r3, #1
 8001512:	e036      	b.n	8001582 <MPU9250_Init+0x152>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001514:	230a      	movs	r3, #10
 8001516:	2200      	movs	r2, #0
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff1a 	bl	8001354 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8001520:	2064      	movs	r0, #100	; 0x64
 8001522:	f001 fd85 	bl	8003030 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 8001526:	230a      	movs	r3, #10
 8001528:	220f      	movs	r2, #15
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff11 	bl	8001354 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001532:	2064      	movs	r0, #100	; 0x64
 8001534:	f001 fd7c 	bl	8003030 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8001538:	2310      	movs	r3, #16
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <MPU9250_Init+0x15c>)
 800153c:	2103      	movs	r1, #3
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff2f 	bl	80013a2 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001544:	230a      	movs	r3, #10
 8001546:	2200      	movs	r2, #0
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff02 	bl	8001354 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001550:	2064      	movs	r0, #100	; 0x64
 8001552:	f001 fd6d 	bl	8003030 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 8001556:	230a      	movs	r3, #10
 8001558:	2216      	movs	r2, #22
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fef9 	bl	8001354 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001562:	2064      	movs	r0, #100	; 0x64
 8001564:	f001 fd64 	bl	8003030 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8001568:	236b      	movs	r3, #107	; 0x6b
 800156a:	2201      	movs	r2, #1
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fec8 	bl	8001304 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8001574:	2303      	movs	r3, #3
 8001576:	4a06      	ldr	r2, [pc, #24]	; (8001590 <MPU9250_Init+0x160>)
 8001578:	2107      	movs	r1, #7
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff11 	bl	80013a2 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000218 	.word	0x20000218
 8001590:	20000200 	.word	0x20000200

08001594 <MPU9250_SetAccelRange>:

/* sets the accelerometer full scale range to values other than default */
void MPU9250_SetAccelRange(AccelRange range)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG, range);
 800159e:	221c      	movs	r2, #28
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f7ff fead 	bl	8001304 <writeRegister>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <MPU9250_SetGyroRange>:

/* sets the gyro full scale range to values other than default */
void MPU9250_SetGyroRange(GyroRange range)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
	writeRegister(GYRO_CONFIG, range);
 80015bc:	221b      	movs	r2, #27
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4610      	mov	r0, r2
 80015c4:	f7ff fe9e 	bl	8001304 <writeRegister>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <MPU9250_SetSampleRateDivider>:
	writeRegister(CONFIG,bandwidth);
}

/* sets the sample rate divider to values other than default */
void MPU9250_SetSampleRateDivider(SampleRateDivider srd)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	/* setting the sample rate divider to 19 to facilitate setting up magnetometer */
	writeRegister(SMPDIV,19);
 80015da:	2319      	movs	r3, #25
 80015dc:	2113      	movs	r1, #19
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fe90 	bl	8001304 <writeRegister>

	if(srd > 9)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b09      	cmp	r3, #9
 80015e8:	d918      	bls.n	800161c <MPU9250_SetSampleRateDivider+0x4c>
	{
		// set AK8963 to Power Down
		writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80015ea:	230a      	movs	r3, #10
 80015ec:	2200      	movs	r2, #0
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff feaf 	bl	8001354 <writeAK8963Register>

		// long wait between AK8963 mode changes
		HAL_Delay(100);
 80015f6:	2064      	movs	r0, #100	; 0x64
 80015f8:	f001 fd1a 	bl	8003030 <HAL_Delay>

		// set AK8963 to 16 bit resolution, 8 Hz update rate
		writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1);
 80015fc:	230a      	movs	r3, #10
 80015fe:	2212      	movs	r2, #18
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fea6 	bl	8001354 <writeAK8963Register>

		// long wait between AK8963 mode changes
		HAL_Delay(100);
 8001608:	2064      	movs	r0, #100	; 0x64
 800160a:	f001 fd11 	bl	8003030 <HAL_Delay>

		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		readAK8963Registers(AK8963_HXL,7,_buffer);
 800160e:	2303      	movs	r3, #3
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <MPU9250_SetSampleRateDivider+0x90>)
 8001612:	2107      	movs	r1, #7
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fec4 	bl	80013a2 <readAK8963Registers>
 800161a:	e017      	b.n	800164c <MPU9250_SetSampleRateDivider+0x7c>

	}
	else
	{
		// set AK8963 to Power Down
		writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800161c:	230a      	movs	r3, #10
 800161e:	2200      	movs	r2, #0
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fe96 	bl	8001354 <writeAK8963Register>
		// long wait between AK8963 mode changes
		HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	; 0x64
 800162a:	f001 fd01 	bl	8003030 <HAL_Delay>
		// set AK8963 to 16 bit resolution, 100 Hz update rate
		writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 800162e:	230a      	movs	r3, #10
 8001630:	2216      	movs	r2, #22
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fe8d 	bl	8001354 <writeAK8963Register>

		// long wait between AK8963 mode changes
		HAL_Delay(100);
 800163a:	2064      	movs	r0, #100	; 0x64
 800163c:	f001 fcf8 	bl	8003030 <HAL_Delay>

		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		readAK8963Registers(AK8963_HXL,7,_buffer);
 8001640:	2303      	movs	r3, #3
 8001642:	4a07      	ldr	r2, [pc, #28]	; (8001660 <MPU9250_SetSampleRateDivider+0x90>)
 8001644:	2107      	movs	r1, #7
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff feab 	bl	80013a2 <readAK8963Registers>
	}

	writeRegister(SMPDIV, srd);
 800164c:	2219      	movs	r2, #25
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f7ff fe56 	bl	8001304 <writeRegister>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000200 	.word	0x20000200

08001664 <MPU9250_GetData>:

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8001670:	233b      	movs	r3, #59	; 0x3b
 8001672:	4a6e      	ldr	r2, [pc, #440]	; (800182c <MPU9250_GetData+0x1c8>)
 8001674:	2115      	movs	r1, #21
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fe59 	bl	800132e <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 800167c:	4b6b      	ldr	r3, [pc, #428]	; (800182c <MPU9250_GetData+0x1c8>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b21a      	sxth	r2, r3
 8001684:	4b69      	ldr	r3, [pc, #420]	; (800182c <MPU9250_GetData+0x1c8>)
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21a      	sxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001692:	4b66      	ldr	r3, [pc, #408]	; (800182c <MPU9250_GetData+0x1c8>)
 8001694:	789b      	ldrb	r3, [r3, #2]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b219      	sxth	r1, r3
 800169a:	4b64      	ldr	r3, [pc, #400]	; (800182c <MPU9250_GetData+0x1c8>)
 800169c:	78db      	ldrb	r3, [r3, #3]
 800169e:	b21a      	sxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3302      	adds	r3, #2
 80016a4:	430a      	orrs	r2, r1
 80016a6:	b212      	sxth	r2, r2
 80016a8:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 80016aa:	4b60      	ldr	r3, [pc, #384]	; (800182c <MPU9250_GetData+0x1c8>)
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b219      	sxth	r1, r3
 80016b2:	4b5e      	ldr	r3, [pc, #376]	; (800182c <MPU9250_GetData+0x1c8>)
 80016b4:	795b      	ldrb	r3, [r3, #5]
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3304      	adds	r3, #4
 80016bc:	430a      	orrs	r2, r1
 80016be:	b212      	sxth	r2, r2
 80016c0:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 80016c2:	4b5a      	ldr	r3, [pc, #360]	; (800182c <MPU9250_GetData+0x1c8>)
 80016c4:	7a1b      	ldrb	r3, [r3, #8]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	4b58      	ldr	r3, [pc, #352]	; (800182c <MPU9250_GetData+0x1c8>)
 80016cc:	7a5b      	ldrb	r3, [r3, #9]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 80016d8:	4b54      	ldr	r3, [pc, #336]	; (800182c <MPU9250_GetData+0x1c8>)
 80016da:	7a9b      	ldrb	r3, [r3, #10]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b219      	sxth	r1, r3
 80016e0:	4b52      	ldr	r3, [pc, #328]	; (800182c <MPU9250_GetData+0x1c8>)
 80016e2:	7adb      	ldrb	r3, [r3, #11]
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3302      	adds	r3, #2
 80016ea:	430a      	orrs	r2, r1
 80016ec:	b212      	sxth	r2, r2
 80016ee:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80016f0:	4b4e      	ldr	r3, [pc, #312]	; (800182c <MPU9250_GetData+0x1c8>)
 80016f2:	7b1b      	ldrb	r3, [r3, #12]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b219      	sxth	r1, r3
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <MPU9250_GetData+0x1c8>)
 80016fa:	7b5b      	ldrb	r3, [r3, #13]
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3304      	adds	r3, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	b212      	sxth	r2, r2
 8001706:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <MPU9250_GetData+0x1c8>)
 800170a:	7bdb      	ldrb	r3, [r3, #15]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	b21a      	sxth	r2, r3
 8001710:	4b46      	ldr	r3, [pc, #280]	; (800182c <MPU9250_GetData+0x1c8>)
 8001712:	7b9b      	ldrb	r3, [r3, #14]
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 800171a:	4b44      	ldr	r3, [pc, #272]	; (800182c <MPU9250_GetData+0x1c8>)
 800171c:	7c5b      	ldrb	r3, [r3, #17]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <MPU9250_GetData+0x1c8>)
 8001724:	7c1b      	ldrb	r3, [r3, #16]
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 800172c:	4b3f      	ldr	r3, [pc, #252]	; (800182c <MPU9250_GetData+0x1c8>)
 800172e:	7cdb      	ldrb	r3, [r3, #19]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	4b3d      	ldr	r3, [pc, #244]	; (800182c <MPU9250_GetData+0x1c8>)
 8001736:	7c9b      	ldrb	r3, [r3, #18]
 8001738:	b21b      	sxth	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 800173e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fb16 	bl	8000d74 <__aeabi_i2f>
 8001748:	4604      	mov	r4, r0
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <MPU9250_GetData+0x1cc>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3b80      	subs	r3, #128	; 0x80
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fb0f 	bl	8000d74 <__aeabi_i2f>
 8001756:	4603      	mov	r3, r0
 8001758:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fc11 	bl	8000f84 <__aeabi_fdiv>
 8001762:	4603      	mov	r3, r0
 8001764:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fa4f 	bl	8000c0c <__addsf3>
 800176e:	4603      	mov	r3, r0
 8001770:	4619      	mov	r1, r3
 8001772:	4620      	mov	r0, r4
 8001774:	f7ff fb52 	bl	8000e1c <__aeabi_fmul>
 8001778:	4603      	mov	r3, r0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fd14 	bl	80011a8 <__aeabi_f2iz>
 8001780:	4603      	mov	r3, r0
 8001782:	b21a      	sxth	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8001788:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff faf1 	bl	8000d74 <__aeabi_i2f>
 8001792:	4604      	mov	r4, r0
 8001794:	4b26      	ldr	r3, [pc, #152]	; (8001830 <MPU9250_GetData+0x1cc>)
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	3b80      	subs	r3, #128	; 0x80
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff faea 	bl	8000d74 <__aeabi_i2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fbec 	bl	8000f84 <__aeabi_fdiv>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fa2a 	bl	8000c0c <__addsf3>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fb2d 	bl	8000e1c <__aeabi_fmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1c9c      	adds	r4, r3, #2
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff fcec 	bl	80011a8 <__aeabi_f2iz>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	8023      	strh	r3, [r4, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 80017d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff faca 	bl	8000d74 <__aeabi_i2f>
 80017e0:	4604      	mov	r4, r0
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <MPU9250_GetData+0x1cc>)
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	3b80      	subs	r3, #128	; 0x80
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fac3 	bl	8000d74 <__aeabi_i2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fbc5 	bl	8000f84 <__aeabi_fdiv>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa03 	bl	8000c0c <__addsf3>
 8001806:	4603      	mov	r3, r0
 8001808:	4619      	mov	r1, r3
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff fb06 	bl	8000e1c <__aeabi_fmul>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1d1c      	adds	r4, r3, #4
 8001818:	4610      	mov	r0, r2
 800181a:	f7ff fcc5 	bl	80011a8 <__aeabi_f2iz>
 800181e:	4603      	mov	r3, r0
 8001820:	b21b      	sxth	r3, r3
 8001822:	8023      	strh	r3, [r4, #0]
}
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	20000200 	.word	0x20000200
 8001830:	20000218 	.word	0x20000218

08001834 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800184e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001852:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001856:	4a27      	ldr	r2, [pc, #156]	; (80018f4 <MX_FSMC_Init+0xc0>)
 8001858:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800186e:	2210      	movs	r2, #16
 8001870:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800188c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001894:	2200      	movs	r2, #0
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800189a:	2200      	movs	r2, #0
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_FSMC_Init+0xbc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_FSMC_Init+0xbc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80018aa:	230f      	movs	r3, #15
 80018ac:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80018ae:	230f      	movs	r3, #15
 80018b0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80018b2:	23ff      	movs	r3, #255	; 0xff
 80018b4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80018b6:	230f      	movs	r3, #15
 80018b8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80018ba:	2310      	movs	r3, #16
 80018bc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80018be:	2311      	movs	r3, #17
 80018c0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <MX_FSMC_Init+0xbc>)
 80018ce:	f003 fc27 	bl	8005120 <HAL_SRAM_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80018d8:	f001 f8c2 	bl	8002a60 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_FSMC_Init+0xc4>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <MX_FSMC_Init+0xc4>)
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80018e8:	bf00      	nop
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000021c 	.word	0x2000021c
 80018f4:	a0000104 	.word	0xa0000104
 80018f8:	40010000 	.word	0x40010000

080018fc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_FSMC_MspInit+0x78>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d129      	bne.n	800196c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_FSMC_MspInit+0x78>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_FSMC_MspInit+0x7c>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <HAL_FSMC_MspInit+0x7c>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_FSMC_MspInit+0x7c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001936:	f64f 7380 	movw	r3, #65408	; 0xff80
 800193a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	4619      	mov	r1, r3
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <HAL_FSMC_MspInit+0x80>)
 800194c:	f001 fca2 	bl	8003294 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001950:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001954:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	4619      	mov	r1, r3
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <HAL_FSMC_MspInit+0x84>)
 8001966:	f001 fc95 	bl	8003294 <HAL_GPIO_Init>
 800196a:	e000      	b.n	800196e <HAL_FSMC_MspInit+0x72>
    return;
 800196c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000264 	.word	0x20000264
 8001978:	40021000 	.word	0x40021000
 800197c:	40011800 	.word	0x40011800
 8001980:	40011400 	.word	0x40011400

08001984 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800198c:	f7ff ffb6 	bl	80018fc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0318 	add.w	r3, r7, #24
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ac:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a4b      	ldr	r2, [pc, #300]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a45      	ldr	r2, [pc, #276]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019dc:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a3f      	ldr	r2, [pc, #252]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f4:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a39      	ldr	r2, [pc, #228]	; (8001ae0 <MX_GPIO_Init+0x148>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <MX_GPIO_Init+0x148>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0c:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <MX_GPIO_Init+0x148>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a33      	ldr	r2, [pc, #204]	; (8001ae0 <MX_GPIO_Init+0x148>)
 8001a12:	f043 0320 	orr.w	r3, r3, #32
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <MX_GPIO_Init+0x148>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2a:	482e      	ldr	r0, [pc, #184]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a2c:	f001 fddd 	bl	80035ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	2140      	movs	r1, #64	; 0x40
 8001a34:	482c      	ldr	r0, [pc, #176]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001a36:	f001 fdd8 	bl	80035ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GY_CS_GPIO_Port, GY_CS_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	482a      	ldr	r0, [pc, #168]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001a40:	f001 fdd3 	bl	80035ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2102      	movs	r1, #2
 8001a48:	4828      	ldr	r0, [pc, #160]	; (8001aec <MX_GPIO_Init+0x154>)
 8001a4a:	f001 fdce 	bl	80035ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0318 	add.w	r3, r7, #24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4823      	ldr	r0, [pc, #140]	; (8001af0 <MX_GPIO_Init+0x158>)
 8001a62:	f001 fc17 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2302      	movs	r3, #2
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4819      	ldr	r0, [pc, #100]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a80:	f001 fc08 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001a9c:	f001 fbfa 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GY_CS_Pin;
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GY_CS_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001ab8:	f001 fbec 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <MX_GPIO_Init+0x154>)
 8001ad4:	f001 fbde 	bl	8003294 <HAL_GPIO_Init>

}
 8001ad8:	bf00      	nop
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40011400 	.word	0x40011400
 8001ae8:	40011000 	.word	0x40011000
 8001aec:	40011800 	.word	0x40011800
 8001af0:	40010800 	.word	0x40010800

08001af4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <MX_I2C2_Init+0x54>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_I2C2_Init+0x58>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_I2C2_Init+0x50>)
 8001b32:	f001 fd73 	bl	800361c <HAL_I2C_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b3c:	f000 ff90 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000268 	.word	0x20000268
 8001b48:	40005800 	.word	0x40005800
 8001b4c:	000186a0 	.word	0x000186a0

08001b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <HAL_I2C_MspInit+0x74>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d124      	bne.n	8001bba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_I2C_MspInit+0x78>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_I2C_MspInit+0x78>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_I2C_MspInit+0x78>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_I2C_MspInit+0x7c>)
 8001b9e:	f001 fb79 	bl	8003294 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_I2C_MspInit+0x78>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0x78>)
 8001ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_I2C_MspInit+0x78>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40005800 	.word	0x40005800
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010c00 	.word	0x40010c00

08001bd0 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	e002      	b.n	8001be0 <Delay+0x10>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f9      	bne.n	8001bda <Delay+0xa>
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <LCD_INIT>:

void LCD_INIT ( void )
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f000 f829 	bl	8001c50 <LCD_BackLed_Control>
	LCD_Rst();
 8001bfe:	f000 f80f 	bl	8001c20 <LCD_Rst>
	LCD_REG_Config();
 8001c02:	f000 f85f 	bl	8001cc4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c10:	22f0      	movs	r2, #240	; 0xf0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2000      	movs	r0, #0
 8001c16:	f000 f9e6 	bl	8001fe6 <LCD_Clear>
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2102      	movs	r1, #2
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <LCD_Rst+0x28>)
 8001c2a:	f001 fcde 	bl	80035ea <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <LCD_Rst+0x2c>)
 8001c30:	f7ff ffce 	bl	8001bd0 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	2102      	movs	r1, #2
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <LCD_Rst+0x28>)
 8001c3a:	f001 fcd6 	bl	80035ea <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001c3e:	4803      	ldr	r0, [pc, #12]	; (8001c4c <LCD_Rst+0x2c>)
 8001c40:	f7ff ffc6 	bl	8001bd0 <Delay>
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40011800 	.word	0x40011800
 8001c4c:	0002bffc 	.word	0x0002bffc

08001c50 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c66:	4807      	ldr	r0, [pc, #28]	; (8001c84 <LCD_BackLed_Control+0x34>)
 8001c68:	f001 fcbf 	bl	80035ea <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001c6c:	e005      	b.n	8001c7a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <LCD_BackLed_Control+0x34>)
 8001c76:	f001 fcb8 	bl	80035ea <HAL_GPIO_WritePin>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40011400 	.word	0x40011400

08001c88 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001c92:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	8013      	strh	r3, [r2, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <LCD_Write_Data+0x1c>)
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	8013      	strh	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	60020000 	.word	0x60020000

08001cc4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001cc8:	20cf      	movs	r0, #207	; 0xcf
 8001cca:	f7ff ffdd 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff ffe8 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001cd4:	2081      	movs	r0, #129	; 0x81
 8001cd6:	f7ff ffe5 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001cda:	2030      	movs	r0, #48	; 0x30
 8001cdc:	f7ff ffe2 	bl	8001ca4 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001ce0:	20ed      	movs	r0, #237	; 0xed
 8001ce2:	f7ff ffd1 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001ce6:	2064      	movs	r0, #100	; 0x64
 8001ce8:	f7ff ffdc 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001cec:	2003      	movs	r0, #3
 8001cee:	f7ff ffd9 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001cf2:	2012      	movs	r0, #18
 8001cf4:	f7ff ffd6 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001cf8:	2081      	movs	r0, #129	; 0x81
 8001cfa:	f7ff ffd3 	bl	8001ca4 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001cfe:	20e8      	movs	r0, #232	; 0xe8
 8001d00:	f7ff ffc2 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001d04:	2085      	movs	r0, #133	; 0x85
 8001d06:	f7ff ffcd 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001d0a:	2010      	movs	r0, #16
 8001d0c:	f7ff ffca 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001d10:	2078      	movs	r0, #120	; 0x78
 8001d12:	f7ff ffc7 	bl	8001ca4 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001d16:	20cb      	movs	r0, #203	; 0xcb
 8001d18:	f7ff ffb6 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001d1c:	2039      	movs	r0, #57	; 0x39
 8001d1e:	f7ff ffc1 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001d22:	202c      	movs	r0, #44	; 0x2c
 8001d24:	f7ff ffbe 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff ffbb 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001d2e:	2034      	movs	r0, #52	; 0x34
 8001d30:	f7ff ffb8 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7ff ffb5 	bl	8001ca4 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001d3a:	20f7      	movs	r0, #247	; 0xf7
 8001d3c:	f7ff ffa4 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001d40:	2020      	movs	r0, #32
 8001d42:	f7ff ffaf 	bl	8001ca4 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001d46:	20ea      	movs	r0, #234	; 0xea
 8001d48:	f7ff ff9e 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff ffa9 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff ffa6 	bl	8001ca4 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001d58:	20b1      	movs	r0, #177	; 0xb1
 8001d5a:	f7ff ff95 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff ffa0 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001d64:	201b      	movs	r0, #27
 8001d66:	f7ff ff9d 	bl	8001ca4 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001d6a:	20b6      	movs	r0, #182	; 0xb6
 8001d6c:	f7ff ff8c 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001d70:	200a      	movs	r0, #10
 8001d72:	f7ff ff97 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001d76:	20a2      	movs	r0, #162	; 0xa2
 8001d78:	f7ff ff94 	bl	8001ca4 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001d7c:	20c0      	movs	r0, #192	; 0xc0
 8001d7e:	f7ff ff83 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001d82:	2035      	movs	r0, #53	; 0x35
 8001d84:	f7ff ff8e 	bl	8001ca4 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001d88:	20c1      	movs	r0, #193	; 0xc1
 8001d8a:	f7ff ff7d 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001d8e:	2011      	movs	r0, #17
 8001d90:	f7ff ff88 	bl	8001ca4 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001d94:	20c5      	movs	r0, #197	; 0xc5
 8001d96:	f7ff ff77 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001d9a:	2045      	movs	r0, #69	; 0x45
 8001d9c:	f7ff ff82 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001da0:	2045      	movs	r0, #69	; 0x45
 8001da2:	f7ff ff7f 	bl	8001ca4 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001da6:	20c7      	movs	r0, #199	; 0xc7
 8001da8:	f7ff ff6e 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001dac:	20a2      	movs	r0, #162	; 0xa2
 8001dae:	f7ff ff79 	bl	8001ca4 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001db2:	20f2      	movs	r0, #242	; 0xf2
 8001db4:	f7ff ff68 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff ff73 	bl	8001ca4 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001dbe:	2026      	movs	r0, #38	; 0x26
 8001dc0:	f7ff ff62 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff ff6d 	bl	8001ca4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001dca:	20e0      	movs	r0, #224	; 0xe0
 8001dcc:	f7ff ff5c 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f7ff ff67 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001dd6:	2026      	movs	r0, #38	; 0x26
 8001dd8:	f7ff ff64 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001ddc:	2024      	movs	r0, #36	; 0x24
 8001dde:	f7ff ff61 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001de2:	200b      	movs	r0, #11
 8001de4:	f7ff ff5e 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001de8:	200e      	movs	r0, #14
 8001dea:	f7ff ff5b 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001dee:	2009      	movs	r0, #9
 8001df0:	f7ff ff58 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001df4:	2054      	movs	r0, #84	; 0x54
 8001df6:	f7ff ff55 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001dfa:	20a8      	movs	r0, #168	; 0xa8
 8001dfc:	f7ff ff52 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001e00:	2046      	movs	r0, #70	; 0x46
 8001e02:	f7ff ff4f 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001e06:	200c      	movs	r0, #12
 8001e08:	f7ff ff4c 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001e0c:	2017      	movs	r0, #23
 8001e0e:	f7ff ff49 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001e12:	2009      	movs	r0, #9
 8001e14:	f7ff ff46 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001e18:	200f      	movs	r0, #15
 8001e1a:	f7ff ff43 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001e1e:	2007      	movs	r0, #7
 8001e20:	f7ff ff40 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff ff3d 	bl	8001ca4 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001e2a:	20e1      	movs	r0, #225	; 0xe1
 8001e2c:	f7ff ff2c 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff ff37 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001e36:	2019      	movs	r0, #25
 8001e38:	f7ff ff34 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001e3c:	201b      	movs	r0, #27
 8001e3e:	f7ff ff31 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001e42:	2004      	movs	r0, #4
 8001e44:	f7ff ff2e 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001e48:	2010      	movs	r0, #16
 8001e4a:	f7ff ff2b 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001e4e:	2007      	movs	r0, #7
 8001e50:	f7ff ff28 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001e54:	202a      	movs	r0, #42	; 0x2a
 8001e56:	f7ff ff25 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001e5a:	2047      	movs	r0, #71	; 0x47
 8001e5c:	f7ff ff22 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001e60:	2039      	movs	r0, #57	; 0x39
 8001e62:	f7ff ff1f 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001e66:	2003      	movs	r0, #3
 8001e68:	f7ff ff1c 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001e6c:	2006      	movs	r0, #6
 8001e6e:	f7ff ff19 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001e72:	2006      	movs	r0, #6
 8001e74:	f7ff ff16 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001e78:	2030      	movs	r0, #48	; 0x30
 8001e7a:	f7ff ff13 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001e7e:	2038      	movs	r0, #56	; 0x38
 8001e80:	f7ff ff10 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001e84:	200f      	movs	r0, #15
 8001e86:	f7ff ff0d 	bl	8001ca4 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001e8a:	2036      	movs	r0, #54	; 0x36
 8001e8c:	f7ff fefc 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001e90:	20c8      	movs	r0, #200	; 0xc8
 8001e92:	f7ff ff07 	bl	8001ca4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001e96:	202a      	movs	r0, #42	; 0x2a
 8001e98:	f7ff fef6 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff ff01 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fefe 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fefb 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001eae:	20ef      	movs	r0, #239	; 0xef
 8001eb0:	f7ff fef8 	bl	8001ca4 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001eb4:	202b      	movs	r0, #43	; 0x2b
 8001eb6:	f7ff fee7 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fef2 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff feef 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f7ff feec 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001ecc:	203f      	movs	r0, #63	; 0x3f
 8001ece:	f7ff fee9 	bl	8001ca4 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001ed2:	203a      	movs	r0, #58	; 0x3a
 8001ed4:	f7ff fed8 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001ed8:	2055      	movs	r0, #85	; 0x55
 8001eda:	f7ff fee3 	bl	8001ca4 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001ede:	2011      	movs	r0, #17
 8001ee0:	f7ff fed2 	bl	8001c88 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <LCD_REG_Config+0x230>)
 8001ee6:	f7ff fe73 	bl	8001bd0 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001eea:	2029      	movs	r0, #41	; 0x29
 8001eec:	f7ff fecc 	bl	8001c88 <LCD_Write_Cmd>
	
	
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0002bffc 	.word	0x0002bffc

08001ef8 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4604      	mov	r4, r0
 8001f00:	4608      	mov	r0, r1
 8001f02:	4611      	mov	r1, r2
 8001f04:	461a      	mov	r2, r3
 8001f06:	4623      	mov	r3, r4
 8001f08:	80fb      	strh	r3, [r7, #6]
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80bb      	strh	r3, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	807b      	strh	r3, [r7, #2]
 8001f12:	4613      	mov	r3, r2
 8001f14:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001f16:	202a      	movs	r0, #42	; 0x2a
 8001f18:	f7ff feb6 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff febe 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff feb8 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	121b      	asrs	r3, r3, #8
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff feaf 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fea4 	bl	8001ca4 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001f5c:	202b      	movs	r0, #43	; 0x2b
 8001f5e:	f7ff fe93 	bl	8001c88 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001f62:	88bb      	ldrh	r3, [r7, #4]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fe9b 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001f6e:	88bb      	ldrh	r3, [r7, #4]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fe95 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001f7a:	88ba      	ldrh	r2, [r7, #4]
 8001f7c:	883b      	ldrh	r3, [r7, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b01      	subs	r3, #1
 8001f82:	121b      	asrs	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fe8c 	bl	8001ca4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001f8c:	88ba      	ldrh	r2, [r7, #4]
 8001f8e:	883b      	ldrh	r3, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fe81 	bl	8001ca4 <LCD_Write_Data>
	
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd90      	pop	{r4, r7, pc}

08001faa <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001fba:	202c      	movs	r0, #44	; 0x2c
 8001fbc:	f7ff fe64 	bl	8001c88 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e006      	b.n	8001fd4 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fe6b 	bl	8001ca4 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d3f4      	bcc.n	8001fc6 <LCD_FillColor+0x1c>
		
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001fe6:	b590      	push	{r4, r7, lr}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4604      	mov	r4, r0
 8001fee:	4608      	mov	r0, r1
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4623      	mov	r3, r4
 8001ff6:	80fb      	strh	r3, [r7, #6]
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	80bb      	strh	r3, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
 8002000:	4613      	mov	r3, r2
 8002002:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8002004:	883b      	ldrh	r3, [r7, #0]
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	88b9      	ldrh	r1, [r7, #4]
 800200a:	88f8      	ldrh	r0, [r7, #6]
 800200c:	f7ff ff74 	bl	8001ef8 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	883a      	ldrh	r2, [r7, #0]
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	461a      	mov	r2, r3
 800201a:	8b3b      	ldrh	r3, [r7, #24]
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f7ff ffc3 	bl	8001faa <LCD_FillColor>
	
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bd90      	pop	{r4, r7, pc}

0800202c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	80fb      	strh	r3, [r7, #6]
 8002036:	460b      	mov	r3, r1
 8002038:	80bb      	strh	r3, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	3b20      	subs	r3, #32
 8002042:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002044:	88b9      	ldrh	r1, [r7, #4]
 8002046:	88f8      	ldrh	r0, [r7, #6]
 8002048:	2310      	movs	r3, #16
 800204a:	2208      	movs	r2, #8
 800204c:	f7ff ff54 	bl	8001ef8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8002050:	202c      	movs	r0, #44	; 0x2c
 8002052:	f7ff fe19 	bl	8001c88 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002056:	2300      	movs	r3, #0
 8002058:	73bb      	strb	r3, [r7, #14]
 800205a:	e023      	b.n	80020a4 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800205c:	7b3a      	ldrb	r2, [r7, #12]
 800205e:	7bbb      	ldrb	r3, [r7, #14]
 8002060:	4914      	ldr	r1, [pc, #80]	; (80020b4 <LCD_DrawChar+0x88>)
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	440a      	add	r2, r1
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800206c:	2300      	movs	r3, #0
 800206e:	737b      	strb	r3, [r7, #13]
 8002070:	e012      	b.n	8002098 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800207c:	201f      	movs	r0, #31
 800207e:	f7ff fe11 	bl	8001ca4 <LCD_Write_Data>
 8002082:	e003      	b.n	800208c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8002084:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002088:	f7ff fe0c 	bl	8001ca4 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002092:	7b7b      	ldrb	r3, [r7, #13]
 8002094:	3301      	adds	r3, #1
 8002096:	737b      	strb	r3, [r7, #13]
 8002098:	7b7b      	ldrb	r3, [r7, #13]
 800209a:	2b07      	cmp	r3, #7
 800209c:	d9e9      	bls.n	8002072 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800209e:	7bbb      	ldrb	r3, [r7, #14]
 80020a0:	3301      	adds	r3, #1
 80020a2:	73bb      	strb	r3, [r7, #14]
 80020a4:	7bbb      	ldrb	r3, [r7, #14]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	d9d8      	bls.n	800205c <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	08008a1c 	.word	0x08008a1c

080020b8 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	603a      	str	r2, [r7, #0]
 80020c2:	80fb      	strh	r3, [r7, #6]
 80020c4:	460b      	mov	r3, r1
 80020c6:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80020c8:	e01c      	b.n	8002104 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	2be8      	cmp	r3, #232	; 0xe8
 80020ce:	d904      	bls.n	80020da <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80020d0:	2300      	movs	r3, #0
 80020d2:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	3310      	adds	r3, #16
 80020d8:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80020da:	88bb      	ldrh	r3, [r7, #4]
 80020dc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80020e0:	d903      	bls.n	80020ea <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80020e2:	2300      	movs	r3, #0
 80020e4:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	88b9      	ldrh	r1, [r7, #4]
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff9a 	bl	800202c <LCD_DrawChar>
		
		pStr ++;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	3308      	adds	r3, #8
 8002102:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1de      	bne.n	80020ca <LCD_DrawString+0x12>
		
	}
	
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002120:	f000 ff24 	bl	8002f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002124:	f000 fbae 	bl	8002884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002128:	f7ff fc36 	bl	8001998 <MX_GPIO_Init>
  MX_I2C2_Init();
 800212c:	f7ff fce2 	bl	8001af4 <MX_I2C2_Init>
  MX_FSMC_Init();
 8002130:	f7ff fb80 	bl	8001834 <MX_FSMC_Init>
  MX_TIM2_Init();
 8002134:	f000 fe84 	bl	8002e40 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002138:	f000 fcd8 	bl	8002aec <MX_SPI1_Init>
  MX_RTC_Init();
 800213c:	f000 fc96 	bl	8002a6c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8002140:	f7ff fd57 	bl	8001bf2 <LCD_INIT>
  MPU9250_Init();
 8002144:	f7ff f974 	bl	8001430 <MPU9250_Init>
  MPU9250_SetAccelRange(ACCEL_RANGE_8G);
 8002148:	2002      	movs	r0, #2
 800214a:	f7ff fa23 	bl	8001594 <MPU9250_SetAccelRange>
  MPU9250_SetGyroRange(GYRO_RANGE_1000DPS);
 800214e:	2002      	movs	r0, #2
 8002150:	f7ff fa2f 	bl	80015b2 <MPU9250_SetGyroRange>
  MPU9250_SetSampleRateDivider(LP_ACCEL_ODR_500HZ);
 8002154:	200b      	movs	r0, #11
 8002156:	f7ff fa3b 	bl	80015d0 <MPU9250_SetSampleRateDivider>
  imu_calibrateGyro_noclass(Gyro_offset);
 800215a:	4861      	ldr	r0, [pc, #388]	; (80022e0 <main+0x1c8>)
 800215c:	f000 fbf2 	bl	8002944 <imu_calibrateGyro_noclass>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!runned) {
 8002160:	4b60      	ldr	r3, [pc, #384]	; (80022e4 <main+0x1cc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10c      	bne.n	8002182 <main+0x6a>

		  LCD_Clear(0,0, 239,319, WHITE);
 8002168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	f240 133f 	movw	r3, #319	; 0x13f
 8002172:	22ef      	movs	r2, #239	; 0xef
 8002174:	2100      	movs	r1, #0
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff ff35 	bl	8001fe6 <LCD_Clear>
		  runned = 1;
 800217c:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <main+0x1cc>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
	  }

	  MPU9250_GetData(AccData, MagData, GyroData);
 8002182:	4a59      	ldr	r2, [pc, #356]	; (80022e8 <main+0x1d0>)
 8002184:	4959      	ldr	r1, [pc, #356]	; (80022ec <main+0x1d4>)
 8002186:	485a      	ldr	r0, [pc, #360]	; (80022f0 <main+0x1d8>)
 8002188:	f7ff fa6c 	bl	8001664 <MPU9250_GetData>
//	  mag0 = MagData[0];
//	  mag1 = MagData[1];
//	  mag2 = MagData[2];
	  //MahonyAHRSupdateIMU(gyro0,gyro1,gyro2, acc0, acc1, acc2, pitch, roll, yaw);
	  //MahonyAHRSupdate(gyro0,gyro1,gyro2, acc0, acc1, acc2,mag0,mag1,mag2);
	  imu_normalizeGyro(GyroData,Gyro_offset);
 800218c:	4954      	ldr	r1, [pc, #336]	; (80022e0 <main+0x1c8>)
 800218e:	4856      	ldr	r0, [pc, #344]	; (80022e8 <main+0x1d0>)
 8002190:	f000 fc3e 	bl	8002a10 <imu_normalizeGyro>
//	  printf("%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d\n",
//	    (int16_t)AccData[0], (int16_t)AccData[1], (int16_t)AccData[2],
//	    (int16_t)GyroData[0], (int16_t)GyroData[1], (int16_t)GyroData[2],
//	    (int16_t)MagData[0], (int16_t)MagData[1], (int16_t)MagData[2]);

	  for (int i=0;i<3;i++) {
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	e082      	b.n	80022a0 <main+0x188>
		  acc[i] = AccData[i]/2048.0;
 800219a:	4a55      	ldr	r2, [pc, #340]	; (80022f0 <main+0x1d8>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f99a 	bl	80004dc <__aeabi_i2d>
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b51      	ldr	r3, [pc, #324]	; (80022f4 <main+0x1dc>)
 80021ae:	f7fe fb29 	bl	8000804 <__aeabi_ddiv>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fcd1 	bl	8000b60 <__aeabi_d2f>
 80021be:	4602      	mov	r2, r0
 80021c0:	494d      	ldr	r1, [pc, #308]	; (80022f8 <main+0x1e0>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  mag[i] = MagData[i];
 80021c8:	4a48      	ldr	r2, [pc, #288]	; (80022ec <main+0x1d4>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fdcf 	bl	8000d74 <__aeabi_i2f>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4948      	ldr	r1, [pc, #288]	; (80022fc <main+0x1e4>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  gyro[i] = (GyroData[i] - Gyro_offset[i])/ 131.0;
 80021e0:	4a41      	ldr	r2, [pc, #260]	; (80022e8 <main+0x1d0>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4a3d      	ldr	r2, [pc, #244]	; (80022e0 <main+0x1c8>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80021f2:	1acb      	subs	r3, r1, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f971 	bl	80004dc <__aeabi_i2d>
 80021fa:	a337      	add	r3, pc, #220	; (adr r3, 80022d8 <main+0x1c0>)
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	f7fe fb00 	bl	8000804 <__aeabi_ddiv>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f7fe fca8 	bl	8000b60 <__aeabi_d2f>
 8002210:	4602      	mov	r2, r0
 8002212:	493b      	ldr	r1, [pc, #236]	; (8002300 <main+0x1e8>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if ( -11 < gyro[i] && gyro[i] < 11){
 800221a:	4a39      	ldr	r2, [pc, #228]	; (8002300 <main+0x1e8>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	4938      	ldr	r1, [pc, #224]	; (8002304 <main+0x1ec>)
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe ffb5 	bl	8001194 <__aeabi_fcmpgt>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <main+0x13a>
 8002230:	4a33      	ldr	r2, [pc, #204]	; (8002300 <main+0x1e8>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	4933      	ldr	r1, [pc, #204]	; (8002308 <main+0x1f0>)
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe ff8c 	bl	8001158 <__aeabi_fcmplt>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <main+0x13a>
			  gyro[i] =0;
 8002246:	4a2e      	ldr	r2, [pc, #184]	; (8002300 <main+0x1e8>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
		  gyro[i] *= (PI/180.0);
 8002252:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <main+0x1e8>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f950 	bl	8000500 <__aeabi_f2d>
 8002260:	4604      	mov	r4, r0
 8002262:	460d      	mov	r5, r1
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <main+0x1f4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f949 	bl	8000500 <__aeabi_f2d>
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <main+0x1f8>)
 8002274:	f7fe fac6 	bl	8000804 <__aeabi_ddiv>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4620      	mov	r0, r4
 800227e:	4629      	mov	r1, r5
 8002280:	f7fe f996 	bl	80005b0 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fc68 	bl	8000b60 <__aeabi_d2f>
 8002290:	4602      	mov	r2, r0
 8002292:	491b      	ldr	r1, [pc, #108]	; (8002300 <main+0x1e8>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (int i=0;i<3;i++) {
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3301      	adds	r3, #1
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	f77f af79 	ble.w	800219a <main+0x82>
		  //gyro[i] = GyroData[i];
	  }

	  if ( -8.5 > acc[2]  && record == 1) {
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <main+0x1e0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4919      	ldr	r1, [pc, #100]	; (8002314 <main+0x1fc>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe ff52 	bl	8001158 <__aeabi_fcmplt>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d032      	beq.n	8002320 <main+0x208>
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <main+0x200>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12e      	bne.n	8002320 <main+0x208>
		  hit = 1; record = 0;
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <main+0x204>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <main+0x200>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
		  HAL_Delay(3);
 80022ce:	2003      	movs	r0, #3
 80022d0:	f000 feae 	bl	8003030 <HAL_Delay>
 80022d4:	e027      	b.n	8002326 <main+0x20e>
 80022d6:	bf00      	nop
 80022d8:	00000000 	.word	0x00000000
 80022dc:	40606000 	.word	0x40606000
 80022e0:	2000036c 	.word	0x2000036c
 80022e4:	200002bc 	.word	0x200002bc
 80022e8:	2000035c 	.word	0x2000035c
 80022ec:	20000364 	.word	0x20000364
 80022f0:	20000354 	.word	0x20000354
 80022f4:	40a00000 	.word	0x40a00000
 80022f8:	200002f4 	.word	0x200002f4
 80022fc:	2000030c 	.word	0x2000030c
 8002300:	20000300 	.word	0x20000300
 8002304:	c1300000 	.word	0xc1300000
 8002308:	41300000 	.word	0x41300000
 800230c:	20000004 	.word	0x20000004
 8002310:	40668000 	.word	0x40668000
 8002314:	c1080000 	.word	0xc1080000
 8002318:	20000000 	.word	0x20000000
 800231c:	200002c0 	.word	0x200002c0
	  } else {
		  hit = 0;
 8002320:	4b95      	ldr	r3, [pc, #596]	; (8002578 <main+0x460>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
	  }

	  if (-8.5 > acc[2] || acc[2] > 8.5) {
 8002326:	4b95      	ldr	r3, [pc, #596]	; (800257c <main+0x464>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	4995      	ldr	r1, [pc, #596]	; (8002580 <main+0x468>)
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe ff13 	bl	8001158 <__aeabi_fcmplt>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <main+0x232>
 8002338:	4b90      	ldr	r3, [pc, #576]	; (800257c <main+0x464>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4991      	ldr	r1, [pc, #580]	; (8002584 <main+0x46c>)
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe ff28 	bl	8001194 <__aeabi_fcmpgt>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <main+0x240>

		  gyro[2] = 0.0;
 800234a:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <main+0x470>)
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
		  HAL_Delay(3);
 8002352:	2003      	movs	r0, #3
 8002354:	f000 fe6c 	bl	8003030 <HAL_Delay>
	  }

	  if (hit == 1 && record == 0) {hitcount++; record = 1; }
 8002358:	4b87      	ldr	r3, [pc, #540]	; (8002578 <main+0x460>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d10b      	bne.n	8002378 <main+0x260>
 8002360:	4b8a      	ldr	r3, [pc, #552]	; (800258c <main+0x474>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <main+0x260>
 8002368:	4b89      	ldr	r3, [pc, #548]	; (8002590 <main+0x478>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	4a88      	ldr	r2, [pc, #544]	; (8002590 <main+0x478>)
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b86      	ldr	r3, [pc, #536]	; (800258c <main+0x474>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

	  previousTime = currentTime;
 8002378:	4b86      	ldr	r3, [pc, #536]	; (8002594 <main+0x47c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a86      	ldr	r2, [pc, #536]	; (8002598 <main+0x480>)
 800237e:	6013      	str	r3, [r2, #0]

	  currentTime = HAL_GetTick();
 8002380:	f000 fe4c 	bl	800301c <HAL_GetTick>
 8002384:	4603      	mov	r3, r0
 8002386:	4a83      	ldr	r2, [pc, #524]	; (8002594 <main+0x47c>)
 8002388:	6013      	str	r3, [r2, #0]
	  elapsedTime = (currentTime - previousTime) / 1000.0;
 800238a:	4b82      	ldr	r3, [pc, #520]	; (8002594 <main+0x47c>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b82      	ldr	r3, [pc, #520]	; (8002598 <main+0x480>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f891 	bl	80004bc <__aeabi_ui2d>
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b7f      	ldr	r3, [pc, #508]	; (800259c <main+0x484>)
 80023a0:	f7fe fa30 	bl	8000804 <__aeabi_ddiv>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fbd8 	bl	8000b60 <__aeabi_d2f>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4a7b      	ldr	r2, [pc, #492]	; (80025a0 <main+0x488>)
 80023b4:	6013      	str	r3, [r2, #0]

	  gyroAngleX = gyroAngleX + gyro[0]* elapsedTime;
 80023b6:	4b74      	ldr	r3, [pc, #464]	; (8002588 <main+0x470>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a79      	ldr	r2, [pc, #484]	; (80025a0 <main+0x488>)
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fd2b 	bl	8000e1c <__aeabi_fmul>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <main+0x48c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4610      	mov	r0, r2
 80023d2:	f7fe fc1b 	bl	8000c0c <__addsf3>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	4b72      	ldr	r3, [pc, #456]	; (80025a4 <main+0x48c>)
 80023dc:	601a      	str	r2, [r3, #0]
	  gyroAngleY = gyroAngleY + gyro[1]* elapsedTime;
 80023de:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <main+0x470>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a6f      	ldr	r2, [pc, #444]	; (80025a0 <main+0x488>)
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fd17 	bl	8000e1c <__aeabi_fmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <main+0x490>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7fe fc07 	bl	8000c0c <__addsf3>
 80023fe:	4603      	mov	r3, r0
 8002400:	461a      	mov	r2, r3
 8002402:	4b69      	ldr	r3, [pc, #420]	; (80025a8 <main+0x490>)
 8002404:	601a      	str	r2, [r3, #0]
	  gyroAngleZ = gyroAngleZ + gyro[2]* elapsedTime;
 8002406:	4b60      	ldr	r3, [pc, #384]	; (8002588 <main+0x470>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4a65      	ldr	r2, [pc, #404]	; (80025a0 <main+0x488>)
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fd03 	bl	8000e1c <__aeabi_fmul>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	4b64      	ldr	r3, [pc, #400]	; (80025ac <main+0x494>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7fe fbf3 	bl	8000c0c <__addsf3>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	4b60      	ldr	r3, [pc, #384]	; (80025ac <main+0x494>)
 800242c:	601a      	str	r2, [r3, #0]

	  acc0 = acc[0];
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <main+0x464>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5f      	ldr	r2, [pc, #380]	; (80025b0 <main+0x498>)
 8002434:	6013      	str	r3, [r2, #0]
	  acc1 = acc[1];
 8002436:	4b51      	ldr	r3, [pc, #324]	; (800257c <main+0x464>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a5e      	ldr	r2, [pc, #376]	; (80025b4 <main+0x49c>)
 800243c:	6013      	str	r3, [r2, #0]
	  acc2 = acc[2];
 800243e:	4b4f      	ldr	r3, [pc, #316]	; (800257c <main+0x464>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4a5d      	ldr	r2, [pc, #372]	; (80025b8 <main+0x4a0>)
 8002444:	6013      	str	r3, [r2, #0]
	  gyro0 = gyro[0];
 8002446:	4b50      	ldr	r3, [pc, #320]	; (8002588 <main+0x470>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a5c      	ldr	r2, [pc, #368]	; (80025bc <main+0x4a4>)
 800244c:	6013      	str	r3, [r2, #0]
	  gyro1 = gyro[1];
 800244e:	4b4e      	ldr	r3, [pc, #312]	; (8002588 <main+0x470>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <main+0x4a8>)
 8002454:	6013      	str	r3, [r2, #0]
	  gyro2 = gyro[2];
 8002456:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <main+0x470>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4a5a      	ldr	r2, [pc, #360]	; (80025c4 <main+0x4ac>)
 800245c:	6013      	str	r3, [r2, #0]
	  mag0 = MagData[0];
 800245e:	4b5a      	ldr	r3, [pc, #360]	; (80025c8 <main+0x4b0>)
 8002460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fc85 	bl	8000d74 <__aeabi_i2f>
 800246a:	4603      	mov	r3, r0
 800246c:	4a57      	ldr	r2, [pc, #348]	; (80025cc <main+0x4b4>)
 800246e:	6013      	str	r3, [r2, #0]
	  mag1 = MagData[1];
 8002470:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <main+0x4b0>)
 8002472:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fc7c 	bl	8000d74 <__aeabi_i2f>
 800247c:	4603      	mov	r3, r0
 800247e:	4a54      	ldr	r2, [pc, #336]	; (80025d0 <main+0x4b8>)
 8002480:	6013      	str	r3, [r2, #0]
	  mag2 = MagData[2];
 8002482:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <main+0x4b0>)
 8002484:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fc73 	bl	8000d74 <__aeabi_i2f>
 800248e:	4603      	mov	r3, r0
 8002490:	4a50      	ldr	r2, [pc, #320]	; (80025d4 <main+0x4bc>)
 8002492:	6013      	str	r3, [r2, #0]
//	  		  righting=0;
//	  }



	  if (gyroAngleZ > 0.95) {
 8002494:	4b45      	ldr	r3, [pc, #276]	; (80025ac <main+0x494>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f831 	bl	8000500 <__aeabi_f2d>
 800249e:	a330      	add	r3, pc, #192	; (adr r3, 8002560 <main+0x448>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe fb14 	bl	8000ad0 <__aeabi_dcmpgt>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00d      	beq.n	80024ca <main+0x3b2>
		  LCD_DrawString(100, 200, "Drum1");
 80024ae:	4a4a      	ldr	r2, [pc, #296]	; (80025d8 <main+0x4c0>)
 80024b0:	21c8      	movs	r1, #200	; 0xc8
 80024b2:	2064      	movs	r0, #100	; 0x64
 80024b4:	f7ff fe00 	bl	80020b8 <LCD_DrawString>
		  if (hit == 1) {gyroAngleZ = 1.2;}
 80024b8:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <main+0x460>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	f040 80c8 	bne.w	8002652 <main+0x53a>
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <main+0x494>)
 80024c4:	4a45      	ldr	r2, [pc, #276]	; (80025dc <main+0x4c4>)
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e0c3      	b.n	8002652 <main+0x53a>

	  } else if (0.1 <= gyroAngleZ  && gyroAngleZ < 0.95) {
 80024ca:	4b38      	ldr	r3, [pc, #224]	; (80025ac <main+0x494>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f816 	bl	8000500 <__aeabi_f2d>
 80024d4:	a324      	add	r3, pc, #144	; (adr r3, 8002568 <main+0x450>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe faef 	bl	8000abc <__aeabi_dcmpge>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01a      	beq.n	800251a <main+0x402>
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <main+0x494>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f809 	bl	8000500 <__aeabi_f2d>
 80024ee:	a31c      	add	r3, pc, #112	; (adr r3, 8002560 <main+0x448>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fe face 	bl	8000a94 <__aeabi_dcmplt>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <main+0x402>
		  LCD_DrawString(100, 200, "Drum2");
 80024fe:	4a38      	ldr	r2, [pc, #224]	; (80025e0 <main+0x4c8>)
 8002500:	21c8      	movs	r1, #200	; 0xc8
 8002502:	2064      	movs	r0, #100	; 0x64
 8002504:	f7ff fdd8 	bl	80020b8 <LCD_DrawString>
		  if (hit == 1) {gyroAngleZ = 0.45;}
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <main+0x460>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	f040 80a0 	bne.w	8002652 <main+0x53a>
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <main+0x494>)
 8002514:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <main+0x4cc>)
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e09b      	b.n	8002652 <main+0x53a>

	  } else if (-0.1 < gyroAngleZ && gyroAngleZ < 0.1) {
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <main+0x494>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd ffee 	bl	8000500 <__aeabi_f2d>
 8002524:	a312      	add	r3, pc, #72	; (adr r3, 8002570 <main+0x458>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe fad1 	bl	8000ad0 <__aeabi_dcmpgt>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d05b      	beq.n	80025ec <main+0x4d4>
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <main+0x494>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fd ffe1 	bl	8000500 <__aeabi_f2d>
 800253e:	a30a      	add	r3, pc, #40	; (adr r3, 8002568 <main+0x450>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fe faa6 	bl	8000a94 <__aeabi_dcmplt>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d04e      	beq.n	80025ec <main+0x4d4>
		  LCD_DrawString(100, 200, "Nothi");
 800254e:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <main+0x4d0>)
 8002550:	21c8      	movs	r1, #200	; 0xc8
 8002552:	2064      	movs	r0, #100	; 0x64
 8002554:	f7ff fdb0 	bl	80020b8 <LCD_DrawString>
 8002558:	e07b      	b.n	8002652 <main+0x53a>
 800255a:	bf00      	nop
 800255c:	f3af 8000 	nop.w
 8002560:	66666666 	.word	0x66666666
 8002564:	3fee6666 	.word	0x3fee6666
 8002568:	9999999a 	.word	0x9999999a
 800256c:	3fb99999 	.word	0x3fb99999
 8002570:	9999999a 	.word	0x9999999a
 8002574:	bfb99999 	.word	0xbfb99999
 8002578:	200002c0 	.word	0x200002c0
 800257c:	200002f4 	.word	0x200002f4
 8002580:	c1080000 	.word	0xc1080000
 8002584:	41080000 	.word	0x41080000
 8002588:	20000300 	.word	0x20000300
 800258c:	20000000 	.word	0x20000000
 8002590:	200002c4 	.word	0x200002c4
 8002594:	200002e8 	.word	0x200002e8
 8002598:	200002ec 	.word	0x200002ec
 800259c:	408f4000 	.word	0x408f4000
 80025a0:	200002f0 	.word	0x200002f0
 80025a4:	2000033c 	.word	0x2000033c
 80025a8:	20000340 	.word	0x20000340
 80025ac:	20000344 	.word	0x20000344
 80025b0:	20000318 	.word	0x20000318
 80025b4:	2000031c 	.word	0x2000031c
 80025b8:	20000320 	.word	0x20000320
 80025bc:	20000324 	.word	0x20000324
 80025c0:	20000328 	.word	0x20000328
 80025c4:	2000032c 	.word	0x2000032c
 80025c8:	20000364 	.word	0x20000364
 80025cc:	20000330 	.word	0x20000330
 80025d0:	20000334 	.word	0x20000334
 80025d4:	20000338 	.word	0x20000338
 80025d8:	08008940 	.word	0x08008940
 80025dc:	3f99999a 	.word	0x3f99999a
 80025e0:	08008948 	.word	0x08008948
 80025e4:	3ee66666 	.word	0x3ee66666
 80025e8:	08008950 	.word	0x08008950

	  } else if (-0.1 > gyroAngleZ && gyroAngleZ > -0.9) {
 80025ec:	4b8c      	ldr	r3, [pc, #560]	; (8002820 <main+0x708>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd ff85 	bl	8000500 <__aeabi_f2d>
 80025f6:	a386      	add	r3, pc, #536	; (adr r3, 8002810 <main+0x6f8>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fe fa4a 	bl	8000a94 <__aeabi_dcmplt>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d019      	beq.n	800263a <main+0x522>
 8002606:	4b86      	ldr	r3, [pc, #536]	; (8002820 <main+0x708>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd ff78 	bl	8000500 <__aeabi_f2d>
 8002610:	a381      	add	r3, pc, #516	; (adr r3, 8002818 <main+0x700>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fe fa5b 	bl	8000ad0 <__aeabi_dcmpgt>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00c      	beq.n	800263a <main+0x522>
		  LCD_DrawString(100, 200, "Drum3");
 8002620:	4a80      	ldr	r2, [pc, #512]	; (8002824 <main+0x70c>)
 8002622:	21c8      	movs	r1, #200	; 0xc8
 8002624:	2064      	movs	r0, #100	; 0x64
 8002626:	f7ff fd47 	bl	80020b8 <LCD_DrawString>
		  if (hit == 1 ) {gyroAngleZ = -0.45;}
 800262a:	4b7f      	ldr	r3, [pc, #508]	; (8002828 <main+0x710>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10f      	bne.n	8002652 <main+0x53a>
 8002632:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <main+0x708>)
 8002634:	4a7d      	ldr	r2, [pc, #500]	; (800282c <main+0x714>)
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e00b      	b.n	8002652 <main+0x53a>

	  } else {
		  LCD_DrawString(100, 200, "Drum4");
 800263a:	4a7d      	ldr	r2, [pc, #500]	; (8002830 <main+0x718>)
 800263c:	21c8      	movs	r1, #200	; 0xc8
 800263e:	2064      	movs	r0, #100	; 0x64
 8002640:	f7ff fd3a 	bl	80020b8 <LCD_DrawString>
		  if (hit == 1) {gyroAngleZ = -1.15;}
 8002644:	4b78      	ldr	r3, [pc, #480]	; (8002828 <main+0x710>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d102      	bne.n	8002652 <main+0x53a>
 800264c:	4b74      	ldr	r3, [pc, #464]	; (8002820 <main+0x708>)
 800264e:	4a79      	ldr	r2, [pc, #484]	; (8002834 <main+0x71c>)
 8002650:	601a      	str	r2, [r3, #0]
	  }



	  sprintf(buff, "acc : %6.2f,%6.2f,%6.2f", acc[0], acc[1], acc[2]);
 8002652:	4b79      	ldr	r3, [pc, #484]	; (8002838 <main+0x720>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd ff52 	bl	8000500 <__aeabi_f2d>
 800265c:	4680      	mov	r8, r0
 800265e:	4689      	mov	r9, r1
 8002660:	4b75      	ldr	r3, [pc, #468]	; (8002838 <main+0x720>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff4b 	bl	8000500 <__aeabi_f2d>
 800266a:	4604      	mov	r4, r0
 800266c:	460d      	mov	r5, r1
 800266e:	4b72      	ldr	r3, [pc, #456]	; (8002838 <main+0x720>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff44 	bl	8000500 <__aeabi_f2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002680:	e9cd 4500 	strd	r4, r5, [sp]
 8002684:	4642      	mov	r2, r8
 8002686:	464b      	mov	r3, r9
 8002688:	496c      	ldr	r1, [pc, #432]	; (800283c <main+0x724>)
 800268a:	486d      	ldr	r0, [pc, #436]	; (8002840 <main+0x728>)
 800268c:	f003 fed4 	bl	8006438 <siprintf>
	  LCD_DrawString(0, 40, buff);
 8002690:	4a6b      	ldr	r2, [pc, #428]	; (8002840 <main+0x728>)
 8002692:	2128      	movs	r1, #40	; 0x28
 8002694:	2000      	movs	r0, #0
 8002696:	f7ff fd0f 	bl	80020b8 <LCD_DrawString>
	  sprintf(buff, "gyro: %6.2f,%6.2f,%6.2f", gyro[0], gyro[1], gyro[2]);
 800269a:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <main+0x72c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd ff2e 	bl	8000500 <__aeabi_f2d>
 80026a4:	4680      	mov	r8, r0
 80026a6:	4689      	mov	r9, r1
 80026a8:	4b66      	ldr	r3, [pc, #408]	; (8002844 <main+0x72c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fd ff27 	bl	8000500 <__aeabi_f2d>
 80026b2:	4604      	mov	r4, r0
 80026b4:	460d      	mov	r5, r1
 80026b6:	4b63      	ldr	r3, [pc, #396]	; (8002844 <main+0x72c>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd ff20 	bl	8000500 <__aeabi_f2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026c8:	e9cd 4500 	strd	r4, r5, [sp]
 80026cc:	4642      	mov	r2, r8
 80026ce:	464b      	mov	r3, r9
 80026d0:	495d      	ldr	r1, [pc, #372]	; (8002848 <main+0x730>)
 80026d2:	485b      	ldr	r0, [pc, #364]	; (8002840 <main+0x728>)
 80026d4:	f003 feb0 	bl	8006438 <siprintf>
	  LCD_DrawString(0, 60, buff);
 80026d8:	4a59      	ldr	r2, [pc, #356]	; (8002840 <main+0x728>)
 80026da:	213c      	movs	r1, #60	; 0x3c
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff fceb 	bl	80020b8 <LCD_DrawString>
	  sprintf(buff, "off: %6d,%6d,%6d", Gyro_offset[0], Gyro_offset[1], Gyro_offset[2]);
 80026e2:	4b5a      	ldr	r3, [pc, #360]	; (800284c <main+0x734>)
 80026e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b58      	ldr	r3, [pc, #352]	; (800284c <main+0x734>)
 80026ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026f0:	4619      	mov	r1, r3
 80026f2:	4b56      	ldr	r3, [pc, #344]	; (800284c <main+0x734>)
 80026f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	460b      	mov	r3, r1
 80026fc:	4954      	ldr	r1, [pc, #336]	; (8002850 <main+0x738>)
 80026fe:	4850      	ldr	r0, [pc, #320]	; (8002840 <main+0x728>)
 8002700:	f003 fe9a 	bl	8006438 <siprintf>
	  LCD_DrawString(0, 80, buff);
 8002704:	4a4e      	ldr	r2, [pc, #312]	; (8002840 <main+0x728>)
 8002706:	2150      	movs	r1, #80	; 0x50
 8002708:	2000      	movs	r0, #0
 800270a:	f7ff fcd5 	bl	80020b8 <LCD_DrawString>
	  sprintf(buff, "mag : %6.0f,%6.0f,%6.0f", mag[0], mag[1], mag[2]);
 800270e:	4b51      	ldr	r3, [pc, #324]	; (8002854 <main+0x73c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fef4 	bl	8000500 <__aeabi_f2d>
 8002718:	4680      	mov	r8, r0
 800271a:	4689      	mov	r9, r1
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <main+0x73c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd feed 	bl	8000500 <__aeabi_f2d>
 8002726:	4604      	mov	r4, r0
 8002728:	460d      	mov	r5, r1
 800272a:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <main+0x73c>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fee6 	bl	8000500 <__aeabi_f2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800273c:	e9cd 4500 	strd	r4, r5, [sp]
 8002740:	4642      	mov	r2, r8
 8002742:	464b      	mov	r3, r9
 8002744:	4944      	ldr	r1, [pc, #272]	; (8002858 <main+0x740>)
 8002746:	483e      	ldr	r0, [pc, #248]	; (8002840 <main+0x728>)
 8002748:	f003 fe76 	bl	8006438 <siprintf>
	  LCD_DrawString(0, 100, buff);
 800274c:	4a3c      	ldr	r2, [pc, #240]	; (8002840 <main+0x728>)
 800274e:	2164      	movs	r1, #100	; 0x64
 8002750:	2000      	movs	r0, #0
 8002752:	f7ff fcb1 	bl	80020b8 <LCD_DrawString>
	  sprintf(buff, "roll : %6.2f,%6.2f,%6.2f", gyroAngleX, gyroAngleY, gyroAngleZ);
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <main+0x744>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fd fed0 	bl	8000500 <__aeabi_f2d>
 8002760:	4680      	mov	r8, r0
 8002762:	4689      	mov	r9, r1
 8002764:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <main+0x748>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fec9 	bl	8000500 <__aeabi_f2d>
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <main+0x708>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fec2 	bl	8000500 <__aeabi_f2d>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002784:	e9cd 4500 	strd	r4, r5, [sp]
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	4935      	ldr	r1, [pc, #212]	; (8002864 <main+0x74c>)
 800278e:	482c      	ldr	r0, [pc, #176]	; (8002840 <main+0x728>)
 8002790:	f003 fe52 	bl	8006438 <siprintf>
	  LCD_DrawString(0, 120, buff);
 8002794:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <main+0x728>)
 8002796:	2178      	movs	r1, #120	; 0x78
 8002798:	2000      	movs	r0, #0
 800279a:	f7ff fc8d 	bl	80020b8 <LCD_DrawString>
//	  sprintf(gyro, "gyro: %4d,%4d,%4d", (int16_t)GyroData[0], (int16_t)GyroData[1], (int16_t)GyroData[2]);
//	  sprintf(counter, "xycoor: %8d", (int16_t)xycoor);
//	  LCD_DrawString(0,60, counter);
	  sprintf(buff, "Time: %6.5f", elapsedTime);
 800279e:	4b32      	ldr	r3, [pc, #200]	; (8002868 <main+0x750>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd feac 	bl	8000500 <__aeabi_f2d>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	492f      	ldr	r1, [pc, #188]	; (800286c <main+0x754>)
 80027ae:	4824      	ldr	r0, [pc, #144]	; (8002840 <main+0x728>)
 80027b0:	f003 fe42 	bl	8006438 <siprintf>
	  LCD_DrawString(0,160, buff);
 80027b4:	4a22      	ldr	r2, [pc, #136]	; (8002840 <main+0x728>)
 80027b6:	21a0      	movs	r1, #160	; 0xa0
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7ff fc7d 	bl	80020b8 <LCD_DrawString>
	  sprintf(_hitcount, "hitcount: %4d", (int16_t)hitcount);
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <main+0x758>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	492b      	ldr	r1, [pc, #172]	; (8002874 <main+0x75c>)
 80027c8:	482b      	ldr	r0, [pc, #172]	; (8002878 <main+0x760>)
 80027ca:	f003 fe35 	bl	8006438 <siprintf>
	  LCD_DrawString(60,220, _hitcount);
 80027ce:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <main+0x760>)
 80027d0:	21dc      	movs	r1, #220	; 0xdc
 80027d2:	203c      	movs	r0, #60	; 0x3c
 80027d4:	f7ff fc70 	bl	80020b8 <LCD_DrawString>
//	  LCD_DrawString(120,140, gyro3);
//	  LCD_DrawString(120,160, MagData1);
//	  LCD_DrawString(120,180, MagData2);
//	  LCD_DrawString(120,200, MagData3);

	  if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == RESET || !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == SET) {
 80027d8:	2101      	movs	r1, #1
 80027da:	4828      	ldr	r0, [pc, #160]	; (800287c <main+0x764>)
 80027dc:	f000 feee 	bl	80035bc <HAL_GPIO_ReadPin>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <main+0x6de>
 80027e6:	2140      	movs	r1, #64	; 0x40
 80027e8:	4825      	ldr	r0, [pc, #148]	; (8002880 <main+0x768>)
 80027ea:	f000 fee7 	bl	80035bc <HAL_GPIO_ReadPin>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f47f acb5 	bne.w	8002160 <main+0x48>
		  gyroAngleX = 0;
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <main+0x744>)
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
		  gyroAngleY = 0;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <main+0x748>)
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
		  gyroAngleZ = 0;
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <main+0x708>)
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
  {
 800280e:	e4a7      	b.n	8002160 <main+0x48>
 8002810:	9999999a 	.word	0x9999999a
 8002814:	bfb99999 	.word	0xbfb99999
 8002818:	cccccccd 	.word	0xcccccccd
 800281c:	bfeccccc 	.word	0xbfeccccc
 8002820:	20000344 	.word	0x20000344
 8002824:	08008958 	.word	0x08008958
 8002828:	200002c0 	.word	0x200002c0
 800282c:	bee66666 	.word	0xbee66666
 8002830:	08008960 	.word	0x08008960
 8002834:	bf933333 	.word	0xbf933333
 8002838:	200002f4 	.word	0x200002f4
 800283c:	08008968 	.word	0x08008968
 8002840:	200002c8 	.word	0x200002c8
 8002844:	20000300 	.word	0x20000300
 8002848:	08008980 	.word	0x08008980
 800284c:	2000036c 	.word	0x2000036c
 8002850:	08008998 	.word	0x08008998
 8002854:	2000030c 	.word	0x2000030c
 8002858:	080089ac 	.word	0x080089ac
 800285c:	2000033c 	.word	0x2000033c
 8002860:	20000340 	.word	0x20000340
 8002864:	080089c4 	.word	0x080089c4
 8002868:	200002f0 	.word	0x200002f0
 800286c:	080089e0 	.word	0x080089e0
 8002870:	200002c4 	.word	0x200002c4
 8002874:	080089ec 	.word	0x080089ec
 8002878:	20000348 	.word	0x20000348
 800287c:	40010800 	.word	0x40010800
 8002880:	40011000 	.word	0x40011000

08002884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b096      	sub	sp, #88	; 0x58
 8002888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800288e:	2228      	movs	r2, #40	; 0x28
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f003 f968 	bl	8005b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80028b8:	2309      	movs	r3, #9
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c6:	2301      	movs	r3, #1
 80028c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028ca:	2301      	movs	r3, #1
 80028cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ce:	2302      	movs	r3, #2
 80028d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 ffea 	bl	80038bc <HAL_RCC_OscConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80028ee:	f000 f8b7 	bl	8002a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028f2:	230f      	movs	r3, #15
 80028f4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f6:	2302      	movs	r3, #2
 80028f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	2102      	movs	r1, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fa56 	bl	8003dc0 <HAL_RCC_ClockConfig>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800291a:	f000 f8a1 	bl	8002a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800291e:	2301      	movs	r3, #1
 8002920:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002926:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fbe0 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002936:	f000 f893 	bl	8002a60 <Error_Handler>
  }
}
 800293a:	bf00      	nop
 800293c:	3758      	adds	r7, #88	; 0x58
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <imu_calibrateGyro_noclass>:

/* USER CODE BEGIN 4 */

#define numCalPoints_noclass 100
void imu_calibrateGyro_noclass (int16_t Gyro_offset[3]) {
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b08f      	sub	sp, #60	; 0x3c
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	//Init
	int32_t sum[3] = {0, 0, 0};
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
 8002954:	2300      	movs	r3, #0
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t AccData[3], GyroData[3], MagData[3];

	// Save specified number of points, add them to sum (x,y,z)
	for (uint16_t i = 0; i < numCalPoints_noclass; i++) {
 8002958:	2300      	movs	r3, #0
 800295a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800295c:	e02a      	b.n	80029b4 <imu_calibrateGyro_noclass+0x70>
		HAL_Delay(3);
 800295e:	2003      	movs	r0, #3
 8002960:	f000 fb66 	bl	8003030 <HAL_Delay>
	    MPU9250_GetData(AccData, MagData, GyroData);
 8002964:	f107 0210 	add.w	r2, r7, #16
 8002968:	f107 0108 	add.w	r1, r7, #8
 800296c:	f107 0318 	add.w	r3, r7, #24
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe fe77 	bl	8001664 <MPU9250_GetData>
	    for (int j = 0; j < 3; j++) sum[j] += GyroData[j];
 8002976:	2300      	movs	r3, #0
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
 800297a:	e015      	b.n	80029a8 <imu_calibrateGyro_noclass+0x64>
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	3338      	adds	r3, #56	; 0x38
 8002982:	443b      	add	r3, r7
 8002984:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	3338      	adds	r3, #56	; 0x38
 800298e:	443b      	add	r3, r7
 8002990:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8002994:	441a      	add	r2, r3
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	3338      	adds	r3, #56	; 0x38
 800299c:	443b      	add	r3, r7
 800299e:	f843 2c18 	str.w	r2, [r3, #-24]
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	3301      	adds	r3, #1
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	dde6      	ble.n	800297c <imu_calibrateGyro_noclass+0x38>
	for (uint16_t i = 0; i < numCalPoints_noclass; i++) {
 80029ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029b0:	3301      	adds	r3, #1
 80029b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80029b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029b6:	2b63      	cmp	r3, #99	; 0x63
 80029b8:	d9d1      	bls.n	800295e <imu_calibrateGyro_noclass+0x1a>
	}

	// Average the saved data points to find the gyroscope offset
	for (int j = 0; j < 3; j++) Gyro_offset[j] = (float) sum[j] / numCalPoints_noclass;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029be:	e01c      	b.n	80029fa <imu_calibrateGyro_noclass+0xb6>
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3338      	adds	r3, #56	; 0x38
 80029c6:	443b      	add	r3, r7
 80029c8:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe f9d1 	bl	8000d74 <__aeabi_i2f>
 80029d2:	4603      	mov	r3, r0
 80029d4:	490d      	ldr	r1, [pc, #52]	; (8002a0c <imu_calibrateGyro_noclass+0xc8>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fad4 	bl	8000f84 <__aeabi_fdiv>
 80029dc:	4603      	mov	r3, r0
 80029de:	4619      	mov	r1, r3
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	18d4      	adds	r4, r2, r3
 80029e8:	4608      	mov	r0, r1
 80029ea:	f7fe fbdd 	bl	80011a8 <__aeabi_f2iz>
 80029ee:	4603      	mov	r3, r0
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	8023      	strh	r3, [r4, #0]
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	3301      	adds	r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	dddf      	ble.n	80029c0 <imu_calibrateGyro_noclass+0x7c>

}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	373c      	adds	r7, #60	; 0x3c
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd90      	pop	{r4, r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	42c80000 	.word	0x42c80000

08002a10 <imu_normalizeGyro>:

void imu_normalizeGyro (int16_t GyroData, int16_t Gyro_offset) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	460a      	mov	r2, r1
 8002a1a:	80fb      	strh	r3, [r7, #6]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80bb      	strh	r3, [r7, #4]
		GyroData = (GyroData - Gyro_offset)/ 32.8;
 8002a20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fd56 	bl	80004dc <__aeabi_i2d>
 8002a30:	a309      	add	r3, pc, #36	; (adr r3, 8002a58 <imu_normalizeGyro+0x48>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f7fd fee5 	bl	8000804 <__aeabi_ddiv>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f7fe f865 	bl	8000b10 <__aeabi_d2iz>
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
//		if  (GyroData < 100) {
//			GyroData = 0;
			//LCD_DrawString(0,200, "done");
		//}
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	f3af 8000 	nop.w
 8002a58:	66666666 	.word	0x66666666
 8002a5c:	40406666 	.word	0x40406666

08002a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <Error_Handler+0x8>
	...

08002a6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <MX_RTC_Init+0x30>)
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <MX_RTC_Init+0x34>)
 8002a74:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <MX_RTC_Init+0x30>)
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <MX_RTC_Init+0x30>)
 8002a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a84:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_RTC_Init+0x30>)
 8002a88:	f001 fccc 	bl	8004424 <HAL_RTC_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8002a92:	f7ff ffe5 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000374 	.word	0x20000374
 8002aa0:	40002800 	.word	0x40002800

08002aa4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <HAL_RTC_MspInit+0x3c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d110      	bne.n	8002ad8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002ab6:	f000 fef5 	bl	80038a4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_RTC_MspInit+0x40>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <HAL_RTC_MspInit+0x40>)
 8002ac0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ac4:	61d3      	str	r3, [r2, #28]
 8002ac6:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <HAL_RTC_MspInit+0x40>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RTC_MspInit+0x44>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40002800 	.word	0x40002800
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	4242043c 	.word	0x4242043c

08002aec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002af0:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002af2:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <MX_SPI1_Init+0x68>)
 8002af4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002afc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b20:	2208      	movs	r2, #8
 8002b22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b38:	220a      	movs	r2, #10
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b3c:	4804      	ldr	r0, [pc, #16]	; (8002b50 <MX_SPI1_Init+0x64>)
 8002b3e:	f001 fd84 	bl	800464a <HAL_SPI_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b48:	f7ff ff8a 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000388 	.word	0x20000388
 8002b54:	40013000 	.word	0x40013000

08002b58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <HAL_SPI_MspInit+0x88>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d12f      	bne.n	8002bd8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6193      	str	r3, [r2, #24]
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ba8:	23a0      	movs	r3, #160	; 0xa0
 8002baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480b      	ldr	r0, [pc, #44]	; (8002be8 <HAL_SPI_MspInit+0x90>)
 8002bbc:	f000 fb6a 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bc0:	2340      	movs	r3, #64	; 0x40
 8002bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4805      	ldr	r0, [pc, #20]	; (8002be8 <HAL_SPI_MspInit+0x90>)
 8002bd4:	f000 fb5e 	bl	8003294 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40013000 	.word	0x40013000
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40010800 	.word	0x40010800

08002bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_MspInit+0x5c>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_MspInit+0x5c>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6193      	str	r3, [r2, #24]
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_MspInit+0x5c>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_MspInit+0x5c>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <HAL_MspInit+0x5c>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_MspInit+0x5c>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_MspInit+0x60>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <HAL_MspInit+0x60>)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40010000 	.word	0x40010000

08002c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <NMI_Handler+0x4>

08002c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5a:	e7fe      	b.n	8002c5a <HardFault_Handler+0x4>

08002c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <MemManage_Handler+0x4>

08002c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <BusFault_Handler+0x4>

08002c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <UsageFault_Handler+0x4>

08002c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c96:	f000 f9af 	bl	8002ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <TIM2_IRQHandler+0x10>)
 8002ca6:	f002 fad7 	bl	8005258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200003e4 	.word	0x200003e4

08002cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
	return 1;
 8002cb8:	2301      	movs	r3, #1
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <_kill>:

int _kill(int pid, int sig)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ccc:	f002 ff22 	bl	8005b14 <__errno>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2216      	movs	r2, #22
 8002cd4:	601a      	str	r2, [r3, #0]
	return -1;
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_exit>:

void _exit (int status)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cea:	f04f 31ff 	mov.w	r1, #4294967295
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffe7 	bl	8002cc2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cf4:	e7fe      	b.n	8002cf4 <_exit+0x12>

08002cf6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e00a      	b.n	8002d1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d08:	f3af 8000 	nop.w
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	60ba      	str	r2, [r7, #8]
 8002d14:	b2ca      	uxtb	r2, r1
 8002d16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	dbf0      	blt.n	8002d08 <_read+0x12>
	}

return len;
 8002d26:	687b      	ldr	r3, [r7, #4]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e009      	b.n	8002d56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	60ba      	str	r2, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	3301      	adds	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	dbf1      	blt.n	8002d42 <_write+0x12>
	}
	return len;
 8002d5e:	687b      	ldr	r3, [r7, #4]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_close>:

int _close(int file)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	return -1;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <_isatty>:

int _isatty(int file)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	return 1;
 8002da4:	2301      	movs	r3, #1
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	return 0;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <_sbrk+0x5c>)
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <_sbrk+0x60>)
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <_sbrk+0x64>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <_sbrk+0x68>)
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <_sbrk+0x64>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d207      	bcs.n	8002e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002df8:	f002 fe8c 	bl	8005b14 <__errno>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	220c      	movs	r2, #12
 8002e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
 8002e06:	e009      	b.n	8002e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	4a05      	ldr	r2, [pc, #20]	; (8002e2c <_sbrk+0x64>)
 8002e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20010000 	.word	0x20010000
 8002e28:	00000400 	.word	0x00000400
 8002e2c:	200003e0 	.word	0x200003e0
 8002e30:	20000440 	.word	0x20000440

08002e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e54:	463b      	mov	r3, r7
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e66:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e78:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e84:	4813      	ldr	r0, [pc, #76]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e86:	f002 f998 	bl	80051ba <HAL_TIM_Base_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e90:	f7ff fde6 	bl	8002a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480c      	ldr	r0, [pc, #48]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002ea2:	f002 fae1 	bl	8005468 <HAL_TIM_ConfigClockSource>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002eac:	f7ff fdd8 	bl	8002a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eb8:	463b      	mov	r3, r7
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002ebe:	f002 fcd5 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ec8:	f7ff fdca 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200003e4 	.word	0x200003e4

08002ed8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d113      	bne.n	8002f12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_TIM_Base_MspInit+0x44>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <HAL_TIM_Base_MspInit+0x44>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	61d3      	str	r3, [r2, #28]
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_TIM_Base_MspInit+0x44>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	201c      	movs	r0, #28
 8002f08:	f000 f98d 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f0c:	201c      	movs	r0, #28
 8002f0e:	f000 f9a6 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000

08002f20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f20:	480c      	ldr	r0, [pc, #48]	; (8002f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f22:	490d      	ldr	r1, [pc, #52]	; (8002f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f28:	e002      	b.n	8002f30 <LoopCopyDataInit>

08002f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2e:	3304      	adds	r3, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f34:	d3f9      	bcc.n	8002f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f38:	4c0a      	ldr	r4, [pc, #40]	; (8002f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f3c:	e001      	b.n	8002f42 <LoopFillZerobss>

08002f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f40:	3204      	adds	r2, #4

08002f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f44:	d3fb      	bcc.n	8002f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f46:	f7ff ff75 	bl	8002e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f4a:	f002 fde9 	bl	8005b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f4e:	f7ff f8e3 	bl	8002118 <main>
  bx lr
 8002f52:	4770      	bx	lr
  ldr r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f58:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002f5c:	08009404 	.word	0x08009404
  ldr r2, =_sbss
 8002f60:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002f64:	20000440 	.word	0x20000440

08002f68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f68:	e7fe      	b.n	8002f68 <ADC1_2_IRQHandler>
	...

08002f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_Init+0x28>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_Init+0x28>)
 8002f76:	f043 0310 	orr.w	r3, r3, #16
 8002f7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f000 f947 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f82:	200f      	movs	r0, #15
 8002f84:	f000 f808 	bl	8002f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f88:	f7ff fe30 	bl	8002bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40022000 	.word	0x40022000

08002f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_InitTick+0x54>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_InitTick+0x58>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f95f 	bl	800327a <HAL_SYSTICK_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00e      	b.n	8002fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b0f      	cmp	r3, #15
 8002fca:	d80a      	bhi.n	8002fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	f000 f927 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd8:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <HAL_InitTick+0x5c>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000008 	.word	0x20000008
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	2000000c 	.word	0x2000000c

08002ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_IncTick+0x1c>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_IncTick+0x20>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4413      	add	r3, r2
 8003008:	4a03      	ldr	r2, [pc, #12]	; (8003018 <HAL_IncTick+0x20>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	20000010 	.word	0x20000010
 8003018:	2000042c 	.word	0x2000042c

0800301c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return uwTick;
 8003020:	4b02      	ldr	r3, [pc, #8]	; (800302c <HAL_GetTick+0x10>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	2000042c 	.word	0x2000042c

08003030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff fff0 	bl	800301c <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d005      	beq.n	8003056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_Delay+0x44>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003056:	bf00      	nop
 8003058:	f7ff ffe0 	bl	800301c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	429a      	cmp	r2, r3
 8003066:	d8f7      	bhi.n	8003058 <HAL_Delay+0x28>
  {
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000010 	.word	0x20000010

08003078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003094:	4013      	ands	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030aa:	4a04      	ldr	r2, [pc, #16]	; (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	60d3      	str	r3, [r2, #12]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <__NVIC_GetPriorityGrouping+0x18>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	f003 0307 	and.w	r3, r3, #7
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	db0b      	blt.n	8003106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	4906      	ldr	r1, [pc, #24]	; (8003110 <__NVIC_EnableIRQ+0x34>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2001      	movs	r0, #1
 80030fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	490c      	ldr	r1, [pc, #48]	; (8003160 <__NVIC_SetPriority+0x4c>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	440b      	add	r3, r1
 8003138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800313c:	e00a      	b.n	8003154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <__NVIC_SetPriority+0x50>)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	440b      	add	r3, r1
 8003152:	761a      	strb	r2, [r3, #24]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000e100 	.word	0xe000e100
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf28      	it	cs
 8003186:	2304      	movcs	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3304      	adds	r3, #4
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <NVIC_EncodePriority+0x30>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b03      	subs	r3, #3
 8003196:	e000      	b.n	800319a <NVIC_EncodePriority+0x32>
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	f7ff ff90 	bl	8003114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff2d 	bl	8003078 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff42 	bl	80030c0 <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff90 	bl	8003168 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5f 	bl	8003114 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff35 	bl	80030dc <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa2 	bl	80031cc <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b08b      	sub	sp, #44	; 0x2c
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a6:	e179      	b.n	800359c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032a8:	2201      	movs	r2, #1
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f040 8168 	bne.w	8003596 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a96      	ldr	r2, [pc, #600]	; (8003524 <HAL_GPIO_Init+0x290>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d05e      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 80032d0:	4a94      	ldr	r2, [pc, #592]	; (8003524 <HAL_GPIO_Init+0x290>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d875      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 80032d6:	4a94      	ldr	r2, [pc, #592]	; (8003528 <HAL_GPIO_Init+0x294>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d058      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 80032dc:	4a92      	ldr	r2, [pc, #584]	; (8003528 <HAL_GPIO_Init+0x294>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d86f      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 80032e2:	4a92      	ldr	r2, [pc, #584]	; (800352c <HAL_GPIO_Init+0x298>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d052      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 80032e8:	4a90      	ldr	r2, [pc, #576]	; (800352c <HAL_GPIO_Init+0x298>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d869      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 80032ee:	4a90      	ldr	r2, [pc, #576]	; (8003530 <HAL_GPIO_Init+0x29c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d04c      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 80032f4:	4a8e      	ldr	r2, [pc, #568]	; (8003530 <HAL_GPIO_Init+0x29c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d863      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 80032fa:	4a8e      	ldr	r2, [pc, #568]	; (8003534 <HAL_GPIO_Init+0x2a0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d046      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 8003300:	4a8c      	ldr	r2, [pc, #560]	; (8003534 <HAL_GPIO_Init+0x2a0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d85d      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 8003306:	2b12      	cmp	r3, #18
 8003308:	d82a      	bhi.n	8003360 <HAL_GPIO_Init+0xcc>
 800330a:	2b12      	cmp	r3, #18
 800330c:	d859      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <HAL_GPIO_Init+0x80>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	0800338f 	.word	0x0800338f
 8003318:	08003369 	.word	0x08003369
 800331c:	0800337b 	.word	0x0800337b
 8003320:	080033bd 	.word	0x080033bd
 8003324:	080033c3 	.word	0x080033c3
 8003328:	080033c3 	.word	0x080033c3
 800332c:	080033c3 	.word	0x080033c3
 8003330:	080033c3 	.word	0x080033c3
 8003334:	080033c3 	.word	0x080033c3
 8003338:	080033c3 	.word	0x080033c3
 800333c:	080033c3 	.word	0x080033c3
 8003340:	080033c3 	.word	0x080033c3
 8003344:	080033c3 	.word	0x080033c3
 8003348:	080033c3 	.word	0x080033c3
 800334c:	080033c3 	.word	0x080033c3
 8003350:	080033c3 	.word	0x080033c3
 8003354:	080033c3 	.word	0x080033c3
 8003358:	08003371 	.word	0x08003371
 800335c:	08003385 	.word	0x08003385
 8003360:	4a75      	ldr	r2, [pc, #468]	; (8003538 <HAL_GPIO_Init+0x2a4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003366:	e02c      	b.n	80033c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	623b      	str	r3, [r7, #32]
          break;
 800336e:	e029      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	3304      	adds	r3, #4
 8003376:	623b      	str	r3, [r7, #32]
          break;
 8003378:	e024      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	3308      	adds	r3, #8
 8003380:	623b      	str	r3, [r7, #32]
          break;
 8003382:	e01f      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	330c      	adds	r3, #12
 800338a:	623b      	str	r3, [r7, #32]
          break;
 800338c:	e01a      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003396:	2304      	movs	r3, #4
 8003398:	623b      	str	r3, [r7, #32]
          break;
 800339a:	e013      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033a4:	2308      	movs	r3, #8
 80033a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	611a      	str	r2, [r3, #16]
          break;
 80033ae:	e009      	b.n	80033c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033b0:	2308      	movs	r3, #8
 80033b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	615a      	str	r2, [r3, #20]
          break;
 80033ba:	e003      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033bc:	2300      	movs	r3, #0
 80033be:	623b      	str	r3, [r7, #32]
          break;
 80033c0:	e000      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          break;
 80033c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2bff      	cmp	r3, #255	; 0xff
 80033c8:	d801      	bhi.n	80033ce <HAL_GPIO_Init+0x13a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	e001      	b.n	80033d2 <HAL_GPIO_Init+0x13e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2bff      	cmp	r3, #255	; 0xff
 80033d8:	d802      	bhi.n	80033e0 <HAL_GPIO_Init+0x14c>
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	e002      	b.n	80033e6 <HAL_GPIO_Init+0x152>
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	3b08      	subs	r3, #8
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	210f      	movs	r1, #15
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	401a      	ands	r2, r3
 80033f8:	6a39      	ldr	r1, [r7, #32]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	431a      	orrs	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80c1 	beq.w	8003596 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003414:	4b49      	ldr	r3, [pc, #292]	; (800353c <HAL_GPIO_Init+0x2a8>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a48      	ldr	r2, [pc, #288]	; (800353c <HAL_GPIO_Init+0x2a8>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b46      	ldr	r3, [pc, #280]	; (800353c <HAL_GPIO_Init+0x2a8>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800342c:	4a44      	ldr	r2, [pc, #272]	; (8003540 <HAL_GPIO_Init+0x2ac>)
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003438:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	220f      	movs	r2, #15
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4013      	ands	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <HAL_GPIO_Init+0x2b0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d01f      	beq.n	8003498 <HAL_GPIO_Init+0x204>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a3b      	ldr	r2, [pc, #236]	; (8003548 <HAL_GPIO_Init+0x2b4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d019      	beq.n	8003494 <HAL_GPIO_Init+0x200>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a3a      	ldr	r2, [pc, #232]	; (800354c <HAL_GPIO_Init+0x2b8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <HAL_GPIO_Init+0x1fc>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a39      	ldr	r2, [pc, #228]	; (8003550 <HAL_GPIO_Init+0x2bc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00d      	beq.n	800348c <HAL_GPIO_Init+0x1f8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a38      	ldr	r2, [pc, #224]	; (8003554 <HAL_GPIO_Init+0x2c0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <HAL_GPIO_Init+0x1f4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a37      	ldr	r2, [pc, #220]	; (8003558 <HAL_GPIO_Init+0x2c4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d101      	bne.n	8003484 <HAL_GPIO_Init+0x1f0>
 8003480:	2305      	movs	r3, #5
 8003482:	e00a      	b.n	800349a <HAL_GPIO_Init+0x206>
 8003484:	2306      	movs	r3, #6
 8003486:	e008      	b.n	800349a <HAL_GPIO_Init+0x206>
 8003488:	2304      	movs	r3, #4
 800348a:	e006      	b.n	800349a <HAL_GPIO_Init+0x206>
 800348c:	2303      	movs	r3, #3
 800348e:	e004      	b.n	800349a <HAL_GPIO_Init+0x206>
 8003490:	2302      	movs	r3, #2
 8003492:	e002      	b.n	800349a <HAL_GPIO_Init+0x206>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <HAL_GPIO_Init+0x206>
 8003498:	2300      	movs	r3, #0
 800349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349c:	f002 0203 	and.w	r2, r2, #3
 80034a0:	0092      	lsls	r2, r2, #2
 80034a2:	4093      	lsls	r3, r2
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034aa:	4925      	ldr	r1, [pc, #148]	; (8003540 <HAL_GPIO_Init+0x2ac>)
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3302      	adds	r3, #2
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d006      	beq.n	80034d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_GPIO_Init+0x2c8>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4924      	ldr	r1, [pc, #144]	; (800355c <HAL_GPIO_Init+0x2c8>)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]
 80034d0:	e006      	b.n	80034e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_GPIO_Init+0x2c8>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	43db      	mvns	r3, r3
 80034da:	4920      	ldr	r1, [pc, #128]	; (800355c <HAL_GPIO_Init+0x2c8>)
 80034dc:	4013      	ands	r3, r2
 80034de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d006      	beq.n	80034fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_GPIO_Init+0x2c8>)
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	491a      	ldr	r1, [pc, #104]	; (800355c <HAL_GPIO_Init+0x2c8>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	e006      	b.n	8003508 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <HAL_GPIO_Init+0x2c8>)
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	43db      	mvns	r3, r3
 8003502:	4916      	ldr	r1, [pc, #88]	; (800355c <HAL_GPIO_Init+0x2c8>)
 8003504:	4013      	ands	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d025      	beq.n	8003560 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_GPIO_Init+0x2c8>)
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	4910      	ldr	r1, [pc, #64]	; (800355c <HAL_GPIO_Init+0x2c8>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]
 8003520:	e025      	b.n	800356e <HAL_GPIO_Init+0x2da>
 8003522:	bf00      	nop
 8003524:	10320000 	.word	0x10320000
 8003528:	10310000 	.word	0x10310000
 800352c:	10220000 	.word	0x10220000
 8003530:	10210000 	.word	0x10210000
 8003534:	10120000 	.word	0x10120000
 8003538:	10110000 	.word	0x10110000
 800353c:	40021000 	.word	0x40021000
 8003540:	40010000 	.word	0x40010000
 8003544:	40010800 	.word	0x40010800
 8003548:	40010c00 	.word	0x40010c00
 800354c:	40011000 	.word	0x40011000
 8003550:	40011400 	.word	0x40011400
 8003554:	40011800 	.word	0x40011800
 8003558:	40011c00 	.word	0x40011c00
 800355c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003560:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_GPIO_Init+0x324>)
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	43db      	mvns	r3, r3
 8003568:	4913      	ldr	r1, [pc, #76]	; (80035b8 <HAL_GPIO_Init+0x324>)
 800356a:	4013      	ands	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800357a:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <HAL_GPIO_Init+0x324>)
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	490e      	ldr	r1, [pc, #56]	; (80035b8 <HAL_GPIO_Init+0x324>)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	60cb      	str	r3, [r1, #12]
 8003586:	e006      	b.n	8003596 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_GPIO_Init+0x324>)
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	43db      	mvns	r3, r3
 8003590:	4909      	ldr	r1, [pc, #36]	; (80035b8 <HAL_GPIO_Init+0x324>)
 8003592:	4013      	ands	r3, r2
 8003594:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	3301      	adds	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f47f ae7e 	bne.w	80032a8 <HAL_GPIO_Init+0x14>
  }
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	372c      	adds	r7, #44	; 0x2c
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	40010400 	.word	0x40010400

080035bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e001      	b.n	80035de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	807b      	strh	r3, [r7, #2]
 80035f6:	4613      	mov	r3, r2
 80035f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035fa:	787b      	ldrb	r3, [r7, #1]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003600:	887a      	ldrh	r2, [r7, #2]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003606:	e003      	b.n	8003610 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	041a      	lsls	r2, r3, #16
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	611a      	str	r2, [r3, #16]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
	...

0800361c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e12b      	b.n	8003886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fe fa84 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003680:	f000 fcf0 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8003684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a81      	ldr	r2, [pc, #516]	; (8003890 <HAL_I2C_Init+0x274>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d807      	bhi.n	80036a0 <HAL_I2C_Init+0x84>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a80      	ldr	r2, [pc, #512]	; (8003894 <HAL_I2C_Init+0x278>)
 8003694:	4293      	cmp	r3, r2
 8003696:	bf94      	ite	ls
 8003698:	2301      	movls	r3, #1
 800369a:	2300      	movhi	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e006      	b.n	80036ae <HAL_I2C_Init+0x92>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a7d      	ldr	r2, [pc, #500]	; (8003898 <HAL_I2C_Init+0x27c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0e7      	b.n	8003886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a78      	ldr	r2, [pc, #480]	; (800389c <HAL_I2C_Init+0x280>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	0c9b      	lsrs	r3, r3, #18
 80036c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a6a      	ldr	r2, [pc, #424]	; (8003890 <HAL_I2C_Init+0x274>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d802      	bhi.n	80036f0 <HAL_I2C_Init+0xd4>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	3301      	adds	r3, #1
 80036ee:	e009      	b.n	8003704 <HAL_I2C_Init+0xe8>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	4a69      	ldr	r2, [pc, #420]	; (80038a0 <HAL_I2C_Init+0x284>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	3301      	adds	r3, #1
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	495c      	ldr	r1, [pc, #368]	; (8003890 <HAL_I2C_Init+0x274>)
 8003720:	428b      	cmp	r3, r1
 8003722:	d819      	bhi.n	8003758 <HAL_I2C_Init+0x13c>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e59      	subs	r1, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003732:	1c59      	adds	r1, r3, #1
 8003734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003738:	400b      	ands	r3, r1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_I2C_Init+0x138>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1e59      	subs	r1, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fbb1 f3f3 	udiv	r3, r1, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003752:	e051      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 8003754:	2304      	movs	r3, #4
 8003756:	e04f      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d111      	bne.n	8003784 <HAL_I2C_Init+0x168>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	440b      	add	r3, r1
 800376e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003772:	3301      	adds	r3, #1
 8003774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e012      	b.n	80037aa <HAL_I2C_Init+0x18e>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e58      	subs	r0, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	0099      	lsls	r1, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	fbb0 f3f3 	udiv	r3, r0, r3
 800379a:	3301      	adds	r3, #1
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Init+0x196>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e022      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10e      	bne.n	80037d8 <HAL_I2C_Init+0x1bc>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1e58      	subs	r0, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	440b      	add	r3, r1
 80037c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d6:	e00f      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	0099      	lsls	r1, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	6809      	ldr	r1, [r1, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6911      	ldr	r1, [r2, #16]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68d2      	ldr	r2, [r2, #12]
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	430b      	orrs	r3, r1
 800383a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	000186a0 	.word	0x000186a0
 8003894:	001e847f 	.word	0x001e847f
 8003898:	003d08ff 	.word	0x003d08ff
 800389c:	431bde83 	.word	0x431bde83
 80038a0:	10624dd3 	.word	0x10624dd3

080038a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	420e0020 	.word	0x420e0020

080038bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e272      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8087 	beq.w	80039ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038dc:	4b92      	ldr	r3, [pc, #584]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d00c      	beq.n	8003902 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038e8:	4b8f      	ldr	r3, [pc, #572]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d112      	bne.n	800391a <HAL_RCC_OscConfig+0x5e>
 80038f4:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003900:	d10b      	bne.n	800391a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003902:	4b89      	ldr	r3, [pc, #548]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d06c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x12c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d168      	bne.n	80039e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e24c      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x76>
 8003924:	4b80      	ldr	r3, [pc, #512]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7f      	ldr	r2, [pc, #508]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e02e      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x98>
 800393a:	4b7b      	ldr	r3, [pc, #492]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a7a      	ldr	r2, [pc, #488]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b78      	ldr	r3, [pc, #480]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a77      	ldr	r2, [pc, #476]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800394c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e01d      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0xbc>
 800395e:	4b72      	ldr	r3, [pc, #456]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a71      	ldr	r2, [pc, #452]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6e      	ldr	r2, [pc, #440]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003978:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6a      	ldr	r2, [pc, #424]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a67      	ldr	r2, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800398a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7ff fb40 	bl	800301c <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a0:	f7ff fb3c 	bl	800301c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e200      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b5d      	ldr	r3, [pc, #372]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0xe4>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7ff fb2c 	bl	800301c <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7ff fb28 	bl	800301c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1ec      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x10c>
 80039e6:	e000      	b.n	80039ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d063      	beq.n	8003abe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f6:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a02:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d11c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x18c>
 8003a0e:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_RCC_OscConfig+0x176>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e1c0      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4939      	ldr	r1, [pc, #228]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	e03a      	b.n	8003abe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a50:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <HAL_RCC_OscConfig+0x270>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7ff fae1 	bl	800301c <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5e:	f7ff fadd 	bl	800301c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e1a1      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	4b2d      	ldr	r3, [pc, #180]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4927      	ldr	r1, [pc, #156]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	e015      	b.n	8003abe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a92:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <HAL_RCC_OscConfig+0x270>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7ff fac0 	bl	800301c <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7ff fabc 	bl	800301c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e180      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d03a      	beq.n	8003b40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d019      	beq.n	8003b06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad2:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad8:	f7ff faa0 	bl	800301c <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7ff fa9c 	bl	800301c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e160      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003afe:	2001      	movs	r0, #1
 8003b00:	f000 fad8 	bl	80040b4 <RCC_Delay>
 8003b04:	e01c      	b.n	8003b40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <HAL_RCC_OscConfig+0x274>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0c:	f7ff fa86 	bl	800301c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b12:	e00f      	b.n	8003b34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b14:	f7ff fa82 	bl	800301c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d908      	bls.n	8003b34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e146      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	42420000 	.word	0x42420000
 8003b30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	4b92      	ldr	r3, [pc, #584]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e9      	bne.n	8003b14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a6 	beq.w	8003c9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b52:	4b8b      	ldr	r3, [pc, #556]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4a87      	ldr	r2, [pc, #540]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b68:	61d3      	str	r3, [r2, #28]
 8003b6a:	4b85      	ldr	r3, [pc, #532]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	4b82      	ldr	r3, [pc, #520]	; (8003d84 <HAL_RCC_OscConfig+0x4c8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d118      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b86:	4b7f      	ldr	r3, [pc, #508]	; (8003d84 <HAL_RCC_OscConfig+0x4c8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a7e      	ldr	r2, [pc, #504]	; (8003d84 <HAL_RCC_OscConfig+0x4c8>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b92:	f7ff fa43 	bl	800301c <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9a:	f7ff fa3f 	bl	800301c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	; 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e103      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b75      	ldr	r3, [pc, #468]	; (8003d84 <HAL_RCC_OscConfig+0x4c8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x312>
 8003bc0:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6213      	str	r3, [r2, #32]
 8003bcc:	e02d      	b.n	8003c2a <HAL_RCC_OscConfig+0x36e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x334>
 8003bd6:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a69      	ldr	r2, [pc, #420]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6213      	str	r3, [r2, #32]
 8003be2:	4b67      	ldr	r3, [pc, #412]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a66      	ldr	r2, [pc, #408]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	e01c      	b.n	8003c2a <HAL_RCC_OscConfig+0x36e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x356>
 8003bf8:	4b61      	ldr	r3, [pc, #388]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a60      	ldr	r2, [pc, #384]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	4b5e      	ldr	r3, [pc, #376]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a5d      	ldr	r2, [pc, #372]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x36e>
 8003c12:	4b5b      	ldr	r3, [pc, #364]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a5a      	ldr	r2, [pc, #360]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6213      	str	r3, [r2, #32]
 8003c1e:	4b58      	ldr	r3, [pc, #352]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a57      	ldr	r2, [pc, #348]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d015      	beq.n	8003c5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7ff f9f3 	bl	800301c <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7ff f9ef 	bl	800301c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0b1      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ee      	beq.n	8003c3a <HAL_RCC_OscConfig+0x37e>
 8003c5c:	e014      	b.n	8003c88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7ff f9dd 	bl	800301c <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7ff f9d9 	bl	800301c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e09b      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b3c      	ldr	r3, [pc, #240]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4a3b      	ldr	r2, [pc, #236]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8087 	beq.w	8003db2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca4:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d061      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d146      	bne.n	8003d46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb8:	4b33      	ldr	r3, [pc, #204]	; (8003d88 <HAL_RCC_OscConfig+0x4cc>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7ff f9ad 	bl	800301c <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7ff f9a9 	bl	800301c <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e06d      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd8:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d108      	bne.n	8003d00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4921      	ldr	r1, [pc, #132]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d00:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a19      	ldr	r1, [r3, #32]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	430b      	orrs	r3, r1
 8003d12:	491b      	ldr	r1, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_OscConfig+0x4cc>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7ff f97d 	bl	800301c <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d26:	f7ff f979 	bl	800301c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e03d      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x46a>
 8003d44:	e035      	b.n	8003db2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7ff f966 	bl	800301c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7ff f962 	bl	800301c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e026      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x498>
 8003d72:	e01e      	b.n	8003db2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e019      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_OscConfig+0x500>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d001      	beq.n	8003db2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0d0      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b6a      	ldr	r3, [pc, #424]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d910      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b67      	ldr	r3, [pc, #412]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 0207 	bic.w	r2, r3, #7
 8003dea:	4965      	ldr	r1, [pc, #404]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b63      	ldr	r3, [pc, #396]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0b8      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d020      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e1c:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4a58      	ldr	r2, [pc, #352]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e34:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4a52      	ldr	r2, [pc, #328]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e40:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	494d      	ldr	r1, [pc, #308]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d040      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d107      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d115      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e07f      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e073      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e06b      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9e:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f023 0203 	bic.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4936      	ldr	r1, [pc, #216]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb0:	f7ff f8b4 	bl	800301c <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	e00a      	b.n	8003ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	f7ff f8b0 	bl	800301c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e053      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ece:	4b2d      	ldr	r3, [pc, #180]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 020c 	and.w	r2, r3, #12
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d1eb      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d210      	bcs.n	8003f10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 0207 	bic.w	r2, r3, #7
 8003ef6:	4922      	ldr	r1, [pc, #136]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e032      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f1c:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4916      	ldr	r1, [pc, #88]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f3a:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	490e      	ldr	r1, [pc, #56]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f4e:	f000 f821 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 8003f52:	4602      	mov	r2, r0
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	490a      	ldr	r1, [pc, #40]	; (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	5ccb      	ldrb	r3, [r1, r3]
 8003f62:	fa22 f303 	lsr.w	r3, r2, r3
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <HAL_RCC_ClockConfig+0x1cc>)
 8003f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_ClockConfig+0x1d0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff f812 	bl	8002f98 <HAL_InitTick>

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40022000 	.word	0x40022000
 8003f84:	40021000 	.word	0x40021000
 8003f88:	0800900c 	.word	0x0800900c
 8003f8c:	20000008 	.word	0x20000008
 8003f90:	2000000c 	.word	0x2000000c

08003f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f94:	b490      	push	{r4, r7}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f9a:	4b29      	ldr	r3, [pc, #164]	; (8004040 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f9c:	1d3c      	adds	r4, r7, #4
 8003f9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fa4:	f240 2301 	movw	r3, #513	; 0x201
 8003fa8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d002      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_GetSysClockFreq+0x46>
 8003fd2:	e02b      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fd6:	623b      	str	r3, [r7, #32]
      break;
 8003fd8:	e02b      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	0c9b      	lsrs	r3, r3, #18
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	3328      	adds	r3, #40	; 0x28
 8003fe4:	443b      	add	r3, r7
 8003fe6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d012      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	0c5b      	lsrs	r3, r3, #17
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	3328      	adds	r3, #40	; 0x28
 8004002:	443b      	add	r3, r7
 8004004:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004008:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <HAL_RCC_GetSysClockFreq+0xb4>)
 800400e:	fb03 f202 	mul.w	r2, r3, r2
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	e004      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4a0b      	ldr	r2, [pc, #44]	; (800404c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	623b      	str	r3, [r7, #32]
      break;
 800402a:	e002      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCC_GetSysClockFreq+0xb4>)
 800402e:	623b      	str	r3, [r7, #32]
      break;
 8004030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004032:	6a3b      	ldr	r3, [r7, #32]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3728      	adds	r7, #40	; 0x28
 8004038:	46bd      	mov	sp, r7
 800403a:	bc90      	pop	{r4, r7}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	080089fc 	.word	0x080089fc
 8004044:	40021000 	.word	0x40021000
 8004048:	007a1200 	.word	0x007a1200
 800404c:	003d0900 	.word	0x003d0900

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <HAL_RCC_GetHCLKFreq+0x10>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	20000008 	.word	0x20000008

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004068:	f7ff fff2 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4903      	ldr	r1, [pc, #12]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	0800901c 	.word	0x0800901c

0800408c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004090:	f7ff ffde 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	0adb      	lsrs	r3, r3, #11
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4903      	ldr	r1, [pc, #12]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a2:	5ccb      	ldrb	r3, [r1, r3]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	0800901c 	.word	0x0800901c

080040b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <RCC_Delay+0x34>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <RCC_Delay+0x38>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0a5b      	lsrs	r3, r3, #9
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040d0:	bf00      	nop
  }
  while (Delay --);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1e5a      	subs	r2, r3, #1
 80040d6:	60fa      	str	r2, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f9      	bne.n	80040d0 <RCC_Delay+0x1c>
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	20000008 	.word	0x20000008
 80040ec:	10624dd3 	.word	0x10624dd3

080040f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d07d      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800410c:	2300      	movs	r3, #0
 800410e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004110:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411c:	4b4c      	ldr	r3, [pc, #304]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	4a4b      	ldr	r2, [pc, #300]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004126:	61d3      	str	r3, [r2, #28]
 8004128:	4b49      	ldr	r3, [pc, #292]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	4b46      	ldr	r3, [pc, #280]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d118      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004144:	4b43      	ldr	r3, [pc, #268]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a42      	ldr	r2, [pc, #264]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800414a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004150:	f7fe ff64 	bl	800301c <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004156:	e008      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004158:	f7fe ff60 	bl	800301c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e06d      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b3a      	ldr	r3, [pc, #232]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004176:	4b36      	ldr	r3, [pc, #216]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02e      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d027      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004194:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800419e:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041a4:	4b2c      	ldr	r3, [pc, #176]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041aa:	4a29      	ldr	r2, [pc, #164]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fe ff2f 	bl	800301c <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fe ff2b 	bl	800301c <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e036      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ee      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4917      	ldr	r1, [pc, #92]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	4a13      	ldr	r2, [pc, #76]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004206:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	490b      	ldr	r1, [pc, #44]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4904      	ldr	r1, [pc, #16]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000
 8004254:	40007000 	.word	0x40007000
 8004258:	42420440 	.word	0x42420440

0800425c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800425c:	b590      	push	{r4, r7, lr}
 800425e:	b08d      	sub	sp, #52	; 0x34
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004264:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8004266:	f107 040c 	add.w	r4, r7, #12
 800426a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800426c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004270:	f240 2301 	movw	r3, #513	; 0x201
 8004274:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	2300      	movs	r3, #0
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427e:	2300      	movs	r3, #0
 8004280:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	2300      	movs	r3, #0
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3b01      	subs	r3, #1
 800428e:	2b0f      	cmp	r3, #15
 8004290:	f200 80b4 	bhi.w	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	0800437b 	.word	0x0800437b
 80042a0:	080043e1 	.word	0x080043e1
 80042a4:	080043fd 	.word	0x080043fd
 80042a8:	0800436b 	.word	0x0800436b
 80042ac:	080043fd 	.word	0x080043fd
 80042b0:	080043fd 	.word	0x080043fd
 80042b4:	080043fd 	.word	0x080043fd
 80042b8:	08004373 	.word	0x08004373
 80042bc:	080043fd 	.word	0x080043fd
 80042c0:	080043fd 	.word	0x080043fd
 80042c4:	080043fd 	.word	0x080043fd
 80042c8:	080043fd 	.word	0x080043fd
 80042cc:	080043fd 	.word	0x080043fd
 80042d0:	080043fd 	.word	0x080043fd
 80042d4:	080043fd 	.word	0x080043fd
 80042d8:	080042dd 	.word	0x080042dd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80042dc:	4b4d      	ldr	r3, [pc, #308]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042e2:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8088 	beq.w	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	0c9b      	lsrs	r3, r3, #18
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	3330      	adds	r3, #48	; 0x30
 80042fa:	443b      	add	r3, r7
 80042fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004300:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d017      	beq.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800430c:	4b41      	ldr	r3, [pc, #260]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	0c5b      	lsrs	r3, r3, #17
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	3330      	adds	r3, #48	; 0x30
 8004318:	443b      	add	r3, r7
 800431a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800432a:	4a3b      	ldr	r2, [pc, #236]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433a:	e004      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	4a37      	ldr	r2, [pc, #220]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8004340:	fb02 f303 	mul.w	r3, r2, r3
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004346:	4b33      	ldr	r3, [pc, #204]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004352:	d102      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004358:	e052      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4a30      	ldr	r2, [pc, #192]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004368:	e04a      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800436a:	f7ff fe13 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 800436e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004370:	e049      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004372:	f7ff fe0f 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 8004376:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004378:	e045      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d108      	bne.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8004396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
 800439c:	e01f      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d109      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80043b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c8:	d11c      	bne.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 80043d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80043dc:	e012      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80043de:	e011      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043e0:	f7ff fe54 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	0b9b      	lsrs	r3, r3, #14
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	3301      	adds	r3, #1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043fa:	e004      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 80043fc:	bf00      	nop
 80043fe:	e002      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8004400:	bf00      	nop
 8004402:	e000      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8004404:	bf00      	nop
    }
  }
  return (frequency);
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004408:	4618      	mov	r0, r3
 800440a:	3734      	adds	r7, #52	; 0x34
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}
 8004410:	08008a0c 	.word	0x08008a0c
 8004414:	40021000 	.word	0x40021000
 8004418:	007a1200 	.word	0x007a1200
 800441c:	003d0900 	.word	0x003d0900
 8004420:	aaaaaaab 	.word	0xaaaaaaab

08004424 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e084      	b.n	8004544 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7c5b      	ldrb	r3, [r3, #17]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fe fb2a 	bl	8002aa4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f87a 	bl	8004550 <HAL_RTC_WaitForSynchro>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d004      	beq.n	800446c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2204      	movs	r2, #4
 8004466:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e06b      	b.n	8004544 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f89c 	bl	80045aa <RTC_EnterInitMode>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d004      	beq.n	8004482 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2204      	movs	r2, #4
 800447c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e060      	b.n	8004544 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0207 	bic.w	r2, r2, #7
 8004490:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800449a:	4b2c      	ldr	r3, [pc, #176]	; (800454c <HAL_RTC_Init+0x128>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a2b      	ldr	r2, [pc, #172]	; (800454c <HAL_RTC_Init+0x128>)
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80044a6:	4b29      	ldr	r3, [pc, #164]	; (800454c <HAL_RTC_Init+0x128>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	4926      	ldr	r1, [pc, #152]	; (800454c <HAL_RTC_Init+0x128>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d003      	beq.n	80044ca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e00e      	b.n	80044e8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80044ca:	2001      	movs	r0, #1
 80044cc:	f7ff fec6 	bl	800425c <HAL_RCCEx_GetPeriphCLKFreq>
 80044d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d104      	bne.n	80044e2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2204      	movs	r2, #4
 80044dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e030      	b.n	8004544 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f023 010f 	bic.w	r1, r3, #15
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	0c1a      	lsrs	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	b291      	uxth	r1, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	430b      	orrs	r3, r1
 8004512:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f870 	bl	80045fa <RTC_ExitInitMode>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2204      	movs	r2, #4
 8004524:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e00c      	b.n	8004544 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004542:	2300      	movs	r3, #0
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40006c00 	.word	0x40006c00

08004550 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e01d      	b.n	80045a2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0208 	bic.w	r2, r2, #8
 8004574:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004576:	f7fe fd51 	bl	800301c <HAL_GetTick>
 800457a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800457c:	e009      	b.n	8004592 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800457e:	f7fe fd4d 	bl	800301c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800458c:	d901      	bls.n	8004592 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e007      	b.n	80045a2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0ee      	beq.n	800457e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80045b6:	f7fe fd31 	bl	800301c <HAL_GetTick>
 80045ba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80045bc:	e009      	b.n	80045d2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80045be:	f7fe fd2d 	bl	800301c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045cc:	d901      	bls.n	80045d2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e00f      	b.n	80045f2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ee      	beq.n	80045be <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0210 	orr.w	r2, r2, #16
 80045ee:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0210 	bic.w	r2, r2, #16
 8004614:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004616:	f7fe fd01 	bl	800301c <HAL_GetTick>
 800461a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800461c:	e009      	b.n	8004632 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800461e:	f7fe fcfd 	bl	800301c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800462c:	d901      	bls.n	8004632 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e007      	b.n	8004642 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ee      	beq.n	800461e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e076      	b.n	800474a <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	2b00      	cmp	r3, #0
 8004662:	d108      	bne.n	8004676 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800466c:	d009      	beq.n	8004682 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	61da      	str	r2, [r3, #28]
 8004674:	e005      	b.n	8004682 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fe fa5b 	bl	8002b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	ea42 0103 	orr.w	r1, r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	0c1a      	lsrs	r2, r3, #16
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f002 0204 	and.w	r2, r2, #4
 8004728:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004738:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b088      	sub	sp, #32
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_SPI_Transmit+0x22>
 8004770:	2302      	movs	r3, #2
 8004772:	e126      	b.n	80049c2 <HAL_SPI_Transmit+0x270>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800477c:	f7fe fc4e 	bl	800301c <HAL_GetTick>
 8004780:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	d002      	beq.n	8004798 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004792:	2302      	movs	r3, #2
 8004794:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004796:	e10b      	b.n	80049b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_SPI_Transmit+0x52>
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047a8:	e102      	b.n	80049b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2203      	movs	r2, #3
 80047ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	88fa      	ldrh	r2, [r7, #6]
 80047c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f0:	d10f      	bne.n	8004812 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004800:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004810:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d007      	beq.n	8004830 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800482e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004838:	d14b      	bne.n	80048d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_SPI_Transmit+0xf6>
 8004842:	8afb      	ldrh	r3, [r7, #22]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d13e      	bne.n	80048c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	1c9a      	adds	r2, r3, #2
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800486c:	e02b      	b.n	80048c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b02      	cmp	r3, #2
 800487a:	d112      	bne.n	80048a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	881a      	ldrh	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	86da      	strh	r2, [r3, #54]	; 0x36
 80048a0:	e011      	b.n	80048c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a2:	f7fe fbbb 	bl	800301c <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d803      	bhi.n	80048ba <HAL_SPI_Transmit+0x168>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d102      	bne.n	80048c0 <HAL_SPI_Transmit+0x16e>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048c4:	e074      	b.n	80049b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ce      	bne.n	800486e <HAL_SPI_Transmit+0x11c>
 80048d0:	e04c      	b.n	800496c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_SPI_Transmit+0x18e>
 80048da:	8afb      	ldrh	r3, [r7, #22]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d140      	bne.n	8004962 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004906:	e02c      	b.n	8004962 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d113      	bne.n	800493e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	7812      	ldrb	r2, [r2, #0]
 8004922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	86da      	strh	r2, [r3, #54]	; 0x36
 800493c:	e011      	b.n	8004962 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800493e:	f7fe fb6d 	bl	800301c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d803      	bhi.n	8004956 <HAL_SPI_Transmit+0x204>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d102      	bne.n	800495c <HAL_SPI_Transmit+0x20a>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004960:	e026      	b.n	80049b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1cd      	bne.n	8004908 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	6839      	ldr	r1, [r7, #0]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fbb7 	bl	80050e4 <SPI_EndRxTxTransaction>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e000      	b.n	80049b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b088      	sub	sp, #32
 80049ce:	af02      	add	r7, sp, #8
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e6:	d112      	bne.n	8004a0e <HAL_SPI_Receive+0x44>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10e      	bne.n	8004a0e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2204      	movs	r2, #4
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	4613      	mov	r3, r2
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f8f1 	bl	8004bec <HAL_SPI_TransmitReceive>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	e0ea      	b.n	8004be4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_SPI_Receive+0x52>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e0e3      	b.n	8004be4 <HAL_SPI_Receive+0x21a>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a24:	f7fe fafa 	bl	800301c <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
 8004a38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a3a:	e0ca      	b.n	8004bd2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_SPI_Receive+0x7e>
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a4c:	e0c1      	b.n	8004bd2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2204      	movs	r2, #4
 8004a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a94:	d10f      	bne.n	8004ab6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d007      	beq.n	8004ad4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d162      	bne.n	8004ba2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004adc:	e02e      	b.n	8004b3c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d115      	bne.n	8004b18 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f103 020c 	add.w	r2, r3, #12
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	7812      	ldrb	r2, [r2, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b16:	e011      	b.n	8004b3c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b18:	f7fe fa80 	bl	800301c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d803      	bhi.n	8004b30 <HAL_SPI_Receive+0x166>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d102      	bne.n	8004b36 <HAL_SPI_Receive+0x16c>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b3a:	e04a      	b.n	8004bd2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1cb      	bne.n	8004ade <HAL_SPI_Receive+0x114>
 8004b46:	e031      	b.n	8004bac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d113      	bne.n	8004b7e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	b292      	uxth	r2, r2
 8004b62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	1c9a      	adds	r2, r3, #2
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b7c:	e011      	b.n	8004ba2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b7e:	f7fe fa4d 	bl	800301c <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d803      	bhi.n	8004b96 <HAL_SPI_Receive+0x1cc>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d102      	bne.n	8004b9c <HAL_SPI_Receive+0x1d2>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ba0:	e017      	b.n	8004bd2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1cd      	bne.n	8004b48 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fa45 	bl	8005040 <SPI_EndRxTransaction>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	75fb      	strb	r3, [r7, #23]
 8004bce:	e000      	b.n	8004bd2 <HAL_SPI_Receive+0x208>
  }

error :
 8004bd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08c      	sub	sp, #48	; 0x30
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_SPI_TransmitReceive+0x26>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e18a      	b.n	8004f28 <HAL_SPI_TransmitReceive+0x33c>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1a:	f7fe f9ff 	bl	800301c <HAL_GetTick>
 8004c1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c30:	887b      	ldrh	r3, [r7, #2]
 8004c32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d00f      	beq.n	8004c5c <HAL_SPI_TransmitReceive+0x70>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c42:	d107      	bne.n	8004c54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <HAL_SPI_TransmitReceive+0x68>
 8004c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d003      	beq.n	8004c5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c54:	2302      	movs	r3, #2
 8004c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c5a:	e15b      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_SPI_TransmitReceive+0x82>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_SPI_TransmitReceive+0x82>
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c74:	e14e      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d003      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2205      	movs	r2, #5
 8004c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	887a      	ldrh	r2, [r7, #2]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	887a      	ldrh	r2, [r7, #2]
 8004ca0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	887a      	ldrh	r2, [r7, #2]
 8004cac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	887a      	ldrh	r2, [r7, #2]
 8004cb2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d007      	beq.n	8004cde <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce6:	d178      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0x10a>
 8004cf0:	8b7b      	ldrh	r3, [r7, #26]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d166      	bne.n	8004dc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	881a      	ldrh	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	1c9a      	adds	r2, r3, #2
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1a:	e053      	b.n	8004dc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d11b      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x176>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d016      	beq.n	8004d62 <HAL_SPI_TransmitReceive+0x176>
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d113      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	881a      	ldrh	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	1c9a      	adds	r2, r3, #2
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d119      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x1b8>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d014      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	b292      	uxth	r2, r2
 8004d86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004da0:	2301      	movs	r3, #1
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004da4:	f7fe f93a 	bl	800301c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d807      	bhi.n	8004dc4 <HAL_SPI_TransmitReceive+0x1d8>
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d003      	beq.n	8004dc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dc2:	e0a7      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1a6      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x130>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1a1      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x130>
 8004dd8:	e07c      	b.n	8004ed4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_SPI_TransmitReceive+0x1fc>
 8004de2:	8b7b      	ldrh	r3, [r7, #26]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d16b      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	7812      	ldrb	r2, [r2, #0]
 8004df4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e0e:	e057      	b.n	8004ec0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d11c      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x26c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d017      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x26c>
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d114      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	7812      	ldrb	r2, [r2, #0]
 8004e3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d119      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x2ae>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d014      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e96:	2301      	movs	r3, #1
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e9a:	f7fe f8bf 	bl	800301c <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d803      	bhi.n	8004eb2 <HAL_SPI_TransmitReceive+0x2c6>
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d102      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x2cc>
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ebe:	e029      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1a2      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x224>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d19d      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f903 	bl	80050e4 <SPI_EndRxTxTransaction>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d006      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ef0:	e010      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	e000      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3730      	adds	r7, #48	; 0x30
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f40:	f7fe f86c 	bl	800301c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f50:	f7fe f864 	bl	800301c <HAL_GetTick>
 8004f54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f56:	4b39      	ldr	r3, [pc, #228]	; (800503c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	015b      	lsls	r3, r3, #5
 8004f5c:	0d1b      	lsrs	r3, r3, #20
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f66:	e054      	b.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d050      	beq.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f70:	f7fe f854 	bl	800301c <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d902      	bls.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d13d      	bne.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f9e:	d111      	bne.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa8:	d004      	beq.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb2:	d107      	bne.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fcc:	d10f      	bne.n	8004fee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e017      	b.n	8005032 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	3b01      	subs	r3, #1
 8005010:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4013      	ands	r3, r2
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	429a      	cmp	r2, r3
 800502e:	d19b      	bne.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3720      	adds	r7, #32
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000008 	.word	0x20000008

08005040 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005054:	d111      	bne.n	800507a <SPI_EndRxTransaction+0x3a>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505e:	d004      	beq.n	800506a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005068:	d107      	bne.n	800507a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005078:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005082:	d117      	bne.n	80050b4 <SPI_EndRxTransaction+0x74>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508c:	d112      	bne.n	80050b4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	2101      	movs	r1, #1
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff ff49 	bl	8004f30 <SPI_WaitFlagStateUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01a      	beq.n	80050da <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e013      	b.n	80050dc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	2180      	movs	r1, #128	; 0x80
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff ff36 	bl	8004f30 <SPI_WaitFlagStateUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e000      	b.n	80050dc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7ff ff18 	bl	8004f30 <SPI_WaitFlagStateUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	f043 0220 	orr.w	r2, r3, #32
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e000      	b.n	8005118 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <HAL_SRAM_Init+0x1c>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513a:	d101      	bne.n	8005140 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e038      	b.n	80051b2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7fc fc15 	bl	8001984 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3308      	adds	r3, #8
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 fbff 	bl	8005968 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	461a      	mov	r2, r3
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	f000 fc61 	bl	8005a3c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6858      	ldr	r0, [r3, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	f000 fc8c 	bl	8005aa4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	6892      	ldr	r2, [r2, #8]
 8005194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	6892      	ldr	r2, [r2, #8]
 80051a0:	f041 0101 	orr.w	r1, r1, #1
 80051a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e041      	b.n	8005250 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7fd fe79 	bl	8002ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f000 fa27 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b02      	cmp	r3, #2
 800526c:	d122      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b02      	cmp	r3, #2
 800527a:	d11b      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0202 	mvn.w	r2, #2
 8005284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9ba 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 80052a0:	e005      	b.n	80052ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f9ad 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f9bc 	bl	8005626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d122      	bne.n	8005308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d11b      	bne.n	8005308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0204 	mvn.w	r2, #4
 80052d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f990 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 80052f4:	e005      	b.n	8005302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f983 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f992 	bl	8005626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b08      	cmp	r3, #8
 8005314:	d122      	bne.n	800535c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b08      	cmp	r3, #8
 8005322:	d11b      	bne.n	800535c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0208 	mvn.w	r2, #8
 800532c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2204      	movs	r2, #4
 8005332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f966 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 8005348:	e005      	b.n	8005356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f959 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f968 	bl	8005626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b10      	cmp	r3, #16
 8005368:	d122      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b10      	cmp	r3, #16
 8005376:	d11b      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0210 	mvn.w	r2, #16
 8005380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2208      	movs	r2, #8
 8005386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f93c 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 800539c:	e005      	b.n	80053aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f92f 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f93e 	bl	8005626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d10e      	bne.n	80053dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d107      	bne.n	80053dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0201 	mvn.w	r2, #1
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f90a 	bl	80055f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b80      	cmp	r3, #128	; 0x80
 80053e8:	d10e      	bne.n	8005408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d107      	bne.n	8005408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 faa7 	bl	8005956 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d10e      	bne.n	8005434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	2b40      	cmp	r3, #64	; 0x40
 8005422:	d107      	bne.n	8005434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800542c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f902 	bl	8005638 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b20      	cmp	r3, #32
 8005440:	d10e      	bne.n	8005460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b20      	cmp	r3, #32
 800544e:	d107      	bne.n	8005460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0220 	mvn.w	r2, #32
 8005458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa72 	bl	8005944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_TIM_ConfigClockSource+0x18>
 800547c:	2302      	movs	r3, #2
 800547e:	e0b3      	b.n	80055e8 <HAL_TIM_ConfigClockSource+0x180>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800549e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b8:	d03e      	beq.n	8005538 <HAL_TIM_ConfigClockSource+0xd0>
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054be:	f200 8087 	bhi.w	80055d0 <HAL_TIM_ConfigClockSource+0x168>
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	f000 8085 	beq.w	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d87f      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x168>
 80054d0:	2b70      	cmp	r3, #112	; 0x70
 80054d2:	d01a      	beq.n	800550a <HAL_TIM_ConfigClockSource+0xa2>
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d87b      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x168>
 80054d8:	2b60      	cmp	r3, #96	; 0x60
 80054da:	d050      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x116>
 80054dc:	2b60      	cmp	r3, #96	; 0x60
 80054de:	d877      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x168>
 80054e0:	2b50      	cmp	r3, #80	; 0x50
 80054e2:	d03c      	beq.n	800555e <HAL_TIM_ConfigClockSource+0xf6>
 80054e4:	2b50      	cmp	r3, #80	; 0x50
 80054e6:	d873      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x168>
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	d058      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x136>
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d86f      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x168>
 80054f0:	2b30      	cmp	r3, #48	; 0x30
 80054f2:	d064      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x156>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d86b      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x168>
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d060      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x156>
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d867      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x168>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05c      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x156>
 8005504:	2b10      	cmp	r3, #16
 8005506:	d05a      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005508:	e062      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6899      	ldr	r1, [r3, #8]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f000 f988 	bl	800582e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800552c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	609a      	str	r2, [r3, #8]
      break;
 8005536:	e04e      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	6899      	ldr	r1, [r3, #8]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f000 f971 	bl	800582e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800555a:	609a      	str	r2, [r3, #8]
      break;
 800555c:	e03b      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6859      	ldr	r1, [r3, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	461a      	mov	r2, r3
 800556c:	f000 f8e8 	bl	8005740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2150      	movs	r1, #80	; 0x50
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f93f 	bl	80057fa <TIM_ITRx_SetConfig>
      break;
 800557c:	e02b      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	f000 f906 	bl	800579c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2160      	movs	r1, #96	; 0x60
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f92f 	bl	80057fa <TIM_ITRx_SetConfig>
      break;
 800559c:	e01b      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f000 f8c8 	bl	8005740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2140      	movs	r1, #64	; 0x40
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f91f 	bl	80057fa <TIM_ITRx_SetConfig>
      break;
 80055bc:	e00b      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f000 f916 	bl	80057fa <TIM_ITRx_SetConfig>
        break;
 80055ce:	e002      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr

08005602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr
	...

0800564c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a33      	ldr	r2, [pc, #204]	; (800572c <TIM_Base_SetConfig+0xe0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d013      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a32      	ldr	r2, [pc, #200]	; (8005730 <TIM_Base_SetConfig+0xe4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00f      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d00b      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a2f      	ldr	r2, [pc, #188]	; (8005734 <TIM_Base_SetConfig+0xe8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d007      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a2e      	ldr	r2, [pc, #184]	; (8005738 <TIM_Base_SetConfig+0xec>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d003      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a2d      	ldr	r2, [pc, #180]	; (800573c <TIM_Base_SetConfig+0xf0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d108      	bne.n	800569e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a22      	ldr	r2, [pc, #136]	; (800572c <TIM_Base_SetConfig+0xe0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <TIM_Base_SetConfig+0x82>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a21      	ldr	r2, [pc, #132]	; (8005730 <TIM_Base_SetConfig+0xe4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00f      	beq.n	80056ce <TIM_Base_SetConfig+0x82>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d00b      	beq.n	80056ce <TIM_Base_SetConfig+0x82>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <TIM_Base_SetConfig+0xe8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d007      	beq.n	80056ce <TIM_Base_SetConfig+0x82>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <TIM_Base_SetConfig+0xec>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d003      	beq.n	80056ce <TIM_Base_SetConfig+0x82>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1c      	ldr	r2, [pc, #112]	; (800573c <TIM_Base_SetConfig+0xf0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d108      	bne.n	80056e0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a09      	ldr	r2, [pc, #36]	; (800572c <TIM_Base_SetConfig+0xe0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_Base_SetConfig+0xc8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a08      	ldr	r2, [pc, #32]	; (8005730 <TIM_Base_SetConfig+0xe4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d103      	bne.n	800571c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	615a      	str	r2, [r3, #20]
}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00

08005740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0201 	bic.w	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800576a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f023 030a 	bic.w	r3, r3, #10
 800577c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr

0800579c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f023 0210 	bic.w	r2, r3, #16
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	031b      	lsls	r3, r3, #12
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	621a      	str	r2, [r3, #32]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	f043 0307 	orr.w	r3, r3, #7
 800581c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	609a      	str	r2, [r3, #8]
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800582e:	b480      	push	{r7}
 8005830:	b087      	sub	sp, #28
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005848:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	021a      	lsls	r2, r3, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	431a      	orrs	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4313      	orrs	r3, r2
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	609a      	str	r2, [r3, #8]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e050      	b.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d018      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a19      	ldr	r2, [pc, #100]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058da:	d00e      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a15      	ldr	r2, [pc, #84]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a14      	ldr	r2, [pc, #80]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a12      	ldr	r2, [pc, #72]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d10c      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4313      	orrs	r3, r2
 800590a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40013400 	.word	0x40013400
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40000c00 	.word	0x40000c00

08005944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	f023 0101 	bic.w	r1, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	2b08      	cmp	r3, #8
 8005990:	d102      	bne.n	8005998 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e001      	b.n	800599c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80059a8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80059ae:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80059b4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80059ba:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80059c0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80059c6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80059cc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80059d2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80059d8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80059f6:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <FSMC_NORSRAM_Init+0xd0>)
 80059f8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a00:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005a08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	43db      	mvns	r3, r3
 8005a18:	ea02 0103 	and.w	r1, r2, r3
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4319      	orrs	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	0008fb7f 	.word	0x0008fb7f

08005a3c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a52:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	041b      	lsls	r3, r3, #16
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	051b      	lsls	r3, r3, #20
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	3b02      	subs	r3, #2
 8005a82:	061b      	lsls	r3, r3, #24
 8005a84:	431a      	orrs	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	3201      	adds	r2, #1
 8005a90:	4319      	orrs	r1, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ab8:	d11d      	bne.n	8005af6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	6811      	ldr	r1, [r2, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	6852      	ldr	r2, [r2, #4]
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	4311      	orrs	r1, r2
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	6892      	ldr	r2, [r2, #8]
 8005ad6:	0212      	lsls	r2, r2, #8
 8005ad8:	4311      	orrs	r1, r2
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	6992      	ldr	r2, [r2, #24]
 8005ade:	4311      	orrs	r1, r2
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	68d2      	ldr	r2, [r2, #12]
 8005ae4:	0412      	lsls	r2, r2, #16
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	ea43 0102 	orr.w	r1, r3, r2
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005af4:	e005      	b.n	8005b02 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	cff00000 	.word	0xcff00000

08005b14 <__errno>:
 8005b14:	4b01      	ldr	r3, [pc, #4]	; (8005b1c <__errno+0x8>)
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000014 	.word	0x20000014

08005b20 <__libc_init_array>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	2600      	movs	r6, #0
 8005b24:	4d0c      	ldr	r5, [pc, #48]	; (8005b58 <__libc_init_array+0x38>)
 8005b26:	4c0d      	ldr	r4, [pc, #52]	; (8005b5c <__libc_init_array+0x3c>)
 8005b28:	1b64      	subs	r4, r4, r5
 8005b2a:	10a4      	asrs	r4, r4, #2
 8005b2c:	42a6      	cmp	r6, r4
 8005b2e:	d109      	bne.n	8005b44 <__libc_init_array+0x24>
 8005b30:	f002 fefa 	bl	8008928 <_init>
 8005b34:	2600      	movs	r6, #0
 8005b36:	4d0a      	ldr	r5, [pc, #40]	; (8005b60 <__libc_init_array+0x40>)
 8005b38:	4c0a      	ldr	r4, [pc, #40]	; (8005b64 <__libc_init_array+0x44>)
 8005b3a:	1b64      	subs	r4, r4, r5
 8005b3c:	10a4      	asrs	r4, r4, #2
 8005b3e:	42a6      	cmp	r6, r4
 8005b40:	d105      	bne.n	8005b4e <__libc_init_array+0x2e>
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b48:	4798      	blx	r3
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	e7ee      	b.n	8005b2c <__libc_init_array+0xc>
 8005b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b52:	4798      	blx	r3
 8005b54:	3601      	adds	r6, #1
 8005b56:	e7f2      	b.n	8005b3e <__libc_init_array+0x1e>
 8005b58:	080093fc 	.word	0x080093fc
 8005b5c:	080093fc 	.word	0x080093fc
 8005b60:	080093fc 	.word	0x080093fc
 8005b64:	08009400 	.word	0x08009400

08005b68 <memset>:
 8005b68:	4603      	mov	r3, r0
 8005b6a:	4402      	add	r2, r0
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d100      	bne.n	8005b72 <memset+0xa>
 8005b70:	4770      	bx	lr
 8005b72:	f803 1b01 	strb.w	r1, [r3], #1
 8005b76:	e7f9      	b.n	8005b6c <memset+0x4>

08005b78 <__cvt>:
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7e:	461f      	mov	r7, r3
 8005b80:	bfbb      	ittet	lt
 8005b82:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b86:	461f      	movlt	r7, r3
 8005b88:	2300      	movge	r3, #0
 8005b8a:	232d      	movlt	r3, #45	; 0x2d
 8005b8c:	b088      	sub	sp, #32
 8005b8e:	4614      	mov	r4, r2
 8005b90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b94:	7013      	strb	r3, [r2, #0]
 8005b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b98:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005b9c:	f023 0820 	bic.w	r8, r3, #32
 8005ba0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ba4:	d005      	beq.n	8005bb2 <__cvt+0x3a>
 8005ba6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005baa:	d100      	bne.n	8005bae <__cvt+0x36>
 8005bac:	3501      	adds	r5, #1
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e000      	b.n	8005bb4 <__cvt+0x3c>
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	aa07      	add	r2, sp, #28
 8005bb6:	9204      	str	r2, [sp, #16]
 8005bb8:	aa06      	add	r2, sp, #24
 8005bba:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005bbe:	e9cd 3500 	strd	r3, r5, [sp]
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	f000 fce3 	bl	8006590 <_dtoa_r>
 8005bca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bce:	4606      	mov	r6, r0
 8005bd0:	d102      	bne.n	8005bd8 <__cvt+0x60>
 8005bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bd4:	07db      	lsls	r3, r3, #31
 8005bd6:	d522      	bpl.n	8005c1e <__cvt+0xa6>
 8005bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bdc:	eb06 0905 	add.w	r9, r6, r5
 8005be0:	d110      	bne.n	8005c04 <__cvt+0x8c>
 8005be2:	7833      	ldrb	r3, [r6, #0]
 8005be4:	2b30      	cmp	r3, #48	; 0x30
 8005be6:	d10a      	bne.n	8005bfe <__cvt+0x86>
 8005be8:	2200      	movs	r2, #0
 8005bea:	2300      	movs	r3, #0
 8005bec:	4620      	mov	r0, r4
 8005bee:	4639      	mov	r1, r7
 8005bf0:	f7fa ff46 	bl	8000a80 <__aeabi_dcmpeq>
 8005bf4:	b918      	cbnz	r0, 8005bfe <__cvt+0x86>
 8005bf6:	f1c5 0501 	rsb	r5, r5, #1
 8005bfa:	f8ca 5000 	str.w	r5, [sl]
 8005bfe:	f8da 3000 	ldr.w	r3, [sl]
 8005c02:	4499      	add	r9, r3
 8005c04:	2200      	movs	r2, #0
 8005c06:	2300      	movs	r3, #0
 8005c08:	4620      	mov	r0, r4
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa ff38 	bl	8000a80 <__aeabi_dcmpeq>
 8005c10:	b108      	cbz	r0, 8005c16 <__cvt+0x9e>
 8005c12:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c16:	2230      	movs	r2, #48	; 0x30
 8005c18:	9b07      	ldr	r3, [sp, #28]
 8005c1a:	454b      	cmp	r3, r9
 8005c1c:	d307      	bcc.n	8005c2e <__cvt+0xb6>
 8005c1e:	4630      	mov	r0, r6
 8005c20:	9b07      	ldr	r3, [sp, #28]
 8005c22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c24:	1b9b      	subs	r3, r3, r6
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	b008      	add	sp, #32
 8005c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	9107      	str	r1, [sp, #28]
 8005c32:	701a      	strb	r2, [r3, #0]
 8005c34:	e7f0      	b.n	8005c18 <__cvt+0xa0>

08005c36 <__exponent>:
 8005c36:	4603      	mov	r3, r0
 8005c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c3a:	2900      	cmp	r1, #0
 8005c3c:	f803 2b02 	strb.w	r2, [r3], #2
 8005c40:	bfb6      	itet	lt
 8005c42:	222d      	movlt	r2, #45	; 0x2d
 8005c44:	222b      	movge	r2, #43	; 0x2b
 8005c46:	4249      	neglt	r1, r1
 8005c48:	2909      	cmp	r1, #9
 8005c4a:	7042      	strb	r2, [r0, #1]
 8005c4c:	dd2b      	ble.n	8005ca6 <__exponent+0x70>
 8005c4e:	f10d 0407 	add.w	r4, sp, #7
 8005c52:	46a4      	mov	ip, r4
 8005c54:	270a      	movs	r7, #10
 8005c56:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	46a6      	mov	lr, r4
 8005c5e:	fb07 1516 	mls	r5, r7, r6, r1
 8005c62:	2a63      	cmp	r2, #99	; 0x63
 8005c64:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005c68:	4631      	mov	r1, r6
 8005c6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c72:	dcf0      	bgt.n	8005c56 <__exponent+0x20>
 8005c74:	3130      	adds	r1, #48	; 0x30
 8005c76:	f1ae 0502 	sub.w	r5, lr, #2
 8005c7a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c7e:	4629      	mov	r1, r5
 8005c80:	1c44      	adds	r4, r0, #1
 8005c82:	4561      	cmp	r1, ip
 8005c84:	d30a      	bcc.n	8005c9c <__exponent+0x66>
 8005c86:	f10d 0209 	add.w	r2, sp, #9
 8005c8a:	eba2 020e 	sub.w	r2, r2, lr
 8005c8e:	4565      	cmp	r5, ip
 8005c90:	bf88      	it	hi
 8005c92:	2200      	movhi	r2, #0
 8005c94:	4413      	add	r3, r2
 8005c96:	1a18      	subs	r0, r3, r0
 8005c98:	b003      	add	sp, #12
 8005c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ca0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ca4:	e7ed      	b.n	8005c82 <__exponent+0x4c>
 8005ca6:	2330      	movs	r3, #48	; 0x30
 8005ca8:	3130      	adds	r1, #48	; 0x30
 8005caa:	7083      	strb	r3, [r0, #2]
 8005cac:	70c1      	strb	r1, [r0, #3]
 8005cae:	1d03      	adds	r3, r0, #4
 8005cb0:	e7f1      	b.n	8005c96 <__exponent+0x60>
	...

08005cb4 <_printf_float>:
 8005cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb8:	b091      	sub	sp, #68	; 0x44
 8005cba:	460c      	mov	r4, r1
 8005cbc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005cc0:	4616      	mov	r6, r2
 8005cc2:	461f      	mov	r7, r3
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	f001 fa51 	bl	800716c <_localeconv_r>
 8005cca:	6803      	ldr	r3, [r0, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd0:	f7fa faaa 	bl	8000228 <strlen>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	930e      	str	r3, [sp, #56]	; 0x38
 8005cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cdc:	900a      	str	r0, [sp, #40]	; 0x28
 8005cde:	3307      	adds	r3, #7
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	f103 0208 	add.w	r2, r3, #8
 8005ce8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005cec:	f8d4 b000 	ldr.w	fp, [r4]
 8005cf0:	f8c8 2000 	str.w	r2, [r8]
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cfc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005d00:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d06:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	4b9c      	ldr	r3, [pc, #624]	; (8005f80 <_printf_float+0x2cc>)
 8005d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d10:	f7fa fee8 	bl	8000ae4 <__aeabi_dcmpun>
 8005d14:	bb70      	cbnz	r0, 8005d74 <_printf_float+0xc0>
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	4b98      	ldr	r3, [pc, #608]	; (8005f80 <_printf_float+0x2cc>)
 8005d1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d20:	f7fa fec2 	bl	8000aa8 <__aeabi_dcmple>
 8005d24:	bb30      	cbnz	r0, 8005d74 <_printf_float+0xc0>
 8005d26:	2200      	movs	r2, #0
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	f7fa feb1 	bl	8000a94 <__aeabi_dcmplt>
 8005d32:	b110      	cbz	r0, 8005d3a <_printf_float+0x86>
 8005d34:	232d      	movs	r3, #45	; 0x2d
 8005d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d3a:	4b92      	ldr	r3, [pc, #584]	; (8005f84 <_printf_float+0x2d0>)
 8005d3c:	4892      	ldr	r0, [pc, #584]	; (8005f88 <_printf_float+0x2d4>)
 8005d3e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d42:	bf94      	ite	ls
 8005d44:	4698      	movls	r8, r3
 8005d46:	4680      	movhi	r8, r0
 8005d48:	2303      	movs	r3, #3
 8005d4a:	f04f 0a00 	mov.w	sl, #0
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	f02b 0304 	bic.w	r3, fp, #4
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	4633      	mov	r3, r6
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	9700      	str	r7, [sp, #0]
 8005d5e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d60:	f000 f9d4 	bl	800610c <_printf_common>
 8005d64:	3001      	adds	r0, #1
 8005d66:	f040 8090 	bne.w	8005e8a <_printf_float+0x1d6>
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6e:	b011      	add	sp, #68	; 0x44
 8005d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d74:	4642      	mov	r2, r8
 8005d76:	4653      	mov	r3, sl
 8005d78:	4640      	mov	r0, r8
 8005d7a:	4651      	mov	r1, sl
 8005d7c:	f7fa feb2 	bl	8000ae4 <__aeabi_dcmpun>
 8005d80:	b148      	cbz	r0, 8005d96 <_printf_float+0xe2>
 8005d82:	f1ba 0f00 	cmp.w	sl, #0
 8005d86:	bfb8      	it	lt
 8005d88:	232d      	movlt	r3, #45	; 0x2d
 8005d8a:	4880      	ldr	r0, [pc, #512]	; (8005f8c <_printf_float+0x2d8>)
 8005d8c:	bfb8      	it	lt
 8005d8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d92:	4b7f      	ldr	r3, [pc, #508]	; (8005f90 <_printf_float+0x2dc>)
 8005d94:	e7d3      	b.n	8005d3e <_printf_float+0x8a>
 8005d96:	6863      	ldr	r3, [r4, #4]
 8005d98:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	d142      	bne.n	8005e26 <_printf_float+0x172>
 8005da0:	2306      	movs	r3, #6
 8005da2:	6063      	str	r3, [r4, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	9206      	str	r2, [sp, #24]
 8005da8:	aa0e      	add	r2, sp, #56	; 0x38
 8005daa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005dae:	aa0d      	add	r2, sp, #52	; 0x34
 8005db0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005db4:	9203      	str	r2, [sp, #12]
 8005db6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005dba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	6863      	ldr	r3, [r4, #4]
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	4653      	mov	r3, sl
 8005dca:	910b      	str	r1, [sp, #44]	; 0x2c
 8005dcc:	f7ff fed4 	bl	8005b78 <__cvt>
 8005dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	2947      	cmp	r1, #71	; 0x47
 8005dd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005dd8:	d108      	bne.n	8005dec <_printf_float+0x138>
 8005dda:	1cc8      	adds	r0, r1, #3
 8005ddc:	db02      	blt.n	8005de4 <_printf_float+0x130>
 8005dde:	6863      	ldr	r3, [r4, #4]
 8005de0:	4299      	cmp	r1, r3
 8005de2:	dd40      	ble.n	8005e66 <_printf_float+0x1b2>
 8005de4:	f1a9 0902 	sub.w	r9, r9, #2
 8005de8:	fa5f f989 	uxtb.w	r9, r9
 8005dec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005df0:	d81f      	bhi.n	8005e32 <_printf_float+0x17e>
 8005df2:	464a      	mov	r2, r9
 8005df4:	3901      	subs	r1, #1
 8005df6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005dfa:	910d      	str	r1, [sp, #52]	; 0x34
 8005dfc:	f7ff ff1b 	bl	8005c36 <__exponent>
 8005e00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e02:	4682      	mov	sl, r0
 8005e04:	1813      	adds	r3, r2, r0
 8005e06:	2a01      	cmp	r2, #1
 8005e08:	6123      	str	r3, [r4, #16]
 8005e0a:	dc02      	bgt.n	8005e12 <_printf_float+0x15e>
 8005e0c:	6822      	ldr	r2, [r4, #0]
 8005e0e:	07d2      	lsls	r2, r2, #31
 8005e10:	d501      	bpl.n	8005e16 <_printf_float+0x162>
 8005e12:	3301      	adds	r3, #1
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d09b      	beq.n	8005d56 <_printf_float+0xa2>
 8005e1e:	232d      	movs	r3, #45	; 0x2d
 8005e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e24:	e797      	b.n	8005d56 <_printf_float+0xa2>
 8005e26:	2947      	cmp	r1, #71	; 0x47
 8005e28:	d1bc      	bne.n	8005da4 <_printf_float+0xf0>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1ba      	bne.n	8005da4 <_printf_float+0xf0>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e7b7      	b.n	8005da2 <_printf_float+0xee>
 8005e32:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e36:	d118      	bne.n	8005e6a <_printf_float+0x1b6>
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	6863      	ldr	r3, [r4, #4]
 8005e3c:	dd0b      	ble.n	8005e56 <_printf_float+0x1a2>
 8005e3e:	6121      	str	r1, [r4, #16]
 8005e40:	b913      	cbnz	r3, 8005e48 <_printf_float+0x194>
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	07d0      	lsls	r0, r2, #31
 8005e46:	d502      	bpl.n	8005e4e <_printf_float+0x19a>
 8005e48:	3301      	adds	r3, #1
 8005e4a:	440b      	add	r3, r1
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	f04f 0a00 	mov.w	sl, #0
 8005e52:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e54:	e7df      	b.n	8005e16 <_printf_float+0x162>
 8005e56:	b913      	cbnz	r3, 8005e5e <_printf_float+0x1aa>
 8005e58:	6822      	ldr	r2, [r4, #0]
 8005e5a:	07d2      	lsls	r2, r2, #31
 8005e5c:	d501      	bpl.n	8005e62 <_printf_float+0x1ae>
 8005e5e:	3302      	adds	r3, #2
 8005e60:	e7f4      	b.n	8005e4c <_printf_float+0x198>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e7f2      	b.n	8005e4c <_printf_float+0x198>
 8005e66:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e6c:	4299      	cmp	r1, r3
 8005e6e:	db05      	blt.n	8005e7c <_printf_float+0x1c8>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	6121      	str	r1, [r4, #16]
 8005e74:	07d8      	lsls	r0, r3, #31
 8005e76:	d5ea      	bpl.n	8005e4e <_printf_float+0x19a>
 8005e78:	1c4b      	adds	r3, r1, #1
 8005e7a:	e7e7      	b.n	8005e4c <_printf_float+0x198>
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	bfcc      	ite	gt
 8005e80:	2201      	movgt	r2, #1
 8005e82:	f1c1 0202 	rsble	r2, r1, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	e7e0      	b.n	8005e4c <_printf_float+0x198>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	055a      	lsls	r2, r3, #21
 8005e8e:	d407      	bmi.n	8005ea0 <_printf_float+0x1ec>
 8005e90:	6923      	ldr	r3, [r4, #16]
 8005e92:	4642      	mov	r2, r8
 8005e94:	4631      	mov	r1, r6
 8005e96:	4628      	mov	r0, r5
 8005e98:	47b8      	blx	r7
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d12b      	bne.n	8005ef6 <_printf_float+0x242>
 8005e9e:	e764      	b.n	8005d6a <_printf_float+0xb6>
 8005ea0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ea4:	f240 80dd 	bls.w	8006062 <_printf_float+0x3ae>
 8005ea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f7fa fde6 	bl	8000a80 <__aeabi_dcmpeq>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d033      	beq.n	8005f20 <_printf_float+0x26c>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	4a35      	ldr	r2, [pc, #212]	; (8005f94 <_printf_float+0x2e0>)
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	f43f af51 	beq.w	8005d6a <_printf_float+0xb6>
 8005ec8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	db02      	blt.n	8005ed6 <_printf_float+0x222>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	07d8      	lsls	r0, r3, #31
 8005ed4:	d50f      	bpl.n	8005ef6 <_printf_float+0x242>
 8005ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eda:	4631      	mov	r1, r6
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b8      	blx	r7
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	f43f af42 	beq.w	8005d6a <_printf_float+0xb6>
 8005ee6:	f04f 0800 	mov.w	r8, #0
 8005eea:	f104 091a 	add.w	r9, r4, #26
 8005eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	4543      	cmp	r3, r8
 8005ef4:	dc09      	bgt.n	8005f0a <_printf_float+0x256>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	079b      	lsls	r3, r3, #30
 8005efa:	f100 8102 	bmi.w	8006102 <_printf_float+0x44e>
 8005efe:	68e0      	ldr	r0, [r4, #12]
 8005f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f02:	4298      	cmp	r0, r3
 8005f04:	bfb8      	it	lt
 8005f06:	4618      	movlt	r0, r3
 8005f08:	e731      	b.n	8005d6e <_printf_float+0xba>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	464a      	mov	r2, r9
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f af28 	beq.w	8005d6a <_printf_float+0xb6>
 8005f1a:	f108 0801 	add.w	r8, r8, #1
 8005f1e:	e7e6      	b.n	8005eee <_printf_float+0x23a>
 8005f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dc38      	bgt.n	8005f98 <_printf_float+0x2e4>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <_printf_float+0x2e0>)
 8005f2e:	47b8      	blx	r7
 8005f30:	3001      	adds	r0, #1
 8005f32:	f43f af1a 	beq.w	8005d6a <_printf_float+0xb6>
 8005f36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	d102      	bne.n	8005f44 <_printf_float+0x290>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	07d9      	lsls	r1, r3, #31
 8005f42:	d5d8      	bpl.n	8005ef6 <_printf_float+0x242>
 8005f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b8      	blx	r7
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f43f af0b 	beq.w	8005d6a <_printf_float+0xb6>
 8005f54:	f04f 0900 	mov.w	r9, #0
 8005f58:	f104 0a1a 	add.w	sl, r4, #26
 8005f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f5e:	425b      	negs	r3, r3
 8005f60:	454b      	cmp	r3, r9
 8005f62:	dc01      	bgt.n	8005f68 <_printf_float+0x2b4>
 8005f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f66:	e794      	b.n	8005e92 <_printf_float+0x1de>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	f43f aef9 	beq.w	8005d6a <_printf_float+0xb6>
 8005f78:	f109 0901 	add.w	r9, r9, #1
 8005f7c:	e7ee      	b.n	8005f5c <_printf_float+0x2a8>
 8005f7e:	bf00      	nop
 8005f80:	7fefffff 	.word	0x7fefffff
 8005f84:	08009028 	.word	0x08009028
 8005f88:	0800902c 	.word	0x0800902c
 8005f8c:	08009034 	.word	0x08009034
 8005f90:	08009030 	.word	0x08009030
 8005f94:	08009038 	.word	0x08009038
 8005f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	bfa8      	it	ge
 8005fa0:	461a      	movge	r2, r3
 8005fa2:	2a00      	cmp	r2, #0
 8005fa4:	4691      	mov	r9, r2
 8005fa6:	dc37      	bgt.n	8006018 <_printf_float+0x364>
 8005fa8:	f04f 0b00 	mov.w	fp, #0
 8005fac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb0:	f104 021a 	add.w	r2, r4, #26
 8005fb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005fb8:	ebaa 0309 	sub.w	r3, sl, r9
 8005fbc:	455b      	cmp	r3, fp
 8005fbe:	dc33      	bgt.n	8006028 <_printf_float+0x374>
 8005fc0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	db3b      	blt.n	8006040 <_printf_float+0x38c>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	07da      	lsls	r2, r3, #31
 8005fcc:	d438      	bmi.n	8006040 <_printf_float+0x38c>
 8005fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fd2:	eba3 020a 	sub.w	r2, r3, sl
 8005fd6:	eba3 0901 	sub.w	r9, r3, r1
 8005fda:	4591      	cmp	r9, r2
 8005fdc:	bfa8      	it	ge
 8005fde:	4691      	movge	r9, r2
 8005fe0:	f1b9 0f00 	cmp.w	r9, #0
 8005fe4:	dc34      	bgt.n	8006050 <_printf_float+0x39c>
 8005fe6:	f04f 0800 	mov.w	r8, #0
 8005fea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fee:	f104 0a1a 	add.w	sl, r4, #26
 8005ff2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	eba3 0309 	sub.w	r3, r3, r9
 8005ffc:	4543      	cmp	r3, r8
 8005ffe:	f77f af7a 	ble.w	8005ef6 <_printf_float+0x242>
 8006002:	2301      	movs	r3, #1
 8006004:	4652      	mov	r2, sl
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	f43f aeac 	beq.w	8005d6a <_printf_float+0xb6>
 8006012:	f108 0801 	add.w	r8, r8, #1
 8006016:	e7ec      	b.n	8005ff2 <_printf_float+0x33e>
 8006018:	4613      	mov	r3, r2
 800601a:	4631      	mov	r1, r6
 800601c:	4642      	mov	r2, r8
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	d1c0      	bne.n	8005fa8 <_printf_float+0x2f4>
 8006026:	e6a0      	b.n	8005d6a <_printf_float+0xb6>
 8006028:	2301      	movs	r3, #1
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	f43f ae99 	beq.w	8005d6a <_printf_float+0xb6>
 8006038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800603a:	f10b 0b01 	add.w	fp, fp, #1
 800603e:	e7b9      	b.n	8005fb4 <_printf_float+0x300>
 8006040:	4631      	mov	r1, r6
 8006042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006046:	4628      	mov	r0, r5
 8006048:	47b8      	blx	r7
 800604a:	3001      	adds	r0, #1
 800604c:	d1bf      	bne.n	8005fce <_printf_float+0x31a>
 800604e:	e68c      	b.n	8005d6a <_printf_float+0xb6>
 8006050:	464b      	mov	r3, r9
 8006052:	4631      	mov	r1, r6
 8006054:	4628      	mov	r0, r5
 8006056:	eb08 020a 	add.w	r2, r8, sl
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	d1c2      	bne.n	8005fe6 <_printf_float+0x332>
 8006060:	e683      	b.n	8005d6a <_printf_float+0xb6>
 8006062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006064:	2a01      	cmp	r2, #1
 8006066:	dc01      	bgt.n	800606c <_printf_float+0x3b8>
 8006068:	07db      	lsls	r3, r3, #31
 800606a:	d537      	bpl.n	80060dc <_printf_float+0x428>
 800606c:	2301      	movs	r3, #1
 800606e:	4642      	mov	r2, r8
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f ae77 	beq.w	8005d6a <_printf_float+0xb6>
 800607c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f ae6f 	beq.w	8005d6a <_printf_float+0xb6>
 800608c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006090:	2200      	movs	r2, #0
 8006092:	2300      	movs	r3, #0
 8006094:	f7fa fcf4 	bl	8000a80 <__aeabi_dcmpeq>
 8006098:	b9d8      	cbnz	r0, 80060d2 <_printf_float+0x41e>
 800609a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800609c:	f108 0201 	add.w	r2, r8, #1
 80060a0:	3b01      	subs	r3, #1
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	d10e      	bne.n	80060ca <_printf_float+0x416>
 80060ac:	e65d      	b.n	8005d6a <_printf_float+0xb6>
 80060ae:	2301      	movs	r3, #1
 80060b0:	464a      	mov	r2, r9
 80060b2:	4631      	mov	r1, r6
 80060b4:	4628      	mov	r0, r5
 80060b6:	47b8      	blx	r7
 80060b8:	3001      	adds	r0, #1
 80060ba:	f43f ae56 	beq.w	8005d6a <_printf_float+0xb6>
 80060be:	f108 0801 	add.w	r8, r8, #1
 80060c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060c4:	3b01      	subs	r3, #1
 80060c6:	4543      	cmp	r3, r8
 80060c8:	dcf1      	bgt.n	80060ae <_printf_float+0x3fa>
 80060ca:	4653      	mov	r3, sl
 80060cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060d0:	e6e0      	b.n	8005e94 <_printf_float+0x1e0>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	f104 091a 	add.w	r9, r4, #26
 80060da:	e7f2      	b.n	80060c2 <_printf_float+0x40e>
 80060dc:	2301      	movs	r3, #1
 80060de:	4642      	mov	r2, r8
 80060e0:	e7df      	b.n	80060a2 <_printf_float+0x3ee>
 80060e2:	2301      	movs	r3, #1
 80060e4:	464a      	mov	r2, r9
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f ae3c 	beq.w	8005d6a <_printf_float+0xb6>
 80060f2:	f108 0801 	add.w	r8, r8, #1
 80060f6:	68e3      	ldr	r3, [r4, #12]
 80060f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80060fa:	1a5b      	subs	r3, r3, r1
 80060fc:	4543      	cmp	r3, r8
 80060fe:	dcf0      	bgt.n	80060e2 <_printf_float+0x42e>
 8006100:	e6fd      	b.n	8005efe <_printf_float+0x24a>
 8006102:	f04f 0800 	mov.w	r8, #0
 8006106:	f104 0919 	add.w	r9, r4, #25
 800610a:	e7f4      	b.n	80060f6 <_printf_float+0x442>

0800610c <_printf_common>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	4616      	mov	r6, r2
 8006112:	4699      	mov	r9, r3
 8006114:	688a      	ldr	r2, [r1, #8]
 8006116:	690b      	ldr	r3, [r1, #16]
 8006118:	4607      	mov	r7, r0
 800611a:	4293      	cmp	r3, r2
 800611c:	bfb8      	it	lt
 800611e:	4613      	movlt	r3, r2
 8006120:	6033      	str	r3, [r6, #0]
 8006122:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006126:	460c      	mov	r4, r1
 8006128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800612c:	b10a      	cbz	r2, 8006132 <_printf_common+0x26>
 800612e:	3301      	adds	r3, #1
 8006130:	6033      	str	r3, [r6, #0]
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	0699      	lsls	r1, r3, #26
 8006136:	bf42      	ittt	mi
 8006138:	6833      	ldrmi	r3, [r6, #0]
 800613a:	3302      	addmi	r3, #2
 800613c:	6033      	strmi	r3, [r6, #0]
 800613e:	6825      	ldr	r5, [r4, #0]
 8006140:	f015 0506 	ands.w	r5, r5, #6
 8006144:	d106      	bne.n	8006154 <_printf_common+0x48>
 8006146:	f104 0a19 	add.w	sl, r4, #25
 800614a:	68e3      	ldr	r3, [r4, #12]
 800614c:	6832      	ldr	r2, [r6, #0]
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	42ab      	cmp	r3, r5
 8006152:	dc28      	bgt.n	80061a6 <_printf_common+0x9a>
 8006154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006158:	1e13      	subs	r3, r2, #0
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	bf18      	it	ne
 800615e:	2301      	movne	r3, #1
 8006160:	0692      	lsls	r2, r2, #26
 8006162:	d42d      	bmi.n	80061c0 <_printf_common+0xb4>
 8006164:	4649      	mov	r1, r9
 8006166:	4638      	mov	r0, r7
 8006168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800616c:	47c0      	blx	r8
 800616e:	3001      	adds	r0, #1
 8006170:	d020      	beq.n	80061b4 <_printf_common+0xa8>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	68e5      	ldr	r5, [r4, #12]
 8006176:	f003 0306 	and.w	r3, r3, #6
 800617a:	2b04      	cmp	r3, #4
 800617c:	bf18      	it	ne
 800617e:	2500      	movne	r5, #0
 8006180:	6832      	ldr	r2, [r6, #0]
 8006182:	f04f 0600 	mov.w	r6, #0
 8006186:	68a3      	ldr	r3, [r4, #8]
 8006188:	bf08      	it	eq
 800618a:	1aad      	subeq	r5, r5, r2
 800618c:	6922      	ldr	r2, [r4, #16]
 800618e:	bf08      	it	eq
 8006190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006194:	4293      	cmp	r3, r2
 8006196:	bfc4      	itt	gt
 8006198:	1a9b      	subgt	r3, r3, r2
 800619a:	18ed      	addgt	r5, r5, r3
 800619c:	341a      	adds	r4, #26
 800619e:	42b5      	cmp	r5, r6
 80061a0:	d11a      	bne.n	80061d8 <_printf_common+0xcc>
 80061a2:	2000      	movs	r0, #0
 80061a4:	e008      	b.n	80061b8 <_printf_common+0xac>
 80061a6:	2301      	movs	r3, #1
 80061a8:	4652      	mov	r2, sl
 80061aa:	4649      	mov	r1, r9
 80061ac:	4638      	mov	r0, r7
 80061ae:	47c0      	blx	r8
 80061b0:	3001      	adds	r0, #1
 80061b2:	d103      	bne.n	80061bc <_printf_common+0xb0>
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061bc:	3501      	adds	r5, #1
 80061be:	e7c4      	b.n	800614a <_printf_common+0x3e>
 80061c0:	2030      	movs	r0, #48	; 0x30
 80061c2:	18e1      	adds	r1, r4, r3
 80061c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061ce:	4422      	add	r2, r4
 80061d0:	3302      	adds	r3, #2
 80061d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061d6:	e7c5      	b.n	8006164 <_printf_common+0x58>
 80061d8:	2301      	movs	r3, #1
 80061da:	4622      	mov	r2, r4
 80061dc:	4649      	mov	r1, r9
 80061de:	4638      	mov	r0, r7
 80061e0:	47c0      	blx	r8
 80061e2:	3001      	adds	r0, #1
 80061e4:	d0e6      	beq.n	80061b4 <_printf_common+0xa8>
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7d9      	b.n	800619e <_printf_common+0x92>
	...

080061ec <_printf_i>:
 80061ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	7e0f      	ldrb	r7, [r1, #24]
 80061f2:	4691      	mov	r9, r2
 80061f4:	2f78      	cmp	r7, #120	; 0x78
 80061f6:	4680      	mov	r8, r0
 80061f8:	460c      	mov	r4, r1
 80061fa:	469a      	mov	sl, r3
 80061fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006202:	d807      	bhi.n	8006214 <_printf_i+0x28>
 8006204:	2f62      	cmp	r7, #98	; 0x62
 8006206:	d80a      	bhi.n	800621e <_printf_i+0x32>
 8006208:	2f00      	cmp	r7, #0
 800620a:	f000 80d9 	beq.w	80063c0 <_printf_i+0x1d4>
 800620e:	2f58      	cmp	r7, #88	; 0x58
 8006210:	f000 80a4 	beq.w	800635c <_printf_i+0x170>
 8006214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800621c:	e03a      	b.n	8006294 <_printf_i+0xa8>
 800621e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006222:	2b15      	cmp	r3, #21
 8006224:	d8f6      	bhi.n	8006214 <_printf_i+0x28>
 8006226:	a101      	add	r1, pc, #4	; (adr r1, 800622c <_printf_i+0x40>)
 8006228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800622c:	08006285 	.word	0x08006285
 8006230:	08006299 	.word	0x08006299
 8006234:	08006215 	.word	0x08006215
 8006238:	08006215 	.word	0x08006215
 800623c:	08006215 	.word	0x08006215
 8006240:	08006215 	.word	0x08006215
 8006244:	08006299 	.word	0x08006299
 8006248:	08006215 	.word	0x08006215
 800624c:	08006215 	.word	0x08006215
 8006250:	08006215 	.word	0x08006215
 8006254:	08006215 	.word	0x08006215
 8006258:	080063a7 	.word	0x080063a7
 800625c:	080062c9 	.word	0x080062c9
 8006260:	08006389 	.word	0x08006389
 8006264:	08006215 	.word	0x08006215
 8006268:	08006215 	.word	0x08006215
 800626c:	080063c9 	.word	0x080063c9
 8006270:	08006215 	.word	0x08006215
 8006274:	080062c9 	.word	0x080062c9
 8006278:	08006215 	.word	0x08006215
 800627c:	08006215 	.word	0x08006215
 8006280:	08006391 	.word	0x08006391
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	1d1a      	adds	r2, r3, #4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	602a      	str	r2, [r5, #0]
 800628c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006294:	2301      	movs	r3, #1
 8006296:	e0a4      	b.n	80063e2 <_printf_i+0x1f6>
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	6829      	ldr	r1, [r5, #0]
 800629c:	0606      	lsls	r6, r0, #24
 800629e:	f101 0304 	add.w	r3, r1, #4
 80062a2:	d50a      	bpl.n	80062ba <_printf_i+0xce>
 80062a4:	680e      	ldr	r6, [r1, #0]
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	2e00      	cmp	r6, #0
 80062aa:	da03      	bge.n	80062b4 <_printf_i+0xc8>
 80062ac:	232d      	movs	r3, #45	; 0x2d
 80062ae:	4276      	negs	r6, r6
 80062b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b4:	230a      	movs	r3, #10
 80062b6:	485e      	ldr	r0, [pc, #376]	; (8006430 <_printf_i+0x244>)
 80062b8:	e019      	b.n	80062ee <_printf_i+0x102>
 80062ba:	680e      	ldr	r6, [r1, #0]
 80062bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	bf18      	it	ne
 80062c4:	b236      	sxthne	r6, r6
 80062c6:	e7ef      	b.n	80062a8 <_printf_i+0xbc>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	6820      	ldr	r0, [r4, #0]
 80062cc:	1d19      	adds	r1, r3, #4
 80062ce:	6029      	str	r1, [r5, #0]
 80062d0:	0601      	lsls	r1, r0, #24
 80062d2:	d501      	bpl.n	80062d8 <_printf_i+0xec>
 80062d4:	681e      	ldr	r6, [r3, #0]
 80062d6:	e002      	b.n	80062de <_printf_i+0xf2>
 80062d8:	0646      	lsls	r6, r0, #25
 80062da:	d5fb      	bpl.n	80062d4 <_printf_i+0xe8>
 80062dc:	881e      	ldrh	r6, [r3, #0]
 80062de:	2f6f      	cmp	r7, #111	; 0x6f
 80062e0:	bf0c      	ite	eq
 80062e2:	2308      	moveq	r3, #8
 80062e4:	230a      	movne	r3, #10
 80062e6:	4852      	ldr	r0, [pc, #328]	; (8006430 <_printf_i+0x244>)
 80062e8:	2100      	movs	r1, #0
 80062ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062ee:	6865      	ldr	r5, [r4, #4]
 80062f0:	2d00      	cmp	r5, #0
 80062f2:	bfa8      	it	ge
 80062f4:	6821      	ldrge	r1, [r4, #0]
 80062f6:	60a5      	str	r5, [r4, #8]
 80062f8:	bfa4      	itt	ge
 80062fa:	f021 0104 	bicge.w	r1, r1, #4
 80062fe:	6021      	strge	r1, [r4, #0]
 8006300:	b90e      	cbnz	r6, 8006306 <_printf_i+0x11a>
 8006302:	2d00      	cmp	r5, #0
 8006304:	d04d      	beq.n	80063a2 <_printf_i+0x1b6>
 8006306:	4615      	mov	r5, r2
 8006308:	fbb6 f1f3 	udiv	r1, r6, r3
 800630c:	fb03 6711 	mls	r7, r3, r1, r6
 8006310:	5dc7      	ldrb	r7, [r0, r7]
 8006312:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006316:	4637      	mov	r7, r6
 8006318:	42bb      	cmp	r3, r7
 800631a:	460e      	mov	r6, r1
 800631c:	d9f4      	bls.n	8006308 <_printf_i+0x11c>
 800631e:	2b08      	cmp	r3, #8
 8006320:	d10b      	bne.n	800633a <_printf_i+0x14e>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	07de      	lsls	r6, r3, #31
 8006326:	d508      	bpl.n	800633a <_printf_i+0x14e>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	6861      	ldr	r1, [r4, #4]
 800632c:	4299      	cmp	r1, r3
 800632e:	bfde      	ittt	le
 8006330:	2330      	movle	r3, #48	; 0x30
 8006332:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006336:	f105 35ff 	addle.w	r5, r5, #4294967295
 800633a:	1b52      	subs	r2, r2, r5
 800633c:	6122      	str	r2, [r4, #16]
 800633e:	464b      	mov	r3, r9
 8006340:	4621      	mov	r1, r4
 8006342:	4640      	mov	r0, r8
 8006344:	f8cd a000 	str.w	sl, [sp]
 8006348:	aa03      	add	r2, sp, #12
 800634a:	f7ff fedf 	bl	800610c <_printf_common>
 800634e:	3001      	adds	r0, #1
 8006350:	d14c      	bne.n	80063ec <_printf_i+0x200>
 8006352:	f04f 30ff 	mov.w	r0, #4294967295
 8006356:	b004      	add	sp, #16
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635c:	4834      	ldr	r0, [pc, #208]	; (8006430 <_printf_i+0x244>)
 800635e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006362:	6829      	ldr	r1, [r5, #0]
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	f851 6b04 	ldr.w	r6, [r1], #4
 800636a:	6029      	str	r1, [r5, #0]
 800636c:	061d      	lsls	r5, r3, #24
 800636e:	d514      	bpl.n	800639a <_printf_i+0x1ae>
 8006370:	07df      	lsls	r7, r3, #31
 8006372:	bf44      	itt	mi
 8006374:	f043 0320 	orrmi.w	r3, r3, #32
 8006378:	6023      	strmi	r3, [r4, #0]
 800637a:	b91e      	cbnz	r6, 8006384 <_printf_i+0x198>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	f023 0320 	bic.w	r3, r3, #32
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	2310      	movs	r3, #16
 8006386:	e7af      	b.n	80062e8 <_printf_i+0xfc>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	f043 0320 	orr.w	r3, r3, #32
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	2378      	movs	r3, #120	; 0x78
 8006392:	4828      	ldr	r0, [pc, #160]	; (8006434 <_printf_i+0x248>)
 8006394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006398:	e7e3      	b.n	8006362 <_printf_i+0x176>
 800639a:	0659      	lsls	r1, r3, #25
 800639c:	bf48      	it	mi
 800639e:	b2b6      	uxthmi	r6, r6
 80063a0:	e7e6      	b.n	8006370 <_printf_i+0x184>
 80063a2:	4615      	mov	r5, r2
 80063a4:	e7bb      	b.n	800631e <_printf_i+0x132>
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	6826      	ldr	r6, [r4, #0]
 80063aa:	1d18      	adds	r0, r3, #4
 80063ac:	6961      	ldr	r1, [r4, #20]
 80063ae:	6028      	str	r0, [r5, #0]
 80063b0:	0635      	lsls	r5, r6, #24
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	d501      	bpl.n	80063ba <_printf_i+0x1ce>
 80063b6:	6019      	str	r1, [r3, #0]
 80063b8:	e002      	b.n	80063c0 <_printf_i+0x1d4>
 80063ba:	0670      	lsls	r0, r6, #25
 80063bc:	d5fb      	bpl.n	80063b6 <_printf_i+0x1ca>
 80063be:	8019      	strh	r1, [r3, #0]
 80063c0:	2300      	movs	r3, #0
 80063c2:	4615      	mov	r5, r2
 80063c4:	6123      	str	r3, [r4, #16]
 80063c6:	e7ba      	b.n	800633e <_printf_i+0x152>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	2100      	movs	r1, #0
 80063cc:	1d1a      	adds	r2, r3, #4
 80063ce:	602a      	str	r2, [r5, #0]
 80063d0:	681d      	ldr	r5, [r3, #0]
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	4628      	mov	r0, r5
 80063d6:	f000 fed5 	bl	8007184 <memchr>
 80063da:	b108      	cbz	r0, 80063e0 <_printf_i+0x1f4>
 80063dc:	1b40      	subs	r0, r0, r5
 80063de:	6060      	str	r0, [r4, #4]
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	6123      	str	r3, [r4, #16]
 80063e4:	2300      	movs	r3, #0
 80063e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ea:	e7a8      	b.n	800633e <_printf_i+0x152>
 80063ec:	462a      	mov	r2, r5
 80063ee:	4649      	mov	r1, r9
 80063f0:	4640      	mov	r0, r8
 80063f2:	6923      	ldr	r3, [r4, #16]
 80063f4:	47d0      	blx	sl
 80063f6:	3001      	adds	r0, #1
 80063f8:	d0ab      	beq.n	8006352 <_printf_i+0x166>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	079b      	lsls	r3, r3, #30
 80063fe:	d413      	bmi.n	8006428 <_printf_i+0x23c>
 8006400:	68e0      	ldr	r0, [r4, #12]
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	4298      	cmp	r0, r3
 8006406:	bfb8      	it	lt
 8006408:	4618      	movlt	r0, r3
 800640a:	e7a4      	b.n	8006356 <_printf_i+0x16a>
 800640c:	2301      	movs	r3, #1
 800640e:	4632      	mov	r2, r6
 8006410:	4649      	mov	r1, r9
 8006412:	4640      	mov	r0, r8
 8006414:	47d0      	blx	sl
 8006416:	3001      	adds	r0, #1
 8006418:	d09b      	beq.n	8006352 <_printf_i+0x166>
 800641a:	3501      	adds	r5, #1
 800641c:	68e3      	ldr	r3, [r4, #12]
 800641e:	9903      	ldr	r1, [sp, #12]
 8006420:	1a5b      	subs	r3, r3, r1
 8006422:	42ab      	cmp	r3, r5
 8006424:	dcf2      	bgt.n	800640c <_printf_i+0x220>
 8006426:	e7eb      	b.n	8006400 <_printf_i+0x214>
 8006428:	2500      	movs	r5, #0
 800642a:	f104 0619 	add.w	r6, r4, #25
 800642e:	e7f5      	b.n	800641c <_printf_i+0x230>
 8006430:	0800903a 	.word	0x0800903a
 8006434:	0800904b 	.word	0x0800904b

08006438 <siprintf>:
 8006438:	b40e      	push	{r1, r2, r3}
 800643a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800643e:	b500      	push	{lr}
 8006440:	b09c      	sub	sp, #112	; 0x70
 8006442:	ab1d      	add	r3, sp, #116	; 0x74
 8006444:	9002      	str	r0, [sp, #8]
 8006446:	9006      	str	r0, [sp, #24]
 8006448:	9107      	str	r1, [sp, #28]
 800644a:	9104      	str	r1, [sp, #16]
 800644c:	4808      	ldr	r0, [pc, #32]	; (8006470 <siprintf+0x38>)
 800644e:	4909      	ldr	r1, [pc, #36]	; (8006474 <siprintf+0x3c>)
 8006450:	f853 2b04 	ldr.w	r2, [r3], #4
 8006454:	9105      	str	r1, [sp, #20]
 8006456:	6800      	ldr	r0, [r0, #0]
 8006458:	a902      	add	r1, sp, #8
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	f001 fb7c 	bl	8007b58 <_svfiprintf_r>
 8006460:	2200      	movs	r2, #0
 8006462:	9b02      	ldr	r3, [sp, #8]
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	b01c      	add	sp, #112	; 0x70
 8006468:	f85d eb04 	ldr.w	lr, [sp], #4
 800646c:	b003      	add	sp, #12
 800646e:	4770      	bx	lr
 8006470:	20000014 	.word	0x20000014
 8006474:	ffff0208 	.word	0xffff0208

08006478 <quorem>:
 8006478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	6903      	ldr	r3, [r0, #16]
 800647e:	690c      	ldr	r4, [r1, #16]
 8006480:	4607      	mov	r7, r0
 8006482:	42a3      	cmp	r3, r4
 8006484:	f2c0 8082 	blt.w	800658c <quorem+0x114>
 8006488:	3c01      	subs	r4, #1
 800648a:	f100 0514 	add.w	r5, r0, #20
 800648e:	f101 0814 	add.w	r8, r1, #20
 8006492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800649c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a0:	3301      	adds	r3, #1
 80064a2:	429a      	cmp	r2, r3
 80064a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80064a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064b0:	d331      	bcc.n	8006516 <quorem+0x9e>
 80064b2:	f04f 0e00 	mov.w	lr, #0
 80064b6:	4640      	mov	r0, r8
 80064b8:	46ac      	mov	ip, r5
 80064ba:	46f2      	mov	sl, lr
 80064bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80064c0:	b293      	uxth	r3, r2
 80064c2:	fb06 e303 	mla	r3, r6, r3, lr
 80064c6:	0c12      	lsrs	r2, r2, #16
 80064c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	fb06 e202 	mla	r2, r6, r2, lr
 80064d2:	ebaa 0303 	sub.w	r3, sl, r3
 80064d6:	f8dc a000 	ldr.w	sl, [ip]
 80064da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064de:	fa1f fa8a 	uxth.w	sl, sl
 80064e2:	4453      	add	r3, sl
 80064e4:	f8dc a000 	ldr.w	sl, [ip]
 80064e8:	b292      	uxth	r2, r2
 80064ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064f8:	4581      	cmp	r9, r0
 80064fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064fe:	f84c 3b04 	str.w	r3, [ip], #4
 8006502:	d2db      	bcs.n	80064bc <quorem+0x44>
 8006504:	f855 300b 	ldr.w	r3, [r5, fp]
 8006508:	b92b      	cbnz	r3, 8006516 <quorem+0x9e>
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	3b04      	subs	r3, #4
 800650e:	429d      	cmp	r5, r3
 8006510:	461a      	mov	r2, r3
 8006512:	d32f      	bcc.n	8006574 <quorem+0xfc>
 8006514:	613c      	str	r4, [r7, #16]
 8006516:	4638      	mov	r0, r7
 8006518:	f001 f8ce 	bl	80076b8 <__mcmp>
 800651c:	2800      	cmp	r0, #0
 800651e:	db25      	blt.n	800656c <quorem+0xf4>
 8006520:	4628      	mov	r0, r5
 8006522:	f04f 0c00 	mov.w	ip, #0
 8006526:	3601      	adds	r6, #1
 8006528:	f858 1b04 	ldr.w	r1, [r8], #4
 800652c:	f8d0 e000 	ldr.w	lr, [r0]
 8006530:	b28b      	uxth	r3, r1
 8006532:	ebac 0303 	sub.w	r3, ip, r3
 8006536:	fa1f f28e 	uxth.w	r2, lr
 800653a:	4413      	add	r3, r2
 800653c:	0c0a      	lsrs	r2, r1, #16
 800653e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006542:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006546:	b29b      	uxth	r3, r3
 8006548:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654c:	45c1      	cmp	r9, r8
 800654e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006552:	f840 3b04 	str.w	r3, [r0], #4
 8006556:	d2e7      	bcs.n	8006528 <quorem+0xb0>
 8006558:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800655c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006560:	b922      	cbnz	r2, 800656c <quorem+0xf4>
 8006562:	3b04      	subs	r3, #4
 8006564:	429d      	cmp	r5, r3
 8006566:	461a      	mov	r2, r3
 8006568:	d30a      	bcc.n	8006580 <quorem+0x108>
 800656a:	613c      	str	r4, [r7, #16]
 800656c:	4630      	mov	r0, r6
 800656e:	b003      	add	sp, #12
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	3b04      	subs	r3, #4
 8006578:	2a00      	cmp	r2, #0
 800657a:	d1cb      	bne.n	8006514 <quorem+0x9c>
 800657c:	3c01      	subs	r4, #1
 800657e:	e7c6      	b.n	800650e <quorem+0x96>
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	3b04      	subs	r3, #4
 8006584:	2a00      	cmp	r2, #0
 8006586:	d1f0      	bne.n	800656a <quorem+0xf2>
 8006588:	3c01      	subs	r4, #1
 800658a:	e7eb      	b.n	8006564 <quorem+0xec>
 800658c:	2000      	movs	r0, #0
 800658e:	e7ee      	b.n	800656e <quorem+0xf6>

08006590 <_dtoa_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	4616      	mov	r6, r2
 8006596:	461f      	mov	r7, r3
 8006598:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800659a:	b099      	sub	sp, #100	; 0x64
 800659c:	4605      	mov	r5, r0
 800659e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80065a6:	b974      	cbnz	r4, 80065c6 <_dtoa_r+0x36>
 80065a8:	2010      	movs	r0, #16
 80065aa:	f000 fde3 	bl	8007174 <malloc>
 80065ae:	4602      	mov	r2, r0
 80065b0:	6268      	str	r0, [r5, #36]	; 0x24
 80065b2:	b920      	cbnz	r0, 80065be <_dtoa_r+0x2e>
 80065b4:	21ea      	movs	r1, #234	; 0xea
 80065b6:	4ba8      	ldr	r3, [pc, #672]	; (8006858 <_dtoa_r+0x2c8>)
 80065b8:	48a8      	ldr	r0, [pc, #672]	; (800685c <_dtoa_r+0x2cc>)
 80065ba:	f001 fbdd 	bl	8007d78 <__assert_func>
 80065be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065c2:	6004      	str	r4, [r0, #0]
 80065c4:	60c4      	str	r4, [r0, #12]
 80065c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065c8:	6819      	ldr	r1, [r3, #0]
 80065ca:	b151      	cbz	r1, 80065e2 <_dtoa_r+0x52>
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	2301      	movs	r3, #1
 80065d0:	4093      	lsls	r3, r2
 80065d2:	604a      	str	r2, [r1, #4]
 80065d4:	608b      	str	r3, [r1, #8]
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 fe30 	bl	800723c <_Bfree>
 80065dc:	2200      	movs	r2, #0
 80065de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	1e3b      	subs	r3, r7, #0
 80065e4:	bfaf      	iteee	ge
 80065e6:	2300      	movge	r3, #0
 80065e8:	2201      	movlt	r2, #1
 80065ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065ee:	9305      	strlt	r3, [sp, #20]
 80065f0:	bfa8      	it	ge
 80065f2:	f8c8 3000 	strge.w	r3, [r8]
 80065f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80065fa:	4b99      	ldr	r3, [pc, #612]	; (8006860 <_dtoa_r+0x2d0>)
 80065fc:	bfb8      	it	lt
 80065fe:	f8c8 2000 	strlt.w	r2, [r8]
 8006602:	ea33 0309 	bics.w	r3, r3, r9
 8006606:	d119      	bne.n	800663c <_dtoa_r+0xac>
 8006608:	f242 730f 	movw	r3, #9999	; 0x270f
 800660c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006614:	4333      	orrs	r3, r6
 8006616:	f000 857f 	beq.w	8007118 <_dtoa_r+0xb88>
 800661a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800661c:	b953      	cbnz	r3, 8006634 <_dtoa_r+0xa4>
 800661e:	4b91      	ldr	r3, [pc, #580]	; (8006864 <_dtoa_r+0x2d4>)
 8006620:	e022      	b.n	8006668 <_dtoa_r+0xd8>
 8006622:	4b91      	ldr	r3, [pc, #580]	; (8006868 <_dtoa_r+0x2d8>)
 8006624:	9303      	str	r3, [sp, #12]
 8006626:	3308      	adds	r3, #8
 8006628:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	9803      	ldr	r0, [sp, #12]
 800662e:	b019      	add	sp, #100	; 0x64
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	4b8b      	ldr	r3, [pc, #556]	; (8006864 <_dtoa_r+0x2d4>)
 8006636:	9303      	str	r3, [sp, #12]
 8006638:	3303      	adds	r3, #3
 800663a:	e7f5      	b.n	8006628 <_dtoa_r+0x98>
 800663c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006640:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006648:	2200      	movs	r2, #0
 800664a:	2300      	movs	r3, #0
 800664c:	f7fa fa18 	bl	8000a80 <__aeabi_dcmpeq>
 8006650:	4680      	mov	r8, r0
 8006652:	b158      	cbz	r0, 800666c <_dtoa_r+0xdc>
 8006654:	2301      	movs	r3, #1
 8006656:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8558 	beq.w	8007112 <_dtoa_r+0xb82>
 8006662:	4882      	ldr	r0, [pc, #520]	; (800686c <_dtoa_r+0x2dc>)
 8006664:	6018      	str	r0, [r3, #0]
 8006666:	1e43      	subs	r3, r0, #1
 8006668:	9303      	str	r3, [sp, #12]
 800666a:	e7df      	b.n	800662c <_dtoa_r+0x9c>
 800666c:	ab16      	add	r3, sp, #88	; 0x58
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	ab17      	add	r3, sp, #92	; 0x5c
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	4628      	mov	r0, r5
 8006676:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800667a:	f001 f8c5 	bl	8007808 <__d2b>
 800667e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006682:	4683      	mov	fp, r0
 8006684:	2c00      	cmp	r4, #0
 8006686:	d07f      	beq.n	8006788 <_dtoa_r+0x1f8>
 8006688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800668c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800668e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006696:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800669a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800669e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80066a2:	2200      	movs	r2, #0
 80066a4:	4b72      	ldr	r3, [pc, #456]	; (8006870 <_dtoa_r+0x2e0>)
 80066a6:	f7f9 fdcb 	bl	8000240 <__aeabi_dsub>
 80066aa:	a365      	add	r3, pc, #404	; (adr r3, 8006840 <_dtoa_r+0x2b0>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f7f9 ff7e 	bl	80005b0 <__aeabi_dmul>
 80066b4:	a364      	add	r3, pc, #400	; (adr r3, 8006848 <_dtoa_r+0x2b8>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 fdc3 	bl	8000244 <__adddf3>
 80066be:	4606      	mov	r6, r0
 80066c0:	4620      	mov	r0, r4
 80066c2:	460f      	mov	r7, r1
 80066c4:	f7f9 ff0a 	bl	80004dc <__aeabi_i2d>
 80066c8:	a361      	add	r3, pc, #388	; (adr r3, 8006850 <_dtoa_r+0x2c0>)
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f7f9 ff6f 	bl	80005b0 <__aeabi_dmul>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	f7f9 fdb3 	bl	8000244 <__adddf3>
 80066de:	4606      	mov	r6, r0
 80066e0:	460f      	mov	r7, r1
 80066e2:	f7fa fa15 	bl	8000b10 <__aeabi_d2iz>
 80066e6:	2200      	movs	r2, #0
 80066e8:	4682      	mov	sl, r0
 80066ea:	2300      	movs	r3, #0
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7fa f9d0 	bl	8000a94 <__aeabi_dcmplt>
 80066f4:	b148      	cbz	r0, 800670a <_dtoa_r+0x17a>
 80066f6:	4650      	mov	r0, sl
 80066f8:	f7f9 fef0 	bl	80004dc <__aeabi_i2d>
 80066fc:	4632      	mov	r2, r6
 80066fe:	463b      	mov	r3, r7
 8006700:	f7fa f9be 	bl	8000a80 <__aeabi_dcmpeq>
 8006704:	b908      	cbnz	r0, 800670a <_dtoa_r+0x17a>
 8006706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800670a:	f1ba 0f16 	cmp.w	sl, #22
 800670e:	d858      	bhi.n	80067c2 <_dtoa_r+0x232>
 8006710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006714:	4b57      	ldr	r3, [pc, #348]	; (8006874 <_dtoa_r+0x2e4>)
 8006716:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f7fa f9b9 	bl	8000a94 <__aeabi_dcmplt>
 8006722:	2800      	cmp	r0, #0
 8006724:	d04f      	beq.n	80067c6 <_dtoa_r+0x236>
 8006726:	2300      	movs	r3, #0
 8006728:	f10a 3aff 	add.w	sl, sl, #4294967295
 800672c:	930f      	str	r3, [sp, #60]	; 0x3c
 800672e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006730:	1b1c      	subs	r4, r3, r4
 8006732:	1e63      	subs	r3, r4, #1
 8006734:	9309      	str	r3, [sp, #36]	; 0x24
 8006736:	bf49      	itett	mi
 8006738:	f1c4 0301 	rsbmi	r3, r4, #1
 800673c:	2300      	movpl	r3, #0
 800673e:	9306      	strmi	r3, [sp, #24]
 8006740:	2300      	movmi	r3, #0
 8006742:	bf54      	ite	pl
 8006744:	9306      	strpl	r3, [sp, #24]
 8006746:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006748:	f1ba 0f00 	cmp.w	sl, #0
 800674c:	db3d      	blt.n	80067ca <_dtoa_r+0x23a>
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006754:	4453      	add	r3, sl
 8006756:	9309      	str	r3, [sp, #36]	; 0x24
 8006758:	2300      	movs	r3, #0
 800675a:	930a      	str	r3, [sp, #40]	; 0x28
 800675c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800675e:	2b09      	cmp	r3, #9
 8006760:	f200 808c 	bhi.w	800687c <_dtoa_r+0x2ec>
 8006764:	2b05      	cmp	r3, #5
 8006766:	bfc4      	itt	gt
 8006768:	3b04      	subgt	r3, #4
 800676a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800676c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800676e:	bfc8      	it	gt
 8006770:	2400      	movgt	r4, #0
 8006772:	f1a3 0302 	sub.w	r3, r3, #2
 8006776:	bfd8      	it	le
 8006778:	2401      	movle	r4, #1
 800677a:	2b03      	cmp	r3, #3
 800677c:	f200 808a 	bhi.w	8006894 <_dtoa_r+0x304>
 8006780:	e8df f003 	tbb	[pc, r3]
 8006784:	5b4d4f2d 	.word	0x5b4d4f2d
 8006788:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800678c:	441c      	add	r4, r3
 800678e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006792:	2b20      	cmp	r3, #32
 8006794:	bfc3      	ittte	gt
 8006796:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800679a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800679e:	fa09 f303 	lslgt.w	r3, r9, r3
 80067a2:	f1c3 0320 	rsble	r3, r3, #32
 80067a6:	bfc6      	itte	gt
 80067a8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067ac:	4318      	orrgt	r0, r3
 80067ae:	fa06 f003 	lslle.w	r0, r6, r3
 80067b2:	f7f9 fe83 	bl	80004bc <__aeabi_ui2d>
 80067b6:	2301      	movs	r3, #1
 80067b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80067bc:	3c01      	subs	r4, #1
 80067be:	9313      	str	r3, [sp, #76]	; 0x4c
 80067c0:	e76f      	b.n	80066a2 <_dtoa_r+0x112>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e7b2      	b.n	800672c <_dtoa_r+0x19c>
 80067c6:	900f      	str	r0, [sp, #60]	; 0x3c
 80067c8:	e7b1      	b.n	800672e <_dtoa_r+0x19e>
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	eba3 030a 	sub.w	r3, r3, sl
 80067d0:	9306      	str	r3, [sp, #24]
 80067d2:	f1ca 0300 	rsb	r3, sl, #0
 80067d6:	930a      	str	r3, [sp, #40]	; 0x28
 80067d8:	2300      	movs	r3, #0
 80067da:	930e      	str	r3, [sp, #56]	; 0x38
 80067dc:	e7be      	b.n	800675c <_dtoa_r+0x1cc>
 80067de:	2300      	movs	r3, #0
 80067e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dc58      	bgt.n	800689a <_dtoa_r+0x30a>
 80067e8:	f04f 0901 	mov.w	r9, #1
 80067ec:	464b      	mov	r3, r9
 80067ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80067f2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80067f6:	2200      	movs	r2, #0
 80067f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80067fa:	6042      	str	r2, [r0, #4]
 80067fc:	2204      	movs	r2, #4
 80067fe:	f102 0614 	add.w	r6, r2, #20
 8006802:	429e      	cmp	r6, r3
 8006804:	6841      	ldr	r1, [r0, #4]
 8006806:	d94e      	bls.n	80068a6 <_dtoa_r+0x316>
 8006808:	4628      	mov	r0, r5
 800680a:	f000 fcd7 	bl	80071bc <_Balloc>
 800680e:	9003      	str	r0, [sp, #12]
 8006810:	2800      	cmp	r0, #0
 8006812:	d14c      	bne.n	80068ae <_dtoa_r+0x31e>
 8006814:	4602      	mov	r2, r0
 8006816:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800681a:	4b17      	ldr	r3, [pc, #92]	; (8006878 <_dtoa_r+0x2e8>)
 800681c:	e6cc      	b.n	80065b8 <_dtoa_r+0x28>
 800681e:	2301      	movs	r3, #1
 8006820:	e7de      	b.n	80067e0 <_dtoa_r+0x250>
 8006822:	2300      	movs	r3, #0
 8006824:	930b      	str	r3, [sp, #44]	; 0x2c
 8006826:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006828:	eb0a 0903 	add.w	r9, sl, r3
 800682c:	f109 0301 	add.w	r3, r9, #1
 8006830:	2b01      	cmp	r3, #1
 8006832:	9308      	str	r3, [sp, #32]
 8006834:	bfb8      	it	lt
 8006836:	2301      	movlt	r3, #1
 8006838:	e7dd      	b.n	80067f6 <_dtoa_r+0x266>
 800683a:	2301      	movs	r3, #1
 800683c:	e7f2      	b.n	8006824 <_dtoa_r+0x294>
 800683e:	bf00      	nop
 8006840:	636f4361 	.word	0x636f4361
 8006844:	3fd287a7 	.word	0x3fd287a7
 8006848:	8b60c8b3 	.word	0x8b60c8b3
 800684c:	3fc68a28 	.word	0x3fc68a28
 8006850:	509f79fb 	.word	0x509f79fb
 8006854:	3fd34413 	.word	0x3fd34413
 8006858:	08009069 	.word	0x08009069
 800685c:	08009080 	.word	0x08009080
 8006860:	7ff00000 	.word	0x7ff00000
 8006864:	08009065 	.word	0x08009065
 8006868:	0800905c 	.word	0x0800905c
 800686c:	08009039 	.word	0x08009039
 8006870:	3ff80000 	.word	0x3ff80000
 8006874:	08009170 	.word	0x08009170
 8006878:	080090db 	.word	0x080090db
 800687c:	2401      	movs	r4, #1
 800687e:	2300      	movs	r3, #0
 8006880:	940b      	str	r4, [sp, #44]	; 0x2c
 8006882:	9322      	str	r3, [sp, #136]	; 0x88
 8006884:	f04f 39ff 	mov.w	r9, #4294967295
 8006888:	2200      	movs	r2, #0
 800688a:	2312      	movs	r3, #18
 800688c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006890:	9223      	str	r2, [sp, #140]	; 0x8c
 8006892:	e7b0      	b.n	80067f6 <_dtoa_r+0x266>
 8006894:	2301      	movs	r3, #1
 8006896:	930b      	str	r3, [sp, #44]	; 0x2c
 8006898:	e7f4      	b.n	8006884 <_dtoa_r+0x2f4>
 800689a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800689e:	464b      	mov	r3, r9
 80068a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80068a4:	e7a7      	b.n	80067f6 <_dtoa_r+0x266>
 80068a6:	3101      	adds	r1, #1
 80068a8:	6041      	str	r1, [r0, #4]
 80068aa:	0052      	lsls	r2, r2, #1
 80068ac:	e7a7      	b.n	80067fe <_dtoa_r+0x26e>
 80068ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068b0:	9a03      	ldr	r2, [sp, #12]
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	9b08      	ldr	r3, [sp, #32]
 80068b6:	2b0e      	cmp	r3, #14
 80068b8:	f200 80a8 	bhi.w	8006a0c <_dtoa_r+0x47c>
 80068bc:	2c00      	cmp	r4, #0
 80068be:	f000 80a5 	beq.w	8006a0c <_dtoa_r+0x47c>
 80068c2:	f1ba 0f00 	cmp.w	sl, #0
 80068c6:	dd34      	ble.n	8006932 <_dtoa_r+0x3a2>
 80068c8:	4a9a      	ldr	r2, [pc, #616]	; (8006b34 <_dtoa_r+0x5a4>)
 80068ca:	f00a 030f 	and.w	r3, sl, #15
 80068ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80068d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80068e2:	d016      	beq.n	8006912 <_dtoa_r+0x382>
 80068e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068e8:	4b93      	ldr	r3, [pc, #588]	; (8006b38 <_dtoa_r+0x5a8>)
 80068ea:	2703      	movs	r7, #3
 80068ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068f0:	f7f9 ff88 	bl	8000804 <__aeabi_ddiv>
 80068f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068f8:	f004 040f 	and.w	r4, r4, #15
 80068fc:	4e8e      	ldr	r6, [pc, #568]	; (8006b38 <_dtoa_r+0x5a8>)
 80068fe:	b954      	cbnz	r4, 8006916 <_dtoa_r+0x386>
 8006900:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006908:	f7f9 ff7c 	bl	8000804 <__aeabi_ddiv>
 800690c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006910:	e029      	b.n	8006966 <_dtoa_r+0x3d6>
 8006912:	2702      	movs	r7, #2
 8006914:	e7f2      	b.n	80068fc <_dtoa_r+0x36c>
 8006916:	07e1      	lsls	r1, r4, #31
 8006918:	d508      	bpl.n	800692c <_dtoa_r+0x39c>
 800691a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800691e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006922:	f7f9 fe45 	bl	80005b0 <__aeabi_dmul>
 8006926:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800692a:	3701      	adds	r7, #1
 800692c:	1064      	asrs	r4, r4, #1
 800692e:	3608      	adds	r6, #8
 8006930:	e7e5      	b.n	80068fe <_dtoa_r+0x36e>
 8006932:	f000 80a5 	beq.w	8006a80 <_dtoa_r+0x4f0>
 8006936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800693a:	f1ca 0400 	rsb	r4, sl, #0
 800693e:	4b7d      	ldr	r3, [pc, #500]	; (8006b34 <_dtoa_r+0x5a4>)
 8006940:	f004 020f 	and.w	r2, r4, #15
 8006944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f7f9 fe30 	bl	80005b0 <__aeabi_dmul>
 8006950:	2702      	movs	r7, #2
 8006952:	2300      	movs	r3, #0
 8006954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006958:	4e77      	ldr	r6, [pc, #476]	; (8006b38 <_dtoa_r+0x5a8>)
 800695a:	1124      	asrs	r4, r4, #4
 800695c:	2c00      	cmp	r4, #0
 800695e:	f040 8084 	bne.w	8006a6a <_dtoa_r+0x4da>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1d2      	bne.n	800690c <_dtoa_r+0x37c>
 8006966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 808b 	beq.w	8006a84 <_dtoa_r+0x4f4>
 800696e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006972:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006976:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800697a:	2200      	movs	r2, #0
 800697c:	4b6f      	ldr	r3, [pc, #444]	; (8006b3c <_dtoa_r+0x5ac>)
 800697e:	f7fa f889 	bl	8000a94 <__aeabi_dcmplt>
 8006982:	2800      	cmp	r0, #0
 8006984:	d07e      	beq.n	8006a84 <_dtoa_r+0x4f4>
 8006986:	9b08      	ldr	r3, [sp, #32]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d07b      	beq.n	8006a84 <_dtoa_r+0x4f4>
 800698c:	f1b9 0f00 	cmp.w	r9, #0
 8006990:	dd38      	ble.n	8006a04 <_dtoa_r+0x474>
 8006992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006996:	2200      	movs	r2, #0
 8006998:	4b69      	ldr	r3, [pc, #420]	; (8006b40 <_dtoa_r+0x5b0>)
 800699a:	f7f9 fe09 	bl	80005b0 <__aeabi_dmul>
 800699e:	464c      	mov	r4, r9
 80069a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80069a8:	3701      	adds	r7, #1
 80069aa:	4638      	mov	r0, r7
 80069ac:	f7f9 fd96 	bl	80004dc <__aeabi_i2d>
 80069b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b4:	f7f9 fdfc 	bl	80005b0 <__aeabi_dmul>
 80069b8:	2200      	movs	r2, #0
 80069ba:	4b62      	ldr	r3, [pc, #392]	; (8006b44 <_dtoa_r+0x5b4>)
 80069bc:	f7f9 fc42 	bl	8000244 <__adddf3>
 80069c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80069c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069c8:	9611      	str	r6, [sp, #68]	; 0x44
 80069ca:	2c00      	cmp	r4, #0
 80069cc:	d15d      	bne.n	8006a8a <_dtoa_r+0x4fa>
 80069ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069d2:	2200      	movs	r2, #0
 80069d4:	4b5c      	ldr	r3, [pc, #368]	; (8006b48 <_dtoa_r+0x5b8>)
 80069d6:	f7f9 fc33 	bl	8000240 <__aeabi_dsub>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069e2:	4633      	mov	r3, r6
 80069e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069e6:	f7fa f873 	bl	8000ad0 <__aeabi_dcmpgt>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	f040 829c 	bne.w	8006f28 <_dtoa_r+0x998>
 80069f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80069fa:	f7fa f84b 	bl	8000a94 <__aeabi_dcmplt>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	f040 8290 	bne.w	8006f24 <_dtoa_r+0x994>
 8006a04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f2c0 8152 	blt.w	8006cb8 <_dtoa_r+0x728>
 8006a14:	f1ba 0f0e 	cmp.w	sl, #14
 8006a18:	f300 814e 	bgt.w	8006cb8 <_dtoa_r+0x728>
 8006a1c:	4b45      	ldr	r3, [pc, #276]	; (8006b34 <_dtoa_r+0x5a4>)
 8006a1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f280 80db 	bge.w	8006be8 <_dtoa_r+0x658>
 8006a32:	9b08      	ldr	r3, [sp, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f300 80d7 	bgt.w	8006be8 <_dtoa_r+0x658>
 8006a3a:	f040 8272 	bne.w	8006f22 <_dtoa_r+0x992>
 8006a3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a42:	2200      	movs	r2, #0
 8006a44:	4b40      	ldr	r3, [pc, #256]	; (8006b48 <_dtoa_r+0x5b8>)
 8006a46:	f7f9 fdb3 	bl	80005b0 <__aeabi_dmul>
 8006a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a4e:	f7fa f835 	bl	8000abc <__aeabi_dcmpge>
 8006a52:	9c08      	ldr	r4, [sp, #32]
 8006a54:	4626      	mov	r6, r4
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f040 8248 	bne.w	8006eec <_dtoa_r+0x95c>
 8006a5c:	2331      	movs	r3, #49	; 0x31
 8006a5e:	9f03      	ldr	r7, [sp, #12]
 8006a60:	f10a 0a01 	add.w	sl, sl, #1
 8006a64:	f807 3b01 	strb.w	r3, [r7], #1
 8006a68:	e244      	b.n	8006ef4 <_dtoa_r+0x964>
 8006a6a:	07e2      	lsls	r2, r4, #31
 8006a6c:	d505      	bpl.n	8006a7a <_dtoa_r+0x4ea>
 8006a6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a72:	f7f9 fd9d 	bl	80005b0 <__aeabi_dmul>
 8006a76:	2301      	movs	r3, #1
 8006a78:	3701      	adds	r7, #1
 8006a7a:	1064      	asrs	r4, r4, #1
 8006a7c:	3608      	adds	r6, #8
 8006a7e:	e76d      	b.n	800695c <_dtoa_r+0x3cc>
 8006a80:	2702      	movs	r7, #2
 8006a82:	e770      	b.n	8006966 <_dtoa_r+0x3d6>
 8006a84:	46d0      	mov	r8, sl
 8006a86:	9c08      	ldr	r4, [sp, #32]
 8006a88:	e78f      	b.n	80069aa <_dtoa_r+0x41a>
 8006a8a:	9903      	ldr	r1, [sp, #12]
 8006a8c:	4b29      	ldr	r3, [pc, #164]	; (8006b34 <_dtoa_r+0x5a4>)
 8006a8e:	4421      	add	r1, r4
 8006a90:	9112      	str	r1, [sp, #72]	; 0x48
 8006a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	d055      	beq.n	8006b50 <_dtoa_r+0x5c0>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	4929      	ldr	r1, [pc, #164]	; (8006b4c <_dtoa_r+0x5bc>)
 8006aa8:	f7f9 feac 	bl	8000804 <__aeabi_ddiv>
 8006aac:	463b      	mov	r3, r7
 8006aae:	4632      	mov	r2, r6
 8006ab0:	f7f9 fbc6 	bl	8000240 <__aeabi_dsub>
 8006ab4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ab8:	9f03      	ldr	r7, [sp, #12]
 8006aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006abe:	f7fa f827 	bl	8000b10 <__aeabi_d2iz>
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	f7f9 fd0a 	bl	80004dc <__aeabi_i2d>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ad0:	f7f9 fbb6 	bl	8000240 <__aeabi_dsub>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	3430      	adds	r4, #48	; 0x30
 8006ada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ae2:	f807 4b01 	strb.w	r4, [r7], #1
 8006ae6:	f7f9 ffd5 	bl	8000a94 <__aeabi_dcmplt>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d174      	bne.n	8006bd8 <_dtoa_r+0x648>
 8006aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006af2:	2000      	movs	r0, #0
 8006af4:	4911      	ldr	r1, [pc, #68]	; (8006b3c <_dtoa_r+0x5ac>)
 8006af6:	f7f9 fba3 	bl	8000240 <__aeabi_dsub>
 8006afa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006afe:	f7f9 ffc9 	bl	8000a94 <__aeabi_dcmplt>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	f040 80b7 	bne.w	8006c76 <_dtoa_r+0x6e6>
 8006b08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b0a:	429f      	cmp	r7, r3
 8006b0c:	f43f af7a 	beq.w	8006a04 <_dtoa_r+0x474>
 8006b10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b14:	2200      	movs	r2, #0
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <_dtoa_r+0x5b0>)
 8006b18:	f7f9 fd4a 	bl	80005b0 <__aeabi_dmul>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b26:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <_dtoa_r+0x5b0>)
 8006b28:	f7f9 fd42 	bl	80005b0 <__aeabi_dmul>
 8006b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b30:	e7c3      	b.n	8006aba <_dtoa_r+0x52a>
 8006b32:	bf00      	nop
 8006b34:	08009170 	.word	0x08009170
 8006b38:	08009148 	.word	0x08009148
 8006b3c:	3ff00000 	.word	0x3ff00000
 8006b40:	40240000 	.word	0x40240000
 8006b44:	401c0000 	.word	0x401c0000
 8006b48:	40140000 	.word	0x40140000
 8006b4c:	3fe00000 	.word	0x3fe00000
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 fd2c 	bl	80005b0 <__aeabi_dmul>
 8006b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b5e:	9c03      	ldr	r4, [sp, #12]
 8006b60:	9314      	str	r3, [sp, #80]	; 0x50
 8006b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b66:	f7f9 ffd3 	bl	8000b10 <__aeabi_d2iz>
 8006b6a:	9015      	str	r0, [sp, #84]	; 0x54
 8006b6c:	f7f9 fcb6 	bl	80004dc <__aeabi_i2d>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b78:	f7f9 fb62 	bl	8000240 <__aeabi_dsub>
 8006b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b7e:	4606      	mov	r6, r0
 8006b80:	3330      	adds	r3, #48	; 0x30
 8006b82:	f804 3b01 	strb.w	r3, [r4], #1
 8006b86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b88:	460f      	mov	r7, r1
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	d124      	bne.n	8006bdc <_dtoa_r+0x64c>
 8006b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b96:	4bb0      	ldr	r3, [pc, #704]	; (8006e58 <_dtoa_r+0x8c8>)
 8006b98:	f7f9 fb54 	bl	8000244 <__adddf3>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 ff94 	bl	8000ad0 <__aeabi_dcmpgt>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d163      	bne.n	8006c74 <_dtoa_r+0x6e4>
 8006bac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	49a9      	ldr	r1, [pc, #676]	; (8006e58 <_dtoa_r+0x8c8>)
 8006bb4:	f7f9 fb44 	bl	8000240 <__aeabi_dsub>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f7f9 ff68 	bl	8000a94 <__aeabi_dcmplt>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f43f af1d 	beq.w	8006a04 <_dtoa_r+0x474>
 8006bca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006bcc:	1e7b      	subs	r3, r7, #1
 8006bce:	9314      	str	r3, [sp, #80]	; 0x50
 8006bd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006bd4:	2b30      	cmp	r3, #48	; 0x30
 8006bd6:	d0f8      	beq.n	8006bca <_dtoa_r+0x63a>
 8006bd8:	46c2      	mov	sl, r8
 8006bda:	e03b      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006bdc:	4b9f      	ldr	r3, [pc, #636]	; (8006e5c <_dtoa_r+0x8cc>)
 8006bde:	f7f9 fce7 	bl	80005b0 <__aeabi_dmul>
 8006be2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006be6:	e7bc      	b.n	8006b62 <_dtoa_r+0x5d2>
 8006be8:	9f03      	ldr	r7, [sp, #12]
 8006bea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7f9 fe05 	bl	8000804 <__aeabi_ddiv>
 8006bfa:	f7f9 ff89 	bl	8000b10 <__aeabi_d2iz>
 8006bfe:	4604      	mov	r4, r0
 8006c00:	f7f9 fc6c 	bl	80004dc <__aeabi_i2d>
 8006c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c08:	f7f9 fcd2 	bl	80005b0 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	f7f9 fb14 	bl	8000240 <__aeabi_dsub>
 8006c18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006c1c:	f807 6b01 	strb.w	r6, [r7], #1
 8006c20:	9e03      	ldr	r6, [sp, #12]
 8006c22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006c26:	1bbe      	subs	r6, r7, r6
 8006c28:	45b4      	cmp	ip, r6
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	d136      	bne.n	8006c9e <_dtoa_r+0x70e>
 8006c30:	f7f9 fb08 	bl	8000244 <__adddf3>
 8006c34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	f7f9 ff48 	bl	8000ad0 <__aeabi_dcmpgt>
 8006c40:	bb58      	cbnz	r0, 8006c9a <_dtoa_r+0x70a>
 8006c42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 ff19 	bl	8000a80 <__aeabi_dcmpeq>
 8006c4e:	b108      	cbz	r0, 8006c54 <_dtoa_r+0x6c4>
 8006c50:	07e1      	lsls	r1, r4, #31
 8006c52:	d422      	bmi.n	8006c9a <_dtoa_r+0x70a>
 8006c54:	4628      	mov	r0, r5
 8006c56:	4659      	mov	r1, fp
 8006c58:	f000 faf0 	bl	800723c <_Bfree>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	703b      	strb	r3, [r7, #0]
 8006c60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c62:	f10a 0001 	add.w	r0, sl, #1
 8006c66:	6018      	str	r0, [r3, #0]
 8006c68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f43f acde 	beq.w	800662c <_dtoa_r+0x9c>
 8006c70:	601f      	str	r7, [r3, #0]
 8006c72:	e4db      	b.n	800662c <_dtoa_r+0x9c>
 8006c74:	4627      	mov	r7, r4
 8006c76:	463b      	mov	r3, r7
 8006c78:	461f      	mov	r7, r3
 8006c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c7e:	2a39      	cmp	r2, #57	; 0x39
 8006c80:	d107      	bne.n	8006c92 <_dtoa_r+0x702>
 8006c82:	9a03      	ldr	r2, [sp, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1f7      	bne.n	8006c78 <_dtoa_r+0x6e8>
 8006c88:	2230      	movs	r2, #48	; 0x30
 8006c8a:	9903      	ldr	r1, [sp, #12]
 8006c8c:	f108 0801 	add.w	r8, r8, #1
 8006c90:	700a      	strb	r2, [r1, #0]
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	3201      	adds	r2, #1
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	e79e      	b.n	8006bd8 <_dtoa_r+0x648>
 8006c9a:	46d0      	mov	r8, sl
 8006c9c:	e7eb      	b.n	8006c76 <_dtoa_r+0x6e6>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4b6e      	ldr	r3, [pc, #440]	; (8006e5c <_dtoa_r+0x8cc>)
 8006ca2:	f7f9 fc85 	bl	80005b0 <__aeabi_dmul>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4680      	mov	r8, r0
 8006cac:	4689      	mov	r9, r1
 8006cae:	f7f9 fee7 	bl	8000a80 <__aeabi_dcmpeq>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d09b      	beq.n	8006bee <_dtoa_r+0x65e>
 8006cb6:	e7cd      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	f000 80d0 	beq.w	8006e60 <_dtoa_r+0x8d0>
 8006cc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cc2:	2a01      	cmp	r2, #1
 8006cc4:	f300 80ae 	bgt.w	8006e24 <_dtoa_r+0x894>
 8006cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	f000 80a6 	beq.w	8006e1c <_dtoa_r+0x88c>
 8006cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cd6:	9f06      	ldr	r7, [sp, #24]
 8006cd8:	9a06      	ldr	r2, [sp, #24]
 8006cda:	2101      	movs	r1, #1
 8006cdc:	441a      	add	r2, r3
 8006cde:	9206      	str	r2, [sp, #24]
 8006ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	441a      	add	r2, r3
 8006ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce8:	f000 fb5e 	bl	80073a8 <__i2b>
 8006cec:	4606      	mov	r6, r0
 8006cee:	2f00      	cmp	r7, #0
 8006cf0:	dd0c      	ble.n	8006d0c <_dtoa_r+0x77c>
 8006cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dd09      	ble.n	8006d0c <_dtoa_r+0x77c>
 8006cf8:	42bb      	cmp	r3, r7
 8006cfa:	bfa8      	it	ge
 8006cfc:	463b      	movge	r3, r7
 8006cfe:	9a06      	ldr	r2, [sp, #24]
 8006d00:	1aff      	subs	r7, r7, r3
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	9206      	str	r2, [sp, #24]
 8006d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d0e:	b1f3      	cbz	r3, 8006d4e <_dtoa_r+0x7be>
 8006d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 80a8 	beq.w	8006e68 <_dtoa_r+0x8d8>
 8006d18:	2c00      	cmp	r4, #0
 8006d1a:	dd10      	ble.n	8006d3e <_dtoa_r+0x7ae>
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4622      	mov	r2, r4
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 fbff 	bl	8007524 <__pow5mult>
 8006d26:	465a      	mov	r2, fp
 8006d28:	4601      	mov	r1, r0
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 fb51 	bl	80073d4 <__multiply>
 8006d32:	4680      	mov	r8, r0
 8006d34:	4659      	mov	r1, fp
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 fa80 	bl	800723c <_Bfree>
 8006d3c:	46c3      	mov	fp, r8
 8006d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d40:	1b1a      	subs	r2, r3, r4
 8006d42:	d004      	beq.n	8006d4e <_dtoa_r+0x7be>
 8006d44:	4659      	mov	r1, fp
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 fbec 	bl	8007524 <__pow5mult>
 8006d4c:	4683      	mov	fp, r0
 8006d4e:	2101      	movs	r1, #1
 8006d50:	4628      	mov	r0, r5
 8006d52:	f000 fb29 	bl	80073a8 <__i2b>
 8006d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d58:	4604      	mov	r4, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f340 8086 	ble.w	8006e6c <_dtoa_r+0x8dc>
 8006d60:	461a      	mov	r2, r3
 8006d62:	4601      	mov	r1, r0
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 fbdd 	bl	8007524 <__pow5mult>
 8006d6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	dd7f      	ble.n	8006e72 <_dtoa_r+0x8e2>
 8006d72:	f04f 0800 	mov.w	r8, #0
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d7c:	6918      	ldr	r0, [r3, #16]
 8006d7e:	f000 fac5 	bl	800730c <__hi0bits>
 8006d82:	f1c0 0020 	rsb	r0, r0, #32
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	4418      	add	r0, r3
 8006d8a:	f010 001f 	ands.w	r0, r0, #31
 8006d8e:	f000 8092 	beq.w	8006eb6 <_dtoa_r+0x926>
 8006d92:	f1c0 0320 	rsb	r3, r0, #32
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	f340 808a 	ble.w	8006eb0 <_dtoa_r+0x920>
 8006d9c:	f1c0 001c 	rsb	r0, r0, #28
 8006da0:	9b06      	ldr	r3, [sp, #24]
 8006da2:	4407      	add	r7, r0
 8006da4:	4403      	add	r3, r0
 8006da6:	9306      	str	r3, [sp, #24]
 8006da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006daa:	4403      	add	r3, r0
 8006dac:	9309      	str	r3, [sp, #36]	; 0x24
 8006dae:	9b06      	ldr	r3, [sp, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	dd05      	ble.n	8006dc0 <_dtoa_r+0x830>
 8006db4:	4659      	mov	r1, fp
 8006db6:	461a      	mov	r2, r3
 8006db8:	4628      	mov	r0, r5
 8006dba:	f000 fc0d 	bl	80075d8 <__lshift>
 8006dbe:	4683      	mov	fp, r0
 8006dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dd05      	ble.n	8006dd2 <_dtoa_r+0x842>
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f000 fc04 	bl	80075d8 <__lshift>
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d070      	beq.n	8006eba <_dtoa_r+0x92a>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fc6c 	bl	80076b8 <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	da6a      	bge.n	8006eba <_dtoa_r+0x92a>
 8006de4:	2300      	movs	r3, #0
 8006de6:	4659      	mov	r1, fp
 8006de8:	220a      	movs	r2, #10
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 fa48 	bl	8007280 <__multadd>
 8006df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df2:	4683      	mov	fp, r0
 8006df4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8194 	beq.w	8007126 <_dtoa_r+0xb96>
 8006dfe:	4631      	mov	r1, r6
 8006e00:	2300      	movs	r3, #0
 8006e02:	220a      	movs	r2, #10
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 fa3b 	bl	8007280 <__multadd>
 8006e0a:	f1b9 0f00 	cmp.w	r9, #0
 8006e0e:	4606      	mov	r6, r0
 8006e10:	f300 8093 	bgt.w	8006f3a <_dtoa_r+0x9aa>
 8006e14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	dc57      	bgt.n	8006eca <_dtoa_r+0x93a>
 8006e1a:	e08e      	b.n	8006f3a <_dtoa_r+0x9aa>
 8006e1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e22:	e757      	b.n	8006cd4 <_dtoa_r+0x744>
 8006e24:	9b08      	ldr	r3, [sp, #32]
 8006e26:	1e5c      	subs	r4, r3, #1
 8006e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2a:	42a3      	cmp	r3, r4
 8006e2c:	bfb7      	itett	lt
 8006e2e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e30:	1b1c      	subge	r4, r3, r4
 8006e32:	1ae2      	sublt	r2, r4, r3
 8006e34:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006e36:	bfbe      	ittt	lt
 8006e38:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e3a:	189b      	addlt	r3, r3, r2
 8006e3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006e3e:	9b08      	ldr	r3, [sp, #32]
 8006e40:	bfb8      	it	lt
 8006e42:	2400      	movlt	r4, #0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bfbb      	ittet	lt
 8006e48:	9b06      	ldrlt	r3, [sp, #24]
 8006e4a:	9a08      	ldrlt	r2, [sp, #32]
 8006e4c:	9f06      	ldrge	r7, [sp, #24]
 8006e4e:	1a9f      	sublt	r7, r3, r2
 8006e50:	bfac      	ite	ge
 8006e52:	9b08      	ldrge	r3, [sp, #32]
 8006e54:	2300      	movlt	r3, #0
 8006e56:	e73f      	b.n	8006cd8 <_dtoa_r+0x748>
 8006e58:	3fe00000 	.word	0x3fe00000
 8006e5c:	40240000 	.word	0x40240000
 8006e60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e62:	9f06      	ldr	r7, [sp, #24]
 8006e64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e66:	e742      	b.n	8006cee <_dtoa_r+0x75e>
 8006e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6a:	e76b      	b.n	8006d44 <_dtoa_r+0x7b4>
 8006e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	dc19      	bgt.n	8006ea6 <_dtoa_r+0x916>
 8006e72:	9b04      	ldr	r3, [sp, #16]
 8006e74:	b9bb      	cbnz	r3, 8006ea6 <_dtoa_r+0x916>
 8006e76:	9b05      	ldr	r3, [sp, #20]
 8006e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e7c:	b99b      	cbnz	r3, 8006ea6 <_dtoa_r+0x916>
 8006e7e:	9b05      	ldr	r3, [sp, #20]
 8006e80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	0d1b      	lsrs	r3, r3, #20
 8006e86:	051b      	lsls	r3, r3, #20
 8006e88:	b183      	cbz	r3, 8006eac <_dtoa_r+0x91c>
 8006e8a:	f04f 0801 	mov.w	r8, #1
 8006e8e:	9b06      	ldr	r3, [sp, #24]
 8006e90:	3301      	adds	r3, #1
 8006e92:	9306      	str	r3, [sp, #24]
 8006e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e96:	3301      	adds	r3, #1
 8006e98:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f47f af6a 	bne.w	8006d76 <_dtoa_r+0x7e6>
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	e76f      	b.n	8006d86 <_dtoa_r+0x7f6>
 8006ea6:	f04f 0800 	mov.w	r8, #0
 8006eaa:	e7f6      	b.n	8006e9a <_dtoa_r+0x90a>
 8006eac:	4698      	mov	r8, r3
 8006eae:	e7f4      	b.n	8006e9a <_dtoa_r+0x90a>
 8006eb0:	f43f af7d 	beq.w	8006dae <_dtoa_r+0x81e>
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	301c      	adds	r0, #28
 8006eb8:	e772      	b.n	8006da0 <_dtoa_r+0x810>
 8006eba:	9b08      	ldr	r3, [sp, #32]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dc36      	bgt.n	8006f2e <_dtoa_r+0x99e>
 8006ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	dd33      	ble.n	8006f2e <_dtoa_r+0x99e>
 8006ec6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eca:	f1b9 0f00 	cmp.w	r9, #0
 8006ece:	d10d      	bne.n	8006eec <_dtoa_r+0x95c>
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	2205      	movs	r2, #5
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 f9d2 	bl	8007280 <__multadd>
 8006edc:	4601      	mov	r1, r0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4658      	mov	r0, fp
 8006ee2:	f000 fbe9 	bl	80076b8 <__mcmp>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f73f adb8 	bgt.w	8006a5c <_dtoa_r+0x4cc>
 8006eec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006eee:	9f03      	ldr	r7, [sp, #12]
 8006ef0:	ea6f 0a03 	mvn.w	sl, r3
 8006ef4:	f04f 0800 	mov.w	r8, #0
 8006ef8:	4621      	mov	r1, r4
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 f99e 	bl	800723c <_Bfree>
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	f43f aea7 	beq.w	8006c54 <_dtoa_r+0x6c4>
 8006f06:	f1b8 0f00 	cmp.w	r8, #0
 8006f0a:	d005      	beq.n	8006f18 <_dtoa_r+0x988>
 8006f0c:	45b0      	cmp	r8, r6
 8006f0e:	d003      	beq.n	8006f18 <_dtoa_r+0x988>
 8006f10:	4641      	mov	r1, r8
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f992 	bl	800723c <_Bfree>
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 f98e 	bl	800723c <_Bfree>
 8006f20:	e698      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006f22:	2400      	movs	r4, #0
 8006f24:	4626      	mov	r6, r4
 8006f26:	e7e1      	b.n	8006eec <_dtoa_r+0x95c>
 8006f28:	46c2      	mov	sl, r8
 8006f2a:	4626      	mov	r6, r4
 8006f2c:	e596      	b.n	8006a5c <_dtoa_r+0x4cc>
 8006f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80fd 	beq.w	8007134 <_dtoa_r+0xba4>
 8006f3a:	2f00      	cmp	r7, #0
 8006f3c:	dd05      	ble.n	8006f4a <_dtoa_r+0x9ba>
 8006f3e:	4631      	mov	r1, r6
 8006f40:	463a      	mov	r2, r7
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 fb48 	bl	80075d8 <__lshift>
 8006f48:	4606      	mov	r6, r0
 8006f4a:	f1b8 0f00 	cmp.w	r8, #0
 8006f4e:	d05c      	beq.n	800700a <_dtoa_r+0xa7a>
 8006f50:	4628      	mov	r0, r5
 8006f52:	6871      	ldr	r1, [r6, #4]
 8006f54:	f000 f932 	bl	80071bc <_Balloc>
 8006f58:	4607      	mov	r7, r0
 8006f5a:	b928      	cbnz	r0, 8006f68 <_dtoa_r+0x9d8>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f62:	4b7f      	ldr	r3, [pc, #508]	; (8007160 <_dtoa_r+0xbd0>)
 8006f64:	f7ff bb28 	b.w	80065b8 <_dtoa_r+0x28>
 8006f68:	6932      	ldr	r2, [r6, #16]
 8006f6a:	f106 010c 	add.w	r1, r6, #12
 8006f6e:	3202      	adds	r2, #2
 8006f70:	0092      	lsls	r2, r2, #2
 8006f72:	300c      	adds	r0, #12
 8006f74:	f000 f914 	bl	80071a0 <memcpy>
 8006f78:	2201      	movs	r2, #1
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f000 fb2b 	bl	80075d8 <__lshift>
 8006f82:	46b0      	mov	r8, r6
 8006f84:	4606      	mov	r6, r0
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	444b      	add	r3, r9
 8006f90:	930a      	str	r3, [sp, #40]	; 0x28
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	4658      	mov	r0, fp
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	f7ff fa68 	bl	8006478 <quorem>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	4641      	mov	r1, r8
 8006fac:	3330      	adds	r3, #48	; 0x30
 8006fae:	9006      	str	r0, [sp, #24]
 8006fb0:	4658      	mov	r0, fp
 8006fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fb4:	f000 fb80 	bl	80076b8 <__mcmp>
 8006fb8:	4632      	mov	r2, r6
 8006fba:	4681      	mov	r9, r0
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 fb96 	bl	80076f0 <__mdiff>
 8006fc4:	68c2      	ldr	r2, [r0, #12]
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fca:	bb02      	cbnz	r2, 800700e <_dtoa_r+0xa7e>
 8006fcc:	4601      	mov	r1, r0
 8006fce:	4658      	mov	r0, fp
 8006fd0:	f000 fb72 	bl	80076b8 <__mcmp>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd8:	4639      	mov	r1, r7
 8006fda:	4628      	mov	r0, r5
 8006fdc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006fe0:	f000 f92c 	bl	800723c <_Bfree>
 8006fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fe8:	9f08      	ldr	r7, [sp, #32]
 8006fea:	ea43 0102 	orr.w	r1, r3, r2
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff4:	d10d      	bne.n	8007012 <_dtoa_r+0xa82>
 8006ff6:	2b39      	cmp	r3, #57	; 0x39
 8006ff8:	d029      	beq.n	800704e <_dtoa_r+0xabe>
 8006ffa:	f1b9 0f00 	cmp.w	r9, #0
 8006ffe:	dd01      	ble.n	8007004 <_dtoa_r+0xa74>
 8007000:	9b06      	ldr	r3, [sp, #24]
 8007002:	3331      	adds	r3, #49	; 0x31
 8007004:	9a04      	ldr	r2, [sp, #16]
 8007006:	7013      	strb	r3, [r2, #0]
 8007008:	e776      	b.n	8006ef8 <_dtoa_r+0x968>
 800700a:	4630      	mov	r0, r6
 800700c:	e7b9      	b.n	8006f82 <_dtoa_r+0x9f2>
 800700e:	2201      	movs	r2, #1
 8007010:	e7e2      	b.n	8006fd8 <_dtoa_r+0xa48>
 8007012:	f1b9 0f00 	cmp.w	r9, #0
 8007016:	db06      	blt.n	8007026 <_dtoa_r+0xa96>
 8007018:	9922      	ldr	r1, [sp, #136]	; 0x88
 800701a:	ea41 0909 	orr.w	r9, r1, r9
 800701e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007020:	ea59 0101 	orrs.w	r1, r9, r1
 8007024:	d120      	bne.n	8007068 <_dtoa_r+0xad8>
 8007026:	2a00      	cmp	r2, #0
 8007028:	ddec      	ble.n	8007004 <_dtoa_r+0xa74>
 800702a:	4659      	mov	r1, fp
 800702c:	2201      	movs	r2, #1
 800702e:	4628      	mov	r0, r5
 8007030:	9308      	str	r3, [sp, #32]
 8007032:	f000 fad1 	bl	80075d8 <__lshift>
 8007036:	4621      	mov	r1, r4
 8007038:	4683      	mov	fp, r0
 800703a:	f000 fb3d 	bl	80076b8 <__mcmp>
 800703e:	2800      	cmp	r0, #0
 8007040:	9b08      	ldr	r3, [sp, #32]
 8007042:	dc02      	bgt.n	800704a <_dtoa_r+0xaba>
 8007044:	d1de      	bne.n	8007004 <_dtoa_r+0xa74>
 8007046:	07da      	lsls	r2, r3, #31
 8007048:	d5dc      	bpl.n	8007004 <_dtoa_r+0xa74>
 800704a:	2b39      	cmp	r3, #57	; 0x39
 800704c:	d1d8      	bne.n	8007000 <_dtoa_r+0xa70>
 800704e:	2339      	movs	r3, #57	; 0x39
 8007050:	9a04      	ldr	r2, [sp, #16]
 8007052:	7013      	strb	r3, [r2, #0]
 8007054:	463b      	mov	r3, r7
 8007056:	461f      	mov	r7, r3
 8007058:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800705c:	3b01      	subs	r3, #1
 800705e:	2a39      	cmp	r2, #57	; 0x39
 8007060:	d050      	beq.n	8007104 <_dtoa_r+0xb74>
 8007062:	3201      	adds	r2, #1
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	e747      	b.n	8006ef8 <_dtoa_r+0x968>
 8007068:	2a00      	cmp	r2, #0
 800706a:	dd03      	ble.n	8007074 <_dtoa_r+0xae4>
 800706c:	2b39      	cmp	r3, #57	; 0x39
 800706e:	d0ee      	beq.n	800704e <_dtoa_r+0xabe>
 8007070:	3301      	adds	r3, #1
 8007072:	e7c7      	b.n	8007004 <_dtoa_r+0xa74>
 8007074:	9a08      	ldr	r2, [sp, #32]
 8007076:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007078:	f802 3c01 	strb.w	r3, [r2, #-1]
 800707c:	428a      	cmp	r2, r1
 800707e:	d02a      	beq.n	80070d6 <_dtoa_r+0xb46>
 8007080:	4659      	mov	r1, fp
 8007082:	2300      	movs	r3, #0
 8007084:	220a      	movs	r2, #10
 8007086:	4628      	mov	r0, r5
 8007088:	f000 f8fa 	bl	8007280 <__multadd>
 800708c:	45b0      	cmp	r8, r6
 800708e:	4683      	mov	fp, r0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	f04f 020a 	mov.w	r2, #10
 8007098:	4641      	mov	r1, r8
 800709a:	4628      	mov	r0, r5
 800709c:	d107      	bne.n	80070ae <_dtoa_r+0xb1e>
 800709e:	f000 f8ef 	bl	8007280 <__multadd>
 80070a2:	4680      	mov	r8, r0
 80070a4:	4606      	mov	r6, r0
 80070a6:	9b08      	ldr	r3, [sp, #32]
 80070a8:	3301      	adds	r3, #1
 80070aa:	9308      	str	r3, [sp, #32]
 80070ac:	e775      	b.n	8006f9a <_dtoa_r+0xa0a>
 80070ae:	f000 f8e7 	bl	8007280 <__multadd>
 80070b2:	4631      	mov	r1, r6
 80070b4:	4680      	mov	r8, r0
 80070b6:	2300      	movs	r3, #0
 80070b8:	220a      	movs	r2, #10
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 f8e0 	bl	8007280 <__multadd>
 80070c0:	4606      	mov	r6, r0
 80070c2:	e7f0      	b.n	80070a6 <_dtoa_r+0xb16>
 80070c4:	f1b9 0f00 	cmp.w	r9, #0
 80070c8:	bfcc      	ite	gt
 80070ca:	464f      	movgt	r7, r9
 80070cc:	2701      	movle	r7, #1
 80070ce:	f04f 0800 	mov.w	r8, #0
 80070d2:	9a03      	ldr	r2, [sp, #12]
 80070d4:	4417      	add	r7, r2
 80070d6:	4659      	mov	r1, fp
 80070d8:	2201      	movs	r2, #1
 80070da:	4628      	mov	r0, r5
 80070dc:	9308      	str	r3, [sp, #32]
 80070de:	f000 fa7b 	bl	80075d8 <__lshift>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4683      	mov	fp, r0
 80070e6:	f000 fae7 	bl	80076b8 <__mcmp>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	dcb2      	bgt.n	8007054 <_dtoa_r+0xac4>
 80070ee:	d102      	bne.n	80070f6 <_dtoa_r+0xb66>
 80070f0:	9b08      	ldr	r3, [sp, #32]
 80070f2:	07db      	lsls	r3, r3, #31
 80070f4:	d4ae      	bmi.n	8007054 <_dtoa_r+0xac4>
 80070f6:	463b      	mov	r3, r7
 80070f8:	461f      	mov	r7, r3
 80070fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070fe:	2a30      	cmp	r2, #48	; 0x30
 8007100:	d0fa      	beq.n	80070f8 <_dtoa_r+0xb68>
 8007102:	e6f9      	b.n	8006ef8 <_dtoa_r+0x968>
 8007104:	9a03      	ldr	r2, [sp, #12]
 8007106:	429a      	cmp	r2, r3
 8007108:	d1a5      	bne.n	8007056 <_dtoa_r+0xac6>
 800710a:	2331      	movs	r3, #49	; 0x31
 800710c:	f10a 0a01 	add.w	sl, sl, #1
 8007110:	e779      	b.n	8007006 <_dtoa_r+0xa76>
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <_dtoa_r+0xbd4>)
 8007114:	f7ff baa8 	b.w	8006668 <_dtoa_r+0xd8>
 8007118:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800711a:	2b00      	cmp	r3, #0
 800711c:	f47f aa81 	bne.w	8006622 <_dtoa_r+0x92>
 8007120:	4b11      	ldr	r3, [pc, #68]	; (8007168 <_dtoa_r+0xbd8>)
 8007122:	f7ff baa1 	b.w	8006668 <_dtoa_r+0xd8>
 8007126:	f1b9 0f00 	cmp.w	r9, #0
 800712a:	dc03      	bgt.n	8007134 <_dtoa_r+0xba4>
 800712c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800712e:	2b02      	cmp	r3, #2
 8007130:	f73f aecb 	bgt.w	8006eca <_dtoa_r+0x93a>
 8007134:	9f03      	ldr	r7, [sp, #12]
 8007136:	4621      	mov	r1, r4
 8007138:	4658      	mov	r0, fp
 800713a:	f7ff f99d 	bl	8006478 <quorem>
 800713e:	9a03      	ldr	r2, [sp, #12]
 8007140:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007144:	f807 3b01 	strb.w	r3, [r7], #1
 8007148:	1aba      	subs	r2, r7, r2
 800714a:	4591      	cmp	r9, r2
 800714c:	ddba      	ble.n	80070c4 <_dtoa_r+0xb34>
 800714e:	4659      	mov	r1, fp
 8007150:	2300      	movs	r3, #0
 8007152:	220a      	movs	r2, #10
 8007154:	4628      	mov	r0, r5
 8007156:	f000 f893 	bl	8007280 <__multadd>
 800715a:	4683      	mov	fp, r0
 800715c:	e7eb      	b.n	8007136 <_dtoa_r+0xba6>
 800715e:	bf00      	nop
 8007160:	080090db 	.word	0x080090db
 8007164:	08009038 	.word	0x08009038
 8007168:	0800905c 	.word	0x0800905c

0800716c <_localeconv_r>:
 800716c:	4800      	ldr	r0, [pc, #0]	; (8007170 <_localeconv_r+0x4>)
 800716e:	4770      	bx	lr
 8007170:	20000168 	.word	0x20000168

08007174 <malloc>:
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <malloc+0xc>)
 8007176:	4601      	mov	r1, r0
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f000 bc1d 	b.w	80079b8 <_malloc_r>
 800717e:	bf00      	nop
 8007180:	20000014 	.word	0x20000014

08007184 <memchr>:
 8007184:	4603      	mov	r3, r0
 8007186:	b510      	push	{r4, lr}
 8007188:	b2c9      	uxtb	r1, r1
 800718a:	4402      	add	r2, r0
 800718c:	4293      	cmp	r3, r2
 800718e:	4618      	mov	r0, r3
 8007190:	d101      	bne.n	8007196 <memchr+0x12>
 8007192:	2000      	movs	r0, #0
 8007194:	e003      	b.n	800719e <memchr+0x1a>
 8007196:	7804      	ldrb	r4, [r0, #0]
 8007198:	3301      	adds	r3, #1
 800719a:	428c      	cmp	r4, r1
 800719c:	d1f6      	bne.n	800718c <memchr+0x8>
 800719e:	bd10      	pop	{r4, pc}

080071a0 <memcpy>:
 80071a0:	440a      	add	r2, r1
 80071a2:	4291      	cmp	r1, r2
 80071a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071a8:	d100      	bne.n	80071ac <memcpy+0xc>
 80071aa:	4770      	bx	lr
 80071ac:	b510      	push	{r4, lr}
 80071ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b2:	4291      	cmp	r1, r2
 80071b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b8:	d1f9      	bne.n	80071ae <memcpy+0xe>
 80071ba:	bd10      	pop	{r4, pc}

080071bc <_Balloc>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071c0:	4604      	mov	r4, r0
 80071c2:	460d      	mov	r5, r1
 80071c4:	b976      	cbnz	r6, 80071e4 <_Balloc+0x28>
 80071c6:	2010      	movs	r0, #16
 80071c8:	f7ff ffd4 	bl	8007174 <malloc>
 80071cc:	4602      	mov	r2, r0
 80071ce:	6260      	str	r0, [r4, #36]	; 0x24
 80071d0:	b920      	cbnz	r0, 80071dc <_Balloc+0x20>
 80071d2:	2166      	movs	r1, #102	; 0x66
 80071d4:	4b17      	ldr	r3, [pc, #92]	; (8007234 <_Balloc+0x78>)
 80071d6:	4818      	ldr	r0, [pc, #96]	; (8007238 <_Balloc+0x7c>)
 80071d8:	f000 fdce 	bl	8007d78 <__assert_func>
 80071dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071e0:	6006      	str	r6, [r0, #0]
 80071e2:	60c6      	str	r6, [r0, #12]
 80071e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071e6:	68f3      	ldr	r3, [r6, #12]
 80071e8:	b183      	cbz	r3, 800720c <_Balloc+0x50>
 80071ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071f2:	b9b8      	cbnz	r0, 8007224 <_Balloc+0x68>
 80071f4:	2101      	movs	r1, #1
 80071f6:	fa01 f605 	lsl.w	r6, r1, r5
 80071fa:	1d72      	adds	r2, r6, #5
 80071fc:	4620      	mov	r0, r4
 80071fe:	0092      	lsls	r2, r2, #2
 8007200:	f000 fb5e 	bl	80078c0 <_calloc_r>
 8007204:	b160      	cbz	r0, 8007220 <_Balloc+0x64>
 8007206:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800720a:	e00e      	b.n	800722a <_Balloc+0x6e>
 800720c:	2221      	movs	r2, #33	; 0x21
 800720e:	2104      	movs	r1, #4
 8007210:	4620      	mov	r0, r4
 8007212:	f000 fb55 	bl	80078c0 <_calloc_r>
 8007216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007218:	60f0      	str	r0, [r6, #12]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e4      	bne.n	80071ea <_Balloc+0x2e>
 8007220:	2000      	movs	r0, #0
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	6802      	ldr	r2, [r0, #0]
 8007226:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800722a:	2300      	movs	r3, #0
 800722c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007230:	e7f7      	b.n	8007222 <_Balloc+0x66>
 8007232:	bf00      	nop
 8007234:	08009069 	.word	0x08009069
 8007238:	080090ec 	.word	0x080090ec

0800723c <_Bfree>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007240:	4605      	mov	r5, r0
 8007242:	460c      	mov	r4, r1
 8007244:	b976      	cbnz	r6, 8007264 <_Bfree+0x28>
 8007246:	2010      	movs	r0, #16
 8007248:	f7ff ff94 	bl	8007174 <malloc>
 800724c:	4602      	mov	r2, r0
 800724e:	6268      	str	r0, [r5, #36]	; 0x24
 8007250:	b920      	cbnz	r0, 800725c <_Bfree+0x20>
 8007252:	218a      	movs	r1, #138	; 0x8a
 8007254:	4b08      	ldr	r3, [pc, #32]	; (8007278 <_Bfree+0x3c>)
 8007256:	4809      	ldr	r0, [pc, #36]	; (800727c <_Bfree+0x40>)
 8007258:	f000 fd8e 	bl	8007d78 <__assert_func>
 800725c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007260:	6006      	str	r6, [r0, #0]
 8007262:	60c6      	str	r6, [r0, #12]
 8007264:	b13c      	cbz	r4, 8007276 <_Bfree+0x3a>
 8007266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007268:	6862      	ldr	r2, [r4, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007270:	6021      	str	r1, [r4, #0]
 8007272:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	08009069 	.word	0x08009069
 800727c:	080090ec 	.word	0x080090ec

08007280 <__multadd>:
 8007280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007284:	4607      	mov	r7, r0
 8007286:	460c      	mov	r4, r1
 8007288:	461e      	mov	r6, r3
 800728a:	2000      	movs	r0, #0
 800728c:	690d      	ldr	r5, [r1, #16]
 800728e:	f101 0c14 	add.w	ip, r1, #20
 8007292:	f8dc 3000 	ldr.w	r3, [ip]
 8007296:	3001      	adds	r0, #1
 8007298:	b299      	uxth	r1, r3
 800729a:	fb02 6101 	mla	r1, r2, r1, r6
 800729e:	0c1e      	lsrs	r6, r3, #16
 80072a0:	0c0b      	lsrs	r3, r1, #16
 80072a2:	fb02 3306 	mla	r3, r2, r6, r3
 80072a6:	b289      	uxth	r1, r1
 80072a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072ac:	4285      	cmp	r5, r0
 80072ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072b2:	f84c 1b04 	str.w	r1, [ip], #4
 80072b6:	dcec      	bgt.n	8007292 <__multadd+0x12>
 80072b8:	b30e      	cbz	r6, 80072fe <__multadd+0x7e>
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	42ab      	cmp	r3, r5
 80072be:	dc19      	bgt.n	80072f4 <__multadd+0x74>
 80072c0:	6861      	ldr	r1, [r4, #4]
 80072c2:	4638      	mov	r0, r7
 80072c4:	3101      	adds	r1, #1
 80072c6:	f7ff ff79 	bl	80071bc <_Balloc>
 80072ca:	4680      	mov	r8, r0
 80072cc:	b928      	cbnz	r0, 80072da <__multadd+0x5a>
 80072ce:	4602      	mov	r2, r0
 80072d0:	21b5      	movs	r1, #181	; 0xb5
 80072d2:	4b0c      	ldr	r3, [pc, #48]	; (8007304 <__multadd+0x84>)
 80072d4:	480c      	ldr	r0, [pc, #48]	; (8007308 <__multadd+0x88>)
 80072d6:	f000 fd4f 	bl	8007d78 <__assert_func>
 80072da:	6922      	ldr	r2, [r4, #16]
 80072dc:	f104 010c 	add.w	r1, r4, #12
 80072e0:	3202      	adds	r2, #2
 80072e2:	0092      	lsls	r2, r2, #2
 80072e4:	300c      	adds	r0, #12
 80072e6:	f7ff ff5b 	bl	80071a0 <memcpy>
 80072ea:	4621      	mov	r1, r4
 80072ec:	4638      	mov	r0, r7
 80072ee:	f7ff ffa5 	bl	800723c <_Bfree>
 80072f2:	4644      	mov	r4, r8
 80072f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072f8:	3501      	adds	r5, #1
 80072fa:	615e      	str	r6, [r3, #20]
 80072fc:	6125      	str	r5, [r4, #16]
 80072fe:	4620      	mov	r0, r4
 8007300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007304:	080090db 	.word	0x080090db
 8007308:	080090ec 	.word	0x080090ec

0800730c <__hi0bits>:
 800730c:	0c02      	lsrs	r2, r0, #16
 800730e:	0412      	lsls	r2, r2, #16
 8007310:	4603      	mov	r3, r0
 8007312:	b9ca      	cbnz	r2, 8007348 <__hi0bits+0x3c>
 8007314:	0403      	lsls	r3, r0, #16
 8007316:	2010      	movs	r0, #16
 8007318:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800731c:	bf04      	itt	eq
 800731e:	021b      	lsleq	r3, r3, #8
 8007320:	3008      	addeq	r0, #8
 8007322:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007326:	bf04      	itt	eq
 8007328:	011b      	lsleq	r3, r3, #4
 800732a:	3004      	addeq	r0, #4
 800732c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007330:	bf04      	itt	eq
 8007332:	009b      	lsleq	r3, r3, #2
 8007334:	3002      	addeq	r0, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	db05      	blt.n	8007346 <__hi0bits+0x3a>
 800733a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800733e:	f100 0001 	add.w	r0, r0, #1
 8007342:	bf08      	it	eq
 8007344:	2020      	moveq	r0, #32
 8007346:	4770      	bx	lr
 8007348:	2000      	movs	r0, #0
 800734a:	e7e5      	b.n	8007318 <__hi0bits+0xc>

0800734c <__lo0bits>:
 800734c:	6803      	ldr	r3, [r0, #0]
 800734e:	4602      	mov	r2, r0
 8007350:	f013 0007 	ands.w	r0, r3, #7
 8007354:	d00b      	beq.n	800736e <__lo0bits+0x22>
 8007356:	07d9      	lsls	r1, r3, #31
 8007358:	d421      	bmi.n	800739e <__lo0bits+0x52>
 800735a:	0798      	lsls	r0, r3, #30
 800735c:	bf49      	itett	mi
 800735e:	085b      	lsrmi	r3, r3, #1
 8007360:	089b      	lsrpl	r3, r3, #2
 8007362:	2001      	movmi	r0, #1
 8007364:	6013      	strmi	r3, [r2, #0]
 8007366:	bf5c      	itt	pl
 8007368:	2002      	movpl	r0, #2
 800736a:	6013      	strpl	r3, [r2, #0]
 800736c:	4770      	bx	lr
 800736e:	b299      	uxth	r1, r3
 8007370:	b909      	cbnz	r1, 8007376 <__lo0bits+0x2a>
 8007372:	2010      	movs	r0, #16
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	b2d9      	uxtb	r1, r3
 8007378:	b909      	cbnz	r1, 800737e <__lo0bits+0x32>
 800737a:	3008      	adds	r0, #8
 800737c:	0a1b      	lsrs	r3, r3, #8
 800737e:	0719      	lsls	r1, r3, #28
 8007380:	bf04      	itt	eq
 8007382:	091b      	lsreq	r3, r3, #4
 8007384:	3004      	addeq	r0, #4
 8007386:	0799      	lsls	r1, r3, #30
 8007388:	bf04      	itt	eq
 800738a:	089b      	lsreq	r3, r3, #2
 800738c:	3002      	addeq	r0, #2
 800738e:	07d9      	lsls	r1, r3, #31
 8007390:	d403      	bmi.n	800739a <__lo0bits+0x4e>
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	f100 0001 	add.w	r0, r0, #1
 8007398:	d003      	beq.n	80073a2 <__lo0bits+0x56>
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	4770      	bx	lr
 800739e:	2000      	movs	r0, #0
 80073a0:	4770      	bx	lr
 80073a2:	2020      	movs	r0, #32
 80073a4:	4770      	bx	lr
	...

080073a8 <__i2b>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	460c      	mov	r4, r1
 80073ac:	2101      	movs	r1, #1
 80073ae:	f7ff ff05 	bl	80071bc <_Balloc>
 80073b2:	4602      	mov	r2, r0
 80073b4:	b928      	cbnz	r0, 80073c2 <__i2b+0x1a>
 80073b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073ba:	4b04      	ldr	r3, [pc, #16]	; (80073cc <__i2b+0x24>)
 80073bc:	4804      	ldr	r0, [pc, #16]	; (80073d0 <__i2b+0x28>)
 80073be:	f000 fcdb 	bl	8007d78 <__assert_func>
 80073c2:	2301      	movs	r3, #1
 80073c4:	6144      	str	r4, [r0, #20]
 80073c6:	6103      	str	r3, [r0, #16]
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	bf00      	nop
 80073cc:	080090db 	.word	0x080090db
 80073d0:	080090ec 	.word	0x080090ec

080073d4 <__multiply>:
 80073d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d8:	4691      	mov	r9, r2
 80073da:	690a      	ldr	r2, [r1, #16]
 80073dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073e0:	460c      	mov	r4, r1
 80073e2:	429a      	cmp	r2, r3
 80073e4:	bfbe      	ittt	lt
 80073e6:	460b      	movlt	r3, r1
 80073e8:	464c      	movlt	r4, r9
 80073ea:	4699      	movlt	r9, r3
 80073ec:	6927      	ldr	r7, [r4, #16]
 80073ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073f2:	68a3      	ldr	r3, [r4, #8]
 80073f4:	6861      	ldr	r1, [r4, #4]
 80073f6:	eb07 060a 	add.w	r6, r7, sl
 80073fa:	42b3      	cmp	r3, r6
 80073fc:	b085      	sub	sp, #20
 80073fe:	bfb8      	it	lt
 8007400:	3101      	addlt	r1, #1
 8007402:	f7ff fedb 	bl	80071bc <_Balloc>
 8007406:	b930      	cbnz	r0, 8007416 <__multiply+0x42>
 8007408:	4602      	mov	r2, r0
 800740a:	f240 115d 	movw	r1, #349	; 0x15d
 800740e:	4b43      	ldr	r3, [pc, #268]	; (800751c <__multiply+0x148>)
 8007410:	4843      	ldr	r0, [pc, #268]	; (8007520 <__multiply+0x14c>)
 8007412:	f000 fcb1 	bl	8007d78 <__assert_func>
 8007416:	f100 0514 	add.w	r5, r0, #20
 800741a:	462b      	mov	r3, r5
 800741c:	2200      	movs	r2, #0
 800741e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007422:	4543      	cmp	r3, r8
 8007424:	d321      	bcc.n	800746a <__multiply+0x96>
 8007426:	f104 0314 	add.w	r3, r4, #20
 800742a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800742e:	f109 0314 	add.w	r3, r9, #20
 8007432:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007436:	9202      	str	r2, [sp, #8]
 8007438:	1b3a      	subs	r2, r7, r4
 800743a:	3a15      	subs	r2, #21
 800743c:	f022 0203 	bic.w	r2, r2, #3
 8007440:	3204      	adds	r2, #4
 8007442:	f104 0115 	add.w	r1, r4, #21
 8007446:	428f      	cmp	r7, r1
 8007448:	bf38      	it	cc
 800744a:	2204      	movcc	r2, #4
 800744c:	9201      	str	r2, [sp, #4]
 800744e:	9a02      	ldr	r2, [sp, #8]
 8007450:	9303      	str	r3, [sp, #12]
 8007452:	429a      	cmp	r2, r3
 8007454:	d80c      	bhi.n	8007470 <__multiply+0x9c>
 8007456:	2e00      	cmp	r6, #0
 8007458:	dd03      	ble.n	8007462 <__multiply+0x8e>
 800745a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800745e:	2b00      	cmp	r3, #0
 8007460:	d059      	beq.n	8007516 <__multiply+0x142>
 8007462:	6106      	str	r6, [r0, #16]
 8007464:	b005      	add	sp, #20
 8007466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746a:	f843 2b04 	str.w	r2, [r3], #4
 800746e:	e7d8      	b.n	8007422 <__multiply+0x4e>
 8007470:	f8b3 a000 	ldrh.w	sl, [r3]
 8007474:	f1ba 0f00 	cmp.w	sl, #0
 8007478:	d023      	beq.n	80074c2 <__multiply+0xee>
 800747a:	46a9      	mov	r9, r5
 800747c:	f04f 0c00 	mov.w	ip, #0
 8007480:	f104 0e14 	add.w	lr, r4, #20
 8007484:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007488:	f8d9 1000 	ldr.w	r1, [r9]
 800748c:	fa1f fb82 	uxth.w	fp, r2
 8007490:	b289      	uxth	r1, r1
 8007492:	fb0a 110b 	mla	r1, sl, fp, r1
 8007496:	4461      	add	r1, ip
 8007498:	f8d9 c000 	ldr.w	ip, [r9]
 800749c:	0c12      	lsrs	r2, r2, #16
 800749e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80074a2:	fb0a c202 	mla	r2, sl, r2, ip
 80074a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074aa:	b289      	uxth	r1, r1
 80074ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074b0:	4577      	cmp	r7, lr
 80074b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074b6:	f849 1b04 	str.w	r1, [r9], #4
 80074ba:	d8e3      	bhi.n	8007484 <__multiply+0xb0>
 80074bc:	9a01      	ldr	r2, [sp, #4]
 80074be:	f845 c002 	str.w	ip, [r5, r2]
 80074c2:	9a03      	ldr	r2, [sp, #12]
 80074c4:	3304      	adds	r3, #4
 80074c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074ca:	f1b9 0f00 	cmp.w	r9, #0
 80074ce:	d020      	beq.n	8007512 <__multiply+0x13e>
 80074d0:	46ae      	mov	lr, r5
 80074d2:	f04f 0a00 	mov.w	sl, #0
 80074d6:	6829      	ldr	r1, [r5, #0]
 80074d8:	f104 0c14 	add.w	ip, r4, #20
 80074dc:	f8bc b000 	ldrh.w	fp, [ip]
 80074e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074e4:	b289      	uxth	r1, r1
 80074e6:	fb09 220b 	mla	r2, r9, fp, r2
 80074ea:	4492      	add	sl, r2
 80074ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074f0:	f84e 1b04 	str.w	r1, [lr], #4
 80074f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074f8:	f8be 1000 	ldrh.w	r1, [lr]
 80074fc:	0c12      	lsrs	r2, r2, #16
 80074fe:	fb09 1102 	mla	r1, r9, r2, r1
 8007502:	4567      	cmp	r7, ip
 8007504:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007508:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800750c:	d8e6      	bhi.n	80074dc <__multiply+0x108>
 800750e:	9a01      	ldr	r2, [sp, #4]
 8007510:	50a9      	str	r1, [r5, r2]
 8007512:	3504      	adds	r5, #4
 8007514:	e79b      	b.n	800744e <__multiply+0x7a>
 8007516:	3e01      	subs	r6, #1
 8007518:	e79d      	b.n	8007456 <__multiply+0x82>
 800751a:	bf00      	nop
 800751c:	080090db 	.word	0x080090db
 8007520:	080090ec 	.word	0x080090ec

08007524 <__pow5mult>:
 8007524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007528:	4615      	mov	r5, r2
 800752a:	f012 0203 	ands.w	r2, r2, #3
 800752e:	4606      	mov	r6, r0
 8007530:	460f      	mov	r7, r1
 8007532:	d007      	beq.n	8007544 <__pow5mult+0x20>
 8007534:	4c25      	ldr	r4, [pc, #148]	; (80075cc <__pow5mult+0xa8>)
 8007536:	3a01      	subs	r2, #1
 8007538:	2300      	movs	r3, #0
 800753a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800753e:	f7ff fe9f 	bl	8007280 <__multadd>
 8007542:	4607      	mov	r7, r0
 8007544:	10ad      	asrs	r5, r5, #2
 8007546:	d03d      	beq.n	80075c4 <__pow5mult+0xa0>
 8007548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800754a:	b97c      	cbnz	r4, 800756c <__pow5mult+0x48>
 800754c:	2010      	movs	r0, #16
 800754e:	f7ff fe11 	bl	8007174 <malloc>
 8007552:	4602      	mov	r2, r0
 8007554:	6270      	str	r0, [r6, #36]	; 0x24
 8007556:	b928      	cbnz	r0, 8007564 <__pow5mult+0x40>
 8007558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800755c:	4b1c      	ldr	r3, [pc, #112]	; (80075d0 <__pow5mult+0xac>)
 800755e:	481d      	ldr	r0, [pc, #116]	; (80075d4 <__pow5mult+0xb0>)
 8007560:	f000 fc0a 	bl	8007d78 <__assert_func>
 8007564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007568:	6004      	str	r4, [r0, #0]
 800756a:	60c4      	str	r4, [r0, #12]
 800756c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007574:	b94c      	cbnz	r4, 800758a <__pow5mult+0x66>
 8007576:	f240 2171 	movw	r1, #625	; 0x271
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ff14 	bl	80073a8 <__i2b>
 8007580:	2300      	movs	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	f8c8 0008 	str.w	r0, [r8, #8]
 8007588:	6003      	str	r3, [r0, #0]
 800758a:	f04f 0900 	mov.w	r9, #0
 800758e:	07eb      	lsls	r3, r5, #31
 8007590:	d50a      	bpl.n	80075a8 <__pow5mult+0x84>
 8007592:	4639      	mov	r1, r7
 8007594:	4622      	mov	r2, r4
 8007596:	4630      	mov	r0, r6
 8007598:	f7ff ff1c 	bl	80073d4 <__multiply>
 800759c:	4680      	mov	r8, r0
 800759e:	4639      	mov	r1, r7
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7ff fe4b 	bl	800723c <_Bfree>
 80075a6:	4647      	mov	r7, r8
 80075a8:	106d      	asrs	r5, r5, #1
 80075aa:	d00b      	beq.n	80075c4 <__pow5mult+0xa0>
 80075ac:	6820      	ldr	r0, [r4, #0]
 80075ae:	b938      	cbnz	r0, 80075c0 <__pow5mult+0x9c>
 80075b0:	4622      	mov	r2, r4
 80075b2:	4621      	mov	r1, r4
 80075b4:	4630      	mov	r0, r6
 80075b6:	f7ff ff0d 	bl	80073d4 <__multiply>
 80075ba:	6020      	str	r0, [r4, #0]
 80075bc:	f8c0 9000 	str.w	r9, [r0]
 80075c0:	4604      	mov	r4, r0
 80075c2:	e7e4      	b.n	800758e <__pow5mult+0x6a>
 80075c4:	4638      	mov	r0, r7
 80075c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ca:	bf00      	nop
 80075cc:	08009238 	.word	0x08009238
 80075d0:	08009069 	.word	0x08009069
 80075d4:	080090ec 	.word	0x080090ec

080075d8 <__lshift>:
 80075d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	460c      	mov	r4, r1
 80075de:	4607      	mov	r7, r0
 80075e0:	4691      	mov	r9, r2
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	6849      	ldr	r1, [r1, #4]
 80075e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075ea:	68a3      	ldr	r3, [r4, #8]
 80075ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075f0:	f108 0601 	add.w	r6, r8, #1
 80075f4:	42b3      	cmp	r3, r6
 80075f6:	db0b      	blt.n	8007610 <__lshift+0x38>
 80075f8:	4638      	mov	r0, r7
 80075fa:	f7ff fddf 	bl	80071bc <_Balloc>
 80075fe:	4605      	mov	r5, r0
 8007600:	b948      	cbnz	r0, 8007616 <__lshift+0x3e>
 8007602:	4602      	mov	r2, r0
 8007604:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007608:	4b29      	ldr	r3, [pc, #164]	; (80076b0 <__lshift+0xd8>)
 800760a:	482a      	ldr	r0, [pc, #168]	; (80076b4 <__lshift+0xdc>)
 800760c:	f000 fbb4 	bl	8007d78 <__assert_func>
 8007610:	3101      	adds	r1, #1
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	e7ee      	b.n	80075f4 <__lshift+0x1c>
 8007616:	2300      	movs	r3, #0
 8007618:	f100 0114 	add.w	r1, r0, #20
 800761c:	f100 0210 	add.w	r2, r0, #16
 8007620:	4618      	mov	r0, r3
 8007622:	4553      	cmp	r3, sl
 8007624:	db37      	blt.n	8007696 <__lshift+0xbe>
 8007626:	6920      	ldr	r0, [r4, #16]
 8007628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800762c:	f104 0314 	add.w	r3, r4, #20
 8007630:	f019 091f 	ands.w	r9, r9, #31
 8007634:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007638:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800763c:	d02f      	beq.n	800769e <__lshift+0xc6>
 800763e:	468a      	mov	sl, r1
 8007640:	f04f 0c00 	mov.w	ip, #0
 8007644:	f1c9 0e20 	rsb	lr, r9, #32
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	fa02 f209 	lsl.w	r2, r2, r9
 800764e:	ea42 020c 	orr.w	r2, r2, ip
 8007652:	f84a 2b04 	str.w	r2, [sl], #4
 8007656:	f853 2b04 	ldr.w	r2, [r3], #4
 800765a:	4298      	cmp	r0, r3
 800765c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007660:	d8f2      	bhi.n	8007648 <__lshift+0x70>
 8007662:	1b03      	subs	r3, r0, r4
 8007664:	3b15      	subs	r3, #21
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	3304      	adds	r3, #4
 800766c:	f104 0215 	add.w	r2, r4, #21
 8007670:	4290      	cmp	r0, r2
 8007672:	bf38      	it	cc
 8007674:	2304      	movcc	r3, #4
 8007676:	f841 c003 	str.w	ip, [r1, r3]
 800767a:	f1bc 0f00 	cmp.w	ip, #0
 800767e:	d001      	beq.n	8007684 <__lshift+0xac>
 8007680:	f108 0602 	add.w	r6, r8, #2
 8007684:	3e01      	subs	r6, #1
 8007686:	4638      	mov	r0, r7
 8007688:	4621      	mov	r1, r4
 800768a:	612e      	str	r6, [r5, #16]
 800768c:	f7ff fdd6 	bl	800723c <_Bfree>
 8007690:	4628      	mov	r0, r5
 8007692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007696:	f842 0f04 	str.w	r0, [r2, #4]!
 800769a:	3301      	adds	r3, #1
 800769c:	e7c1      	b.n	8007622 <__lshift+0x4a>
 800769e:	3904      	subs	r1, #4
 80076a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a4:	4298      	cmp	r0, r3
 80076a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80076aa:	d8f9      	bhi.n	80076a0 <__lshift+0xc8>
 80076ac:	e7ea      	b.n	8007684 <__lshift+0xac>
 80076ae:	bf00      	nop
 80076b0:	080090db 	.word	0x080090db
 80076b4:	080090ec 	.word	0x080090ec

080076b8 <__mcmp>:
 80076b8:	4603      	mov	r3, r0
 80076ba:	690a      	ldr	r2, [r1, #16]
 80076bc:	6900      	ldr	r0, [r0, #16]
 80076be:	b530      	push	{r4, r5, lr}
 80076c0:	1a80      	subs	r0, r0, r2
 80076c2:	d10d      	bne.n	80076e0 <__mcmp+0x28>
 80076c4:	3314      	adds	r3, #20
 80076c6:	3114      	adds	r1, #20
 80076c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076d8:	4295      	cmp	r5, r2
 80076da:	d002      	beq.n	80076e2 <__mcmp+0x2a>
 80076dc:	d304      	bcc.n	80076e8 <__mcmp+0x30>
 80076de:	2001      	movs	r0, #1
 80076e0:	bd30      	pop	{r4, r5, pc}
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	d3f4      	bcc.n	80076d0 <__mcmp+0x18>
 80076e6:	e7fb      	b.n	80076e0 <__mcmp+0x28>
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	e7f8      	b.n	80076e0 <__mcmp+0x28>
	...

080076f0 <__mdiff>:
 80076f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	460d      	mov	r5, r1
 80076f6:	4607      	mov	r7, r0
 80076f8:	4611      	mov	r1, r2
 80076fa:	4628      	mov	r0, r5
 80076fc:	4614      	mov	r4, r2
 80076fe:	f7ff ffdb 	bl	80076b8 <__mcmp>
 8007702:	1e06      	subs	r6, r0, #0
 8007704:	d111      	bne.n	800772a <__mdiff+0x3a>
 8007706:	4631      	mov	r1, r6
 8007708:	4638      	mov	r0, r7
 800770a:	f7ff fd57 	bl	80071bc <_Balloc>
 800770e:	4602      	mov	r2, r0
 8007710:	b928      	cbnz	r0, 800771e <__mdiff+0x2e>
 8007712:	f240 2132 	movw	r1, #562	; 0x232
 8007716:	4b3a      	ldr	r3, [pc, #232]	; (8007800 <__mdiff+0x110>)
 8007718:	483a      	ldr	r0, [pc, #232]	; (8007804 <__mdiff+0x114>)
 800771a:	f000 fb2d 	bl	8007d78 <__assert_func>
 800771e:	2301      	movs	r3, #1
 8007720:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007724:	4610      	mov	r0, r2
 8007726:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772a:	bfa4      	itt	ge
 800772c:	4623      	movge	r3, r4
 800772e:	462c      	movge	r4, r5
 8007730:	4638      	mov	r0, r7
 8007732:	6861      	ldr	r1, [r4, #4]
 8007734:	bfa6      	itte	ge
 8007736:	461d      	movge	r5, r3
 8007738:	2600      	movge	r6, #0
 800773a:	2601      	movlt	r6, #1
 800773c:	f7ff fd3e 	bl	80071bc <_Balloc>
 8007740:	4602      	mov	r2, r0
 8007742:	b918      	cbnz	r0, 800774c <__mdiff+0x5c>
 8007744:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007748:	4b2d      	ldr	r3, [pc, #180]	; (8007800 <__mdiff+0x110>)
 800774a:	e7e5      	b.n	8007718 <__mdiff+0x28>
 800774c:	f102 0814 	add.w	r8, r2, #20
 8007750:	46c2      	mov	sl, r8
 8007752:	f04f 0c00 	mov.w	ip, #0
 8007756:	6927      	ldr	r7, [r4, #16]
 8007758:	60c6      	str	r6, [r0, #12]
 800775a:	692e      	ldr	r6, [r5, #16]
 800775c:	f104 0014 	add.w	r0, r4, #20
 8007760:	f105 0914 	add.w	r9, r5, #20
 8007764:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007768:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800776c:	3410      	adds	r4, #16
 800776e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007772:	f859 3b04 	ldr.w	r3, [r9], #4
 8007776:	fa1f f18b 	uxth.w	r1, fp
 800777a:	448c      	add	ip, r1
 800777c:	b299      	uxth	r1, r3
 800777e:	0c1b      	lsrs	r3, r3, #16
 8007780:	ebac 0101 	sub.w	r1, ip, r1
 8007784:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007788:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800778c:	b289      	uxth	r1, r1
 800778e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007792:	454e      	cmp	r6, r9
 8007794:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007798:	f84a 3b04 	str.w	r3, [sl], #4
 800779c:	d8e7      	bhi.n	800776e <__mdiff+0x7e>
 800779e:	1b73      	subs	r3, r6, r5
 80077a0:	3b15      	subs	r3, #21
 80077a2:	f023 0303 	bic.w	r3, r3, #3
 80077a6:	3515      	adds	r5, #21
 80077a8:	3304      	adds	r3, #4
 80077aa:	42ae      	cmp	r6, r5
 80077ac:	bf38      	it	cc
 80077ae:	2304      	movcc	r3, #4
 80077b0:	4418      	add	r0, r3
 80077b2:	4443      	add	r3, r8
 80077b4:	461e      	mov	r6, r3
 80077b6:	4605      	mov	r5, r0
 80077b8:	4575      	cmp	r5, lr
 80077ba:	d30e      	bcc.n	80077da <__mdiff+0xea>
 80077bc:	f10e 0103 	add.w	r1, lr, #3
 80077c0:	1a09      	subs	r1, r1, r0
 80077c2:	f021 0103 	bic.w	r1, r1, #3
 80077c6:	3803      	subs	r0, #3
 80077c8:	4586      	cmp	lr, r0
 80077ca:	bf38      	it	cc
 80077cc:	2100      	movcc	r1, #0
 80077ce:	4419      	add	r1, r3
 80077d0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80077d4:	b18b      	cbz	r3, 80077fa <__mdiff+0x10a>
 80077d6:	6117      	str	r7, [r2, #16]
 80077d8:	e7a4      	b.n	8007724 <__mdiff+0x34>
 80077da:	f855 8b04 	ldr.w	r8, [r5], #4
 80077de:	fa1f f188 	uxth.w	r1, r8
 80077e2:	4461      	add	r1, ip
 80077e4:	140c      	asrs	r4, r1, #16
 80077e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077ea:	b289      	uxth	r1, r1
 80077ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80077f0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80077f4:	f846 1b04 	str.w	r1, [r6], #4
 80077f8:	e7de      	b.n	80077b8 <__mdiff+0xc8>
 80077fa:	3f01      	subs	r7, #1
 80077fc:	e7e8      	b.n	80077d0 <__mdiff+0xe0>
 80077fe:	bf00      	nop
 8007800:	080090db 	.word	0x080090db
 8007804:	080090ec 	.word	0x080090ec

08007808 <__d2b>:
 8007808:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800780c:	2101      	movs	r1, #1
 800780e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007812:	4690      	mov	r8, r2
 8007814:	461d      	mov	r5, r3
 8007816:	f7ff fcd1 	bl	80071bc <_Balloc>
 800781a:	4604      	mov	r4, r0
 800781c:	b930      	cbnz	r0, 800782c <__d2b+0x24>
 800781e:	4602      	mov	r2, r0
 8007820:	f240 310a 	movw	r1, #778	; 0x30a
 8007824:	4b24      	ldr	r3, [pc, #144]	; (80078b8 <__d2b+0xb0>)
 8007826:	4825      	ldr	r0, [pc, #148]	; (80078bc <__d2b+0xb4>)
 8007828:	f000 faa6 	bl	8007d78 <__assert_func>
 800782c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007830:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007834:	bb2d      	cbnz	r5, 8007882 <__d2b+0x7a>
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	f1b8 0300 	subs.w	r3, r8, #0
 800783c:	d026      	beq.n	800788c <__d2b+0x84>
 800783e:	4668      	mov	r0, sp
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	f7ff fd83 	bl	800734c <__lo0bits>
 8007846:	9900      	ldr	r1, [sp, #0]
 8007848:	b1f0      	cbz	r0, 8007888 <__d2b+0x80>
 800784a:	9a01      	ldr	r2, [sp, #4]
 800784c:	f1c0 0320 	rsb	r3, r0, #32
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	430b      	orrs	r3, r1
 8007856:	40c2      	lsrs	r2, r0
 8007858:	6163      	str	r3, [r4, #20]
 800785a:	9201      	str	r2, [sp, #4]
 800785c:	9b01      	ldr	r3, [sp, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	bf14      	ite	ne
 8007862:	2102      	movne	r1, #2
 8007864:	2101      	moveq	r1, #1
 8007866:	61a3      	str	r3, [r4, #24]
 8007868:	6121      	str	r1, [r4, #16]
 800786a:	b1c5      	cbz	r5, 800789e <__d2b+0x96>
 800786c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007870:	4405      	add	r5, r0
 8007872:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007876:	603d      	str	r5, [r7, #0]
 8007878:	6030      	str	r0, [r6, #0]
 800787a:	4620      	mov	r0, r4
 800787c:	b002      	add	sp, #8
 800787e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007886:	e7d6      	b.n	8007836 <__d2b+0x2e>
 8007888:	6161      	str	r1, [r4, #20]
 800788a:	e7e7      	b.n	800785c <__d2b+0x54>
 800788c:	a801      	add	r0, sp, #4
 800788e:	f7ff fd5d 	bl	800734c <__lo0bits>
 8007892:	2101      	movs	r1, #1
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	6121      	str	r1, [r4, #16]
 8007898:	6163      	str	r3, [r4, #20]
 800789a:	3020      	adds	r0, #32
 800789c:	e7e5      	b.n	800786a <__d2b+0x62>
 800789e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80078a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078a6:	6038      	str	r0, [r7, #0]
 80078a8:	6918      	ldr	r0, [r3, #16]
 80078aa:	f7ff fd2f 	bl	800730c <__hi0bits>
 80078ae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80078b2:	6031      	str	r1, [r6, #0]
 80078b4:	e7e1      	b.n	800787a <__d2b+0x72>
 80078b6:	bf00      	nop
 80078b8:	080090db 	.word	0x080090db
 80078bc:	080090ec 	.word	0x080090ec

080078c0 <_calloc_r>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	fba1 5402 	umull	r5, r4, r1, r2
 80078c6:	b934      	cbnz	r4, 80078d6 <_calloc_r+0x16>
 80078c8:	4629      	mov	r1, r5
 80078ca:	f000 f875 	bl	80079b8 <_malloc_r>
 80078ce:	4606      	mov	r6, r0
 80078d0:	b928      	cbnz	r0, 80078de <_calloc_r+0x1e>
 80078d2:	4630      	mov	r0, r6
 80078d4:	bd70      	pop	{r4, r5, r6, pc}
 80078d6:	220c      	movs	r2, #12
 80078d8:	2600      	movs	r6, #0
 80078da:	6002      	str	r2, [r0, #0]
 80078dc:	e7f9      	b.n	80078d2 <_calloc_r+0x12>
 80078de:	462a      	mov	r2, r5
 80078e0:	4621      	mov	r1, r4
 80078e2:	f7fe f941 	bl	8005b68 <memset>
 80078e6:	e7f4      	b.n	80078d2 <_calloc_r+0x12>

080078e8 <_free_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4605      	mov	r5, r0
 80078ec:	2900      	cmp	r1, #0
 80078ee:	d040      	beq.n	8007972 <_free_r+0x8a>
 80078f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f4:	1f0c      	subs	r4, r1, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bfb8      	it	lt
 80078fa:	18e4      	addlt	r4, r4, r3
 80078fc:	f000 fa98 	bl	8007e30 <__malloc_lock>
 8007900:	4a1c      	ldr	r2, [pc, #112]	; (8007974 <_free_r+0x8c>)
 8007902:	6813      	ldr	r3, [r2, #0]
 8007904:	b933      	cbnz	r3, 8007914 <_free_r+0x2c>
 8007906:	6063      	str	r3, [r4, #4]
 8007908:	6014      	str	r4, [r2, #0]
 800790a:	4628      	mov	r0, r5
 800790c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007910:	f000 ba94 	b.w	8007e3c <__malloc_unlock>
 8007914:	42a3      	cmp	r3, r4
 8007916:	d908      	bls.n	800792a <_free_r+0x42>
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	1821      	adds	r1, r4, r0
 800791c:	428b      	cmp	r3, r1
 800791e:	bf01      	itttt	eq
 8007920:	6819      	ldreq	r1, [r3, #0]
 8007922:	685b      	ldreq	r3, [r3, #4]
 8007924:	1809      	addeq	r1, r1, r0
 8007926:	6021      	streq	r1, [r4, #0]
 8007928:	e7ed      	b.n	8007906 <_free_r+0x1e>
 800792a:	461a      	mov	r2, r3
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	b10b      	cbz	r3, 8007934 <_free_r+0x4c>
 8007930:	42a3      	cmp	r3, r4
 8007932:	d9fa      	bls.n	800792a <_free_r+0x42>
 8007934:	6811      	ldr	r1, [r2, #0]
 8007936:	1850      	adds	r0, r2, r1
 8007938:	42a0      	cmp	r0, r4
 800793a:	d10b      	bne.n	8007954 <_free_r+0x6c>
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	4401      	add	r1, r0
 8007940:	1850      	adds	r0, r2, r1
 8007942:	4283      	cmp	r3, r0
 8007944:	6011      	str	r1, [r2, #0]
 8007946:	d1e0      	bne.n	800790a <_free_r+0x22>
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	4401      	add	r1, r0
 800794e:	6011      	str	r1, [r2, #0]
 8007950:	6053      	str	r3, [r2, #4]
 8007952:	e7da      	b.n	800790a <_free_r+0x22>
 8007954:	d902      	bls.n	800795c <_free_r+0x74>
 8007956:	230c      	movs	r3, #12
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	e7d6      	b.n	800790a <_free_r+0x22>
 800795c:	6820      	ldr	r0, [r4, #0]
 800795e:	1821      	adds	r1, r4, r0
 8007960:	428b      	cmp	r3, r1
 8007962:	bf01      	itttt	eq
 8007964:	6819      	ldreq	r1, [r3, #0]
 8007966:	685b      	ldreq	r3, [r3, #4]
 8007968:	1809      	addeq	r1, r1, r0
 800796a:	6021      	streq	r1, [r4, #0]
 800796c:	6063      	str	r3, [r4, #4]
 800796e:	6054      	str	r4, [r2, #4]
 8007970:	e7cb      	b.n	800790a <_free_r+0x22>
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	20000430 	.word	0x20000430

08007978 <sbrk_aligned>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4e0e      	ldr	r6, [pc, #56]	; (80079b4 <sbrk_aligned+0x3c>)
 800797c:	460c      	mov	r4, r1
 800797e:	6831      	ldr	r1, [r6, #0]
 8007980:	4605      	mov	r5, r0
 8007982:	b911      	cbnz	r1, 800798a <sbrk_aligned+0x12>
 8007984:	f000 f9e8 	bl	8007d58 <_sbrk_r>
 8007988:	6030      	str	r0, [r6, #0]
 800798a:	4621      	mov	r1, r4
 800798c:	4628      	mov	r0, r5
 800798e:	f000 f9e3 	bl	8007d58 <_sbrk_r>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	d00a      	beq.n	80079ac <sbrk_aligned+0x34>
 8007996:	1cc4      	adds	r4, r0, #3
 8007998:	f024 0403 	bic.w	r4, r4, #3
 800799c:	42a0      	cmp	r0, r4
 800799e:	d007      	beq.n	80079b0 <sbrk_aligned+0x38>
 80079a0:	1a21      	subs	r1, r4, r0
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f9d8 	bl	8007d58 <_sbrk_r>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d101      	bne.n	80079b0 <sbrk_aligned+0x38>
 80079ac:	f04f 34ff 	mov.w	r4, #4294967295
 80079b0:	4620      	mov	r0, r4
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	20000434 	.word	0x20000434

080079b8 <_malloc_r>:
 80079b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079bc:	1ccd      	adds	r5, r1, #3
 80079be:	f025 0503 	bic.w	r5, r5, #3
 80079c2:	3508      	adds	r5, #8
 80079c4:	2d0c      	cmp	r5, #12
 80079c6:	bf38      	it	cc
 80079c8:	250c      	movcc	r5, #12
 80079ca:	2d00      	cmp	r5, #0
 80079cc:	4607      	mov	r7, r0
 80079ce:	db01      	blt.n	80079d4 <_malloc_r+0x1c>
 80079d0:	42a9      	cmp	r1, r5
 80079d2:	d905      	bls.n	80079e0 <_malloc_r+0x28>
 80079d4:	230c      	movs	r3, #12
 80079d6:	2600      	movs	r6, #0
 80079d8:	603b      	str	r3, [r7, #0]
 80079da:	4630      	mov	r0, r6
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e0:	4e2e      	ldr	r6, [pc, #184]	; (8007a9c <_malloc_r+0xe4>)
 80079e2:	f000 fa25 	bl	8007e30 <__malloc_lock>
 80079e6:	6833      	ldr	r3, [r6, #0]
 80079e8:	461c      	mov	r4, r3
 80079ea:	bb34      	cbnz	r4, 8007a3a <_malloc_r+0x82>
 80079ec:	4629      	mov	r1, r5
 80079ee:	4638      	mov	r0, r7
 80079f0:	f7ff ffc2 	bl	8007978 <sbrk_aligned>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	4604      	mov	r4, r0
 80079f8:	d14d      	bne.n	8007a96 <_malloc_r+0xde>
 80079fa:	6834      	ldr	r4, [r6, #0]
 80079fc:	4626      	mov	r6, r4
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	d140      	bne.n	8007a84 <_malloc_r+0xcc>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	4631      	mov	r1, r6
 8007a06:	4638      	mov	r0, r7
 8007a08:	eb04 0803 	add.w	r8, r4, r3
 8007a0c:	f000 f9a4 	bl	8007d58 <_sbrk_r>
 8007a10:	4580      	cmp	r8, r0
 8007a12:	d13a      	bne.n	8007a8a <_malloc_r+0xd2>
 8007a14:	6821      	ldr	r1, [r4, #0]
 8007a16:	3503      	adds	r5, #3
 8007a18:	1a6d      	subs	r5, r5, r1
 8007a1a:	f025 0503 	bic.w	r5, r5, #3
 8007a1e:	3508      	adds	r5, #8
 8007a20:	2d0c      	cmp	r5, #12
 8007a22:	bf38      	it	cc
 8007a24:	250c      	movcc	r5, #12
 8007a26:	4638      	mov	r0, r7
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7ff ffa5 	bl	8007978 <sbrk_aligned>
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d02b      	beq.n	8007a8a <_malloc_r+0xd2>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	442b      	add	r3, r5
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	e00e      	b.n	8007a58 <_malloc_r+0xa0>
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	1b52      	subs	r2, r2, r5
 8007a3e:	d41e      	bmi.n	8007a7e <_malloc_r+0xc6>
 8007a40:	2a0b      	cmp	r2, #11
 8007a42:	d916      	bls.n	8007a72 <_malloc_r+0xba>
 8007a44:	1961      	adds	r1, r4, r5
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	6025      	str	r5, [r4, #0]
 8007a4a:	bf18      	it	ne
 8007a4c:	6059      	strne	r1, [r3, #4]
 8007a4e:	6863      	ldr	r3, [r4, #4]
 8007a50:	bf08      	it	eq
 8007a52:	6031      	streq	r1, [r6, #0]
 8007a54:	5162      	str	r2, [r4, r5]
 8007a56:	604b      	str	r3, [r1, #4]
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f104 060b 	add.w	r6, r4, #11
 8007a5e:	f000 f9ed 	bl	8007e3c <__malloc_unlock>
 8007a62:	f026 0607 	bic.w	r6, r6, #7
 8007a66:	1d23      	adds	r3, r4, #4
 8007a68:	1af2      	subs	r2, r6, r3
 8007a6a:	d0b6      	beq.n	80079da <_malloc_r+0x22>
 8007a6c:	1b9b      	subs	r3, r3, r6
 8007a6e:	50a3      	str	r3, [r4, r2]
 8007a70:	e7b3      	b.n	80079da <_malloc_r+0x22>
 8007a72:	6862      	ldr	r2, [r4, #4]
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	bf0c      	ite	eq
 8007a78:	6032      	streq	r2, [r6, #0]
 8007a7a:	605a      	strne	r2, [r3, #4]
 8007a7c:	e7ec      	b.n	8007a58 <_malloc_r+0xa0>
 8007a7e:	4623      	mov	r3, r4
 8007a80:	6864      	ldr	r4, [r4, #4]
 8007a82:	e7b2      	b.n	80079ea <_malloc_r+0x32>
 8007a84:	4634      	mov	r4, r6
 8007a86:	6876      	ldr	r6, [r6, #4]
 8007a88:	e7b9      	b.n	80079fe <_malloc_r+0x46>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	f000 f9d4 	bl	8007e3c <__malloc_unlock>
 8007a94:	e7a1      	b.n	80079da <_malloc_r+0x22>
 8007a96:	6025      	str	r5, [r4, #0]
 8007a98:	e7de      	b.n	8007a58 <_malloc_r+0xa0>
 8007a9a:	bf00      	nop
 8007a9c:	20000430 	.word	0x20000430

08007aa0 <__ssputs_r>:
 8007aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa4:	688e      	ldr	r6, [r1, #8]
 8007aa6:	4682      	mov	sl, r0
 8007aa8:	429e      	cmp	r6, r3
 8007aaa:	460c      	mov	r4, r1
 8007aac:	4690      	mov	r8, r2
 8007aae:	461f      	mov	r7, r3
 8007ab0:	d838      	bhi.n	8007b24 <__ssputs_r+0x84>
 8007ab2:	898a      	ldrh	r2, [r1, #12]
 8007ab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ab8:	d032      	beq.n	8007b20 <__ssputs_r+0x80>
 8007aba:	6825      	ldr	r5, [r4, #0]
 8007abc:	6909      	ldr	r1, [r1, #16]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	eba5 0901 	sub.w	r9, r5, r1
 8007ac4:	6965      	ldr	r5, [r4, #20]
 8007ac6:	444b      	add	r3, r9
 8007ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007acc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ad0:	106d      	asrs	r5, r5, #1
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	bf38      	it	cc
 8007ad6:	461d      	movcc	r5, r3
 8007ad8:	0553      	lsls	r3, r2, #21
 8007ada:	d531      	bpl.n	8007b40 <__ssputs_r+0xa0>
 8007adc:	4629      	mov	r1, r5
 8007ade:	f7ff ff6b 	bl	80079b8 <_malloc_r>
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	b950      	cbnz	r0, 8007afc <__ssputs_r+0x5c>
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	f8ca 3000 	str.w	r3, [sl]
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afc:	464a      	mov	r2, r9
 8007afe:	6921      	ldr	r1, [r4, #16]
 8007b00:	f7ff fb4e 	bl	80071a0 <memcpy>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	6126      	str	r6, [r4, #16]
 8007b12:	444e      	add	r6, r9
 8007b14:	6026      	str	r6, [r4, #0]
 8007b16:	463e      	mov	r6, r7
 8007b18:	6165      	str	r5, [r4, #20]
 8007b1a:	eba5 0509 	sub.w	r5, r5, r9
 8007b1e:	60a5      	str	r5, [r4, #8]
 8007b20:	42be      	cmp	r6, r7
 8007b22:	d900      	bls.n	8007b26 <__ssputs_r+0x86>
 8007b24:	463e      	mov	r6, r7
 8007b26:	4632      	mov	r2, r6
 8007b28:	4641      	mov	r1, r8
 8007b2a:	6820      	ldr	r0, [r4, #0]
 8007b2c:	f000 f966 	bl	8007dfc <memmove>
 8007b30:	68a3      	ldr	r3, [r4, #8]
 8007b32:	2000      	movs	r0, #0
 8007b34:	1b9b      	subs	r3, r3, r6
 8007b36:	60a3      	str	r3, [r4, #8]
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	4433      	add	r3, r6
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	e7db      	b.n	8007af8 <__ssputs_r+0x58>
 8007b40:	462a      	mov	r2, r5
 8007b42:	f000 f981 	bl	8007e48 <_realloc_r>
 8007b46:	4606      	mov	r6, r0
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d1e1      	bne.n	8007b10 <__ssputs_r+0x70>
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	6921      	ldr	r1, [r4, #16]
 8007b50:	f7ff feca 	bl	80078e8 <_free_r>
 8007b54:	e7c7      	b.n	8007ae6 <__ssputs_r+0x46>
	...

08007b58 <_svfiprintf_r>:
 8007b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	4698      	mov	r8, r3
 8007b5e:	898b      	ldrh	r3, [r1, #12]
 8007b60:	4607      	mov	r7, r0
 8007b62:	061b      	lsls	r3, r3, #24
 8007b64:	460d      	mov	r5, r1
 8007b66:	4614      	mov	r4, r2
 8007b68:	b09d      	sub	sp, #116	; 0x74
 8007b6a:	d50e      	bpl.n	8007b8a <_svfiprintf_r+0x32>
 8007b6c:	690b      	ldr	r3, [r1, #16]
 8007b6e:	b963      	cbnz	r3, 8007b8a <_svfiprintf_r+0x32>
 8007b70:	2140      	movs	r1, #64	; 0x40
 8007b72:	f7ff ff21 	bl	80079b8 <_malloc_r>
 8007b76:	6028      	str	r0, [r5, #0]
 8007b78:	6128      	str	r0, [r5, #16]
 8007b7a:	b920      	cbnz	r0, 8007b86 <_svfiprintf_r+0x2e>
 8007b7c:	230c      	movs	r3, #12
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	f04f 30ff 	mov.w	r0, #4294967295
 8007b84:	e0d1      	b.n	8007d2a <_svfiprintf_r+0x1d2>
 8007b86:	2340      	movs	r3, #64	; 0x40
 8007b88:	616b      	str	r3, [r5, #20]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8e:	2320      	movs	r3, #32
 8007b90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b94:	2330      	movs	r3, #48	; 0x30
 8007b96:	f04f 0901 	mov.w	r9, #1
 8007b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d44 <_svfiprintf_r+0x1ec>
 8007ba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ba6:	4623      	mov	r3, r4
 8007ba8:	469a      	mov	sl, r3
 8007baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bae:	b10a      	cbz	r2, 8007bb4 <_svfiprintf_r+0x5c>
 8007bb0:	2a25      	cmp	r2, #37	; 0x25
 8007bb2:	d1f9      	bne.n	8007ba8 <_svfiprintf_r+0x50>
 8007bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bb8:	d00b      	beq.n	8007bd2 <_svfiprintf_r+0x7a>
 8007bba:	465b      	mov	r3, fp
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f7ff ff6d 	bl	8007aa0 <__ssputs_r>
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f000 80aa 	beq.w	8007d20 <_svfiprintf_r+0x1c8>
 8007bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bce:	445a      	add	r2, fp
 8007bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 80a2 	beq.w	8007d20 <_svfiprintf_r+0x1c8>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f04f 32ff 	mov.w	r2, #4294967295
 8007be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007be6:	f10a 0a01 	add.w	sl, sl, #1
 8007bea:	9304      	str	r3, [sp, #16]
 8007bec:	9307      	str	r3, [sp, #28]
 8007bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8007bf4:	4654      	mov	r4, sl
 8007bf6:	2205      	movs	r2, #5
 8007bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfc:	4851      	ldr	r0, [pc, #324]	; (8007d44 <_svfiprintf_r+0x1ec>)
 8007bfe:	f7ff fac1 	bl	8007184 <memchr>
 8007c02:	9a04      	ldr	r2, [sp, #16]
 8007c04:	b9d8      	cbnz	r0, 8007c3e <_svfiprintf_r+0xe6>
 8007c06:	06d0      	lsls	r0, r2, #27
 8007c08:	bf44      	itt	mi
 8007c0a:	2320      	movmi	r3, #32
 8007c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c10:	0711      	lsls	r1, r2, #28
 8007c12:	bf44      	itt	mi
 8007c14:	232b      	movmi	r3, #43	; 0x2b
 8007c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c20:	d015      	beq.n	8007c4e <_svfiprintf_r+0xf6>
 8007c22:	4654      	mov	r4, sl
 8007c24:	2000      	movs	r0, #0
 8007c26:	f04f 0c0a 	mov.w	ip, #10
 8007c2a:	9a07      	ldr	r2, [sp, #28]
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c32:	3b30      	subs	r3, #48	; 0x30
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	d94e      	bls.n	8007cd6 <_svfiprintf_r+0x17e>
 8007c38:	b1b0      	cbz	r0, 8007c68 <_svfiprintf_r+0x110>
 8007c3a:	9207      	str	r2, [sp, #28]
 8007c3c:	e014      	b.n	8007c68 <_svfiprintf_r+0x110>
 8007c3e:	eba0 0308 	sub.w	r3, r0, r8
 8007c42:	fa09 f303 	lsl.w	r3, r9, r3
 8007c46:	4313      	orrs	r3, r2
 8007c48:	46a2      	mov	sl, r4
 8007c4a:	9304      	str	r3, [sp, #16]
 8007c4c:	e7d2      	b.n	8007bf4 <_svfiprintf_r+0x9c>
 8007c4e:	9b03      	ldr	r3, [sp, #12]
 8007c50:	1d19      	adds	r1, r3, #4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	9103      	str	r1, [sp, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	bfbb      	ittet	lt
 8007c5a:	425b      	neglt	r3, r3
 8007c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c60:	9307      	strge	r3, [sp, #28]
 8007c62:	9307      	strlt	r3, [sp, #28]
 8007c64:	bfb8      	it	lt
 8007c66:	9204      	strlt	r2, [sp, #16]
 8007c68:	7823      	ldrb	r3, [r4, #0]
 8007c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c6c:	d10c      	bne.n	8007c88 <_svfiprintf_r+0x130>
 8007c6e:	7863      	ldrb	r3, [r4, #1]
 8007c70:	2b2a      	cmp	r3, #42	; 0x2a
 8007c72:	d135      	bne.n	8007ce0 <_svfiprintf_r+0x188>
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	3402      	adds	r4, #2
 8007c78:	1d1a      	adds	r2, r3, #4
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	9203      	str	r2, [sp, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bfb8      	it	lt
 8007c82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c86:	9305      	str	r3, [sp, #20]
 8007c88:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007d48 <_svfiprintf_r+0x1f0>
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	4650      	mov	r0, sl
 8007c90:	7821      	ldrb	r1, [r4, #0]
 8007c92:	f7ff fa77 	bl	8007184 <memchr>
 8007c96:	b140      	cbz	r0, 8007caa <_svfiprintf_r+0x152>
 8007c98:	2340      	movs	r3, #64	; 0x40
 8007c9a:	eba0 000a 	sub.w	r0, r0, sl
 8007c9e:	fa03 f000 	lsl.w	r0, r3, r0
 8007ca2:	9b04      	ldr	r3, [sp, #16]
 8007ca4:	3401      	adds	r4, #1
 8007ca6:	4303      	orrs	r3, r0
 8007ca8:	9304      	str	r3, [sp, #16]
 8007caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cae:	2206      	movs	r2, #6
 8007cb0:	4826      	ldr	r0, [pc, #152]	; (8007d4c <_svfiprintf_r+0x1f4>)
 8007cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cb6:	f7ff fa65 	bl	8007184 <memchr>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d038      	beq.n	8007d30 <_svfiprintf_r+0x1d8>
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <_svfiprintf_r+0x1f8>)
 8007cc0:	bb1b      	cbnz	r3, 8007d0a <_svfiprintf_r+0x1b2>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	3307      	adds	r3, #7
 8007cc6:	f023 0307 	bic.w	r3, r3, #7
 8007cca:	3308      	adds	r3, #8
 8007ccc:	9303      	str	r3, [sp, #12]
 8007cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd0:	4433      	add	r3, r6
 8007cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd4:	e767      	b.n	8007ba6 <_svfiprintf_r+0x4e>
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	2001      	movs	r0, #1
 8007cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cde:	e7a5      	b.n	8007c2c <_svfiprintf_r+0xd4>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f04f 0c0a 	mov.w	ip, #10
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	3401      	adds	r4, #1
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	4620      	mov	r0, r4
 8007cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf2:	3a30      	subs	r2, #48	; 0x30
 8007cf4:	2a09      	cmp	r2, #9
 8007cf6:	d903      	bls.n	8007d00 <_svfiprintf_r+0x1a8>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0c5      	beq.n	8007c88 <_svfiprintf_r+0x130>
 8007cfc:	9105      	str	r1, [sp, #20]
 8007cfe:	e7c3      	b.n	8007c88 <_svfiprintf_r+0x130>
 8007d00:	4604      	mov	r4, r0
 8007d02:	2301      	movs	r3, #1
 8007d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d08:	e7f0      	b.n	8007cec <_svfiprintf_r+0x194>
 8007d0a:	ab03      	add	r3, sp, #12
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	462a      	mov	r2, r5
 8007d10:	4638      	mov	r0, r7
 8007d12:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <_svfiprintf_r+0x1fc>)
 8007d14:	a904      	add	r1, sp, #16
 8007d16:	f7fd ffcd 	bl	8005cb4 <_printf_float>
 8007d1a:	1c42      	adds	r2, r0, #1
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	d1d6      	bne.n	8007cce <_svfiprintf_r+0x176>
 8007d20:	89ab      	ldrh	r3, [r5, #12]
 8007d22:	065b      	lsls	r3, r3, #25
 8007d24:	f53f af2c 	bmi.w	8007b80 <_svfiprintf_r+0x28>
 8007d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d2a:	b01d      	add	sp, #116	; 0x74
 8007d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d30:	ab03      	add	r3, sp, #12
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	462a      	mov	r2, r5
 8007d36:	4638      	mov	r0, r7
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <_svfiprintf_r+0x1fc>)
 8007d3a:	a904      	add	r1, sp, #16
 8007d3c:	f7fe fa56 	bl	80061ec <_printf_i>
 8007d40:	e7eb      	b.n	8007d1a <_svfiprintf_r+0x1c2>
 8007d42:	bf00      	nop
 8007d44:	08009244 	.word	0x08009244
 8007d48:	0800924a 	.word	0x0800924a
 8007d4c:	0800924e 	.word	0x0800924e
 8007d50:	08005cb5 	.word	0x08005cb5
 8007d54:	08007aa1 	.word	0x08007aa1

08007d58 <_sbrk_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	4d05      	ldr	r5, [pc, #20]	; (8007d74 <_sbrk_r+0x1c>)
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	f7fb f830 	bl	8002dc8 <_sbrk>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_sbrk_r+0x1a>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_sbrk_r+0x1a>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	20000438 	.word	0x20000438

08007d78 <__assert_func>:
 8007d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <__assert_func+0x2c>)
 8007d80:	4605      	mov	r5, r0
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68d8      	ldr	r0, [r3, #12]
 8007d86:	b14c      	cbz	r4, 8007d9c <__assert_func+0x24>
 8007d88:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <__assert_func+0x30>)
 8007d8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d8e:	9100      	str	r1, [sp, #0]
 8007d90:	462b      	mov	r3, r5
 8007d92:	4906      	ldr	r1, [pc, #24]	; (8007dac <__assert_func+0x34>)
 8007d94:	f000 f80e 	bl	8007db4 <fiprintf>
 8007d98:	f000 faaa 	bl	80082f0 <abort>
 8007d9c:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <__assert_func+0x38>)
 8007d9e:	461c      	mov	r4, r3
 8007da0:	e7f3      	b.n	8007d8a <__assert_func+0x12>
 8007da2:	bf00      	nop
 8007da4:	20000014 	.word	0x20000014
 8007da8:	08009255 	.word	0x08009255
 8007dac:	08009262 	.word	0x08009262
 8007db0:	08009290 	.word	0x08009290

08007db4 <fiprintf>:
 8007db4:	b40e      	push	{r1, r2, r3}
 8007db6:	b503      	push	{r0, r1, lr}
 8007db8:	4601      	mov	r1, r0
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	4805      	ldr	r0, [pc, #20]	; (8007dd4 <fiprintf+0x20>)
 8007dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc2:	6800      	ldr	r0, [r0, #0]
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	f000 f895 	bl	8007ef4 <_vfiprintf_r>
 8007dca:	b002      	add	sp, #8
 8007dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd0:	b003      	add	sp, #12
 8007dd2:	4770      	bx	lr
 8007dd4:	20000014 	.word	0x20000014

08007dd8 <__ascii_mbtowc>:
 8007dd8:	b082      	sub	sp, #8
 8007dda:	b901      	cbnz	r1, 8007dde <__ascii_mbtowc+0x6>
 8007ddc:	a901      	add	r1, sp, #4
 8007dde:	b142      	cbz	r2, 8007df2 <__ascii_mbtowc+0x1a>
 8007de0:	b14b      	cbz	r3, 8007df6 <__ascii_mbtowc+0x1e>
 8007de2:	7813      	ldrb	r3, [r2, #0]
 8007de4:	600b      	str	r3, [r1, #0]
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	1e10      	subs	r0, r2, #0
 8007dea:	bf18      	it	ne
 8007dec:	2001      	movne	r0, #1
 8007dee:	b002      	add	sp, #8
 8007df0:	4770      	bx	lr
 8007df2:	4610      	mov	r0, r2
 8007df4:	e7fb      	b.n	8007dee <__ascii_mbtowc+0x16>
 8007df6:	f06f 0001 	mvn.w	r0, #1
 8007dfa:	e7f8      	b.n	8007dee <__ascii_mbtowc+0x16>

08007dfc <memmove>:
 8007dfc:	4288      	cmp	r0, r1
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	eb01 0402 	add.w	r4, r1, r2
 8007e04:	d902      	bls.n	8007e0c <memmove+0x10>
 8007e06:	4284      	cmp	r4, r0
 8007e08:	4623      	mov	r3, r4
 8007e0a:	d807      	bhi.n	8007e1c <memmove+0x20>
 8007e0c:	1e43      	subs	r3, r0, #1
 8007e0e:	42a1      	cmp	r1, r4
 8007e10:	d008      	beq.n	8007e24 <memmove+0x28>
 8007e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e1a:	e7f8      	b.n	8007e0e <memmove+0x12>
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	4402      	add	r2, r0
 8007e20:	428a      	cmp	r2, r1
 8007e22:	d100      	bne.n	8007e26 <memmove+0x2a>
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e2e:	e7f7      	b.n	8007e20 <memmove+0x24>

08007e30 <__malloc_lock>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__malloc_lock+0x8>)
 8007e32:	f000 bc19 	b.w	8008668 <__retarget_lock_acquire_recursive>
 8007e36:	bf00      	nop
 8007e38:	2000043c 	.word	0x2000043c

08007e3c <__malloc_unlock>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	; (8007e44 <__malloc_unlock+0x8>)
 8007e3e:	f000 bc14 	b.w	800866a <__retarget_lock_release_recursive>
 8007e42:	bf00      	nop
 8007e44:	2000043c 	.word	0x2000043c

08007e48 <_realloc_r>:
 8007e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	4614      	mov	r4, r2
 8007e50:	460e      	mov	r6, r1
 8007e52:	b921      	cbnz	r1, 8007e5e <_realloc_r+0x16>
 8007e54:	4611      	mov	r1, r2
 8007e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5a:	f7ff bdad 	b.w	80079b8 <_malloc_r>
 8007e5e:	b92a      	cbnz	r2, 8007e6c <_realloc_r+0x24>
 8007e60:	f7ff fd42 	bl	80078e8 <_free_r>
 8007e64:	4625      	mov	r5, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e6c:	f000 fc64 	bl	8008738 <_malloc_usable_size_r>
 8007e70:	4284      	cmp	r4, r0
 8007e72:	4607      	mov	r7, r0
 8007e74:	d802      	bhi.n	8007e7c <_realloc_r+0x34>
 8007e76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e7a:	d812      	bhi.n	8007ea2 <_realloc_r+0x5a>
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f7ff fd9a 	bl	80079b8 <_malloc_r>
 8007e84:	4605      	mov	r5, r0
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d0ed      	beq.n	8007e66 <_realloc_r+0x1e>
 8007e8a:	42bc      	cmp	r4, r7
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4631      	mov	r1, r6
 8007e90:	bf28      	it	cs
 8007e92:	463a      	movcs	r2, r7
 8007e94:	f7ff f984 	bl	80071a0 <memcpy>
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	f7ff fd24 	bl	80078e8 <_free_r>
 8007ea0:	e7e1      	b.n	8007e66 <_realloc_r+0x1e>
 8007ea2:	4635      	mov	r5, r6
 8007ea4:	e7df      	b.n	8007e66 <_realloc_r+0x1e>

08007ea6 <__sfputc_r>:
 8007ea6:	6893      	ldr	r3, [r2, #8]
 8007ea8:	b410      	push	{r4}
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	6093      	str	r3, [r2, #8]
 8007eb0:	da07      	bge.n	8007ec2 <__sfputc_r+0x1c>
 8007eb2:	6994      	ldr	r4, [r2, #24]
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	db01      	blt.n	8007ebc <__sfputc_r+0x16>
 8007eb8:	290a      	cmp	r1, #10
 8007eba:	d102      	bne.n	8007ec2 <__sfputc_r+0x1c>
 8007ebc:	bc10      	pop	{r4}
 8007ebe:	f000 b949 	b.w	8008154 <__swbuf_r>
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	1c58      	adds	r0, r3, #1
 8007ec6:	6010      	str	r0, [r2, #0]
 8007ec8:	7019      	strb	r1, [r3, #0]
 8007eca:	4608      	mov	r0, r1
 8007ecc:	bc10      	pop	{r4}
 8007ece:	4770      	bx	lr

08007ed0 <__sfputs_r>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	4614      	mov	r4, r2
 8007ed8:	18d5      	adds	r5, r2, r3
 8007eda:	42ac      	cmp	r4, r5
 8007edc:	d101      	bne.n	8007ee2 <__sfputs_r+0x12>
 8007ede:	2000      	movs	r0, #0
 8007ee0:	e007      	b.n	8007ef2 <__sfputs_r+0x22>
 8007ee2:	463a      	mov	r2, r7
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eea:	f7ff ffdc 	bl	8007ea6 <__sfputc_r>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	d1f3      	bne.n	8007eda <__sfputs_r+0xa>
 8007ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ef4 <_vfiprintf_r>:
 8007ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef8:	460d      	mov	r5, r1
 8007efa:	4614      	mov	r4, r2
 8007efc:	4698      	mov	r8, r3
 8007efe:	4606      	mov	r6, r0
 8007f00:	b09d      	sub	sp, #116	; 0x74
 8007f02:	b118      	cbz	r0, 8007f0c <_vfiprintf_r+0x18>
 8007f04:	6983      	ldr	r3, [r0, #24]
 8007f06:	b90b      	cbnz	r3, 8007f0c <_vfiprintf_r+0x18>
 8007f08:	f000 fb10 	bl	800852c <__sinit>
 8007f0c:	4b89      	ldr	r3, [pc, #548]	; (8008134 <_vfiprintf_r+0x240>)
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	d11b      	bne.n	8007f4a <_vfiprintf_r+0x56>
 8007f12:	6875      	ldr	r5, [r6, #4]
 8007f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f16:	07d9      	lsls	r1, r3, #31
 8007f18:	d405      	bmi.n	8007f26 <_vfiprintf_r+0x32>
 8007f1a:	89ab      	ldrh	r3, [r5, #12]
 8007f1c:	059a      	lsls	r2, r3, #22
 8007f1e:	d402      	bmi.n	8007f26 <_vfiprintf_r+0x32>
 8007f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f22:	f000 fba1 	bl	8008668 <__retarget_lock_acquire_recursive>
 8007f26:	89ab      	ldrh	r3, [r5, #12]
 8007f28:	071b      	lsls	r3, r3, #28
 8007f2a:	d501      	bpl.n	8007f30 <_vfiprintf_r+0x3c>
 8007f2c:	692b      	ldr	r3, [r5, #16]
 8007f2e:	b9eb      	cbnz	r3, 8007f6c <_vfiprintf_r+0x78>
 8007f30:	4629      	mov	r1, r5
 8007f32:	4630      	mov	r0, r6
 8007f34:	f000 f96e 	bl	8008214 <__swsetup_r>
 8007f38:	b1c0      	cbz	r0, 8007f6c <_vfiprintf_r+0x78>
 8007f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f3c:	07dc      	lsls	r4, r3, #31
 8007f3e:	d50e      	bpl.n	8007f5e <_vfiprintf_r+0x6a>
 8007f40:	f04f 30ff 	mov.w	r0, #4294967295
 8007f44:	b01d      	add	sp, #116	; 0x74
 8007f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4a:	4b7b      	ldr	r3, [pc, #492]	; (8008138 <_vfiprintf_r+0x244>)
 8007f4c:	429d      	cmp	r5, r3
 8007f4e:	d101      	bne.n	8007f54 <_vfiprintf_r+0x60>
 8007f50:	68b5      	ldr	r5, [r6, #8]
 8007f52:	e7df      	b.n	8007f14 <_vfiprintf_r+0x20>
 8007f54:	4b79      	ldr	r3, [pc, #484]	; (800813c <_vfiprintf_r+0x248>)
 8007f56:	429d      	cmp	r5, r3
 8007f58:	bf08      	it	eq
 8007f5a:	68f5      	ldreq	r5, [r6, #12]
 8007f5c:	e7da      	b.n	8007f14 <_vfiprintf_r+0x20>
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	0598      	lsls	r0, r3, #22
 8007f62:	d4ed      	bmi.n	8007f40 <_vfiprintf_r+0x4c>
 8007f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f66:	f000 fb80 	bl	800866a <__retarget_lock_release_recursive>
 8007f6a:	e7e9      	b.n	8007f40 <_vfiprintf_r+0x4c>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f70:	2320      	movs	r3, #32
 8007f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f76:	2330      	movs	r3, #48	; 0x30
 8007f78:	f04f 0901 	mov.w	r9, #1
 8007f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008140 <_vfiprintf_r+0x24c>
 8007f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f88:	4623      	mov	r3, r4
 8007f8a:	469a      	mov	sl, r3
 8007f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f90:	b10a      	cbz	r2, 8007f96 <_vfiprintf_r+0xa2>
 8007f92:	2a25      	cmp	r2, #37	; 0x25
 8007f94:	d1f9      	bne.n	8007f8a <_vfiprintf_r+0x96>
 8007f96:	ebba 0b04 	subs.w	fp, sl, r4
 8007f9a:	d00b      	beq.n	8007fb4 <_vfiprintf_r+0xc0>
 8007f9c:	465b      	mov	r3, fp
 8007f9e:	4622      	mov	r2, r4
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ff94 	bl	8007ed0 <__sfputs_r>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	f000 80aa 	beq.w	8008102 <_vfiprintf_r+0x20e>
 8007fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fb0:	445a      	add	r2, fp
 8007fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80a2 	beq.w	8008102 <_vfiprintf_r+0x20e>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc8:	f10a 0a01 	add.w	sl, sl, #1
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	9307      	str	r3, [sp, #28]
 8007fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8007fd6:	4654      	mov	r4, sl
 8007fd8:	2205      	movs	r2, #5
 8007fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fde:	4858      	ldr	r0, [pc, #352]	; (8008140 <_vfiprintf_r+0x24c>)
 8007fe0:	f7ff f8d0 	bl	8007184 <memchr>
 8007fe4:	9a04      	ldr	r2, [sp, #16]
 8007fe6:	b9d8      	cbnz	r0, 8008020 <_vfiprintf_r+0x12c>
 8007fe8:	06d1      	lsls	r1, r2, #27
 8007fea:	bf44      	itt	mi
 8007fec:	2320      	movmi	r3, #32
 8007fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff2:	0713      	lsls	r3, r2, #28
 8007ff4:	bf44      	itt	mi
 8007ff6:	232b      	movmi	r3, #43	; 0x2b
 8007ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8008000:	2b2a      	cmp	r3, #42	; 0x2a
 8008002:	d015      	beq.n	8008030 <_vfiprintf_r+0x13c>
 8008004:	4654      	mov	r4, sl
 8008006:	2000      	movs	r0, #0
 8008008:	f04f 0c0a 	mov.w	ip, #10
 800800c:	9a07      	ldr	r2, [sp, #28]
 800800e:	4621      	mov	r1, r4
 8008010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008014:	3b30      	subs	r3, #48	; 0x30
 8008016:	2b09      	cmp	r3, #9
 8008018:	d94e      	bls.n	80080b8 <_vfiprintf_r+0x1c4>
 800801a:	b1b0      	cbz	r0, 800804a <_vfiprintf_r+0x156>
 800801c:	9207      	str	r2, [sp, #28]
 800801e:	e014      	b.n	800804a <_vfiprintf_r+0x156>
 8008020:	eba0 0308 	sub.w	r3, r0, r8
 8008024:	fa09 f303 	lsl.w	r3, r9, r3
 8008028:	4313      	orrs	r3, r2
 800802a:	46a2      	mov	sl, r4
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	e7d2      	b.n	8007fd6 <_vfiprintf_r+0xe2>
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	1d19      	adds	r1, r3, #4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	9103      	str	r1, [sp, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	bfbb      	ittet	lt
 800803c:	425b      	neglt	r3, r3
 800803e:	f042 0202 	orrlt.w	r2, r2, #2
 8008042:	9307      	strge	r3, [sp, #28]
 8008044:	9307      	strlt	r3, [sp, #28]
 8008046:	bfb8      	it	lt
 8008048:	9204      	strlt	r2, [sp, #16]
 800804a:	7823      	ldrb	r3, [r4, #0]
 800804c:	2b2e      	cmp	r3, #46	; 0x2e
 800804e:	d10c      	bne.n	800806a <_vfiprintf_r+0x176>
 8008050:	7863      	ldrb	r3, [r4, #1]
 8008052:	2b2a      	cmp	r3, #42	; 0x2a
 8008054:	d135      	bne.n	80080c2 <_vfiprintf_r+0x1ce>
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	3402      	adds	r4, #2
 800805a:	1d1a      	adds	r2, r3, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	9203      	str	r2, [sp, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	bfb8      	it	lt
 8008064:	f04f 33ff 	movlt.w	r3, #4294967295
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008144 <_vfiprintf_r+0x250>
 800806e:	2203      	movs	r2, #3
 8008070:	4650      	mov	r0, sl
 8008072:	7821      	ldrb	r1, [r4, #0]
 8008074:	f7ff f886 	bl	8007184 <memchr>
 8008078:	b140      	cbz	r0, 800808c <_vfiprintf_r+0x198>
 800807a:	2340      	movs	r3, #64	; 0x40
 800807c:	eba0 000a 	sub.w	r0, r0, sl
 8008080:	fa03 f000 	lsl.w	r0, r3, r0
 8008084:	9b04      	ldr	r3, [sp, #16]
 8008086:	3401      	adds	r4, #1
 8008088:	4303      	orrs	r3, r0
 800808a:	9304      	str	r3, [sp, #16]
 800808c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008090:	2206      	movs	r2, #6
 8008092:	482d      	ldr	r0, [pc, #180]	; (8008148 <_vfiprintf_r+0x254>)
 8008094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008098:	f7ff f874 	bl	8007184 <memchr>
 800809c:	2800      	cmp	r0, #0
 800809e:	d03f      	beq.n	8008120 <_vfiprintf_r+0x22c>
 80080a0:	4b2a      	ldr	r3, [pc, #168]	; (800814c <_vfiprintf_r+0x258>)
 80080a2:	bb1b      	cbnz	r3, 80080ec <_vfiprintf_r+0x1f8>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	3307      	adds	r3, #7
 80080a8:	f023 0307 	bic.w	r3, r3, #7
 80080ac:	3308      	adds	r3, #8
 80080ae:	9303      	str	r3, [sp, #12]
 80080b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b2:	443b      	add	r3, r7
 80080b4:	9309      	str	r3, [sp, #36]	; 0x24
 80080b6:	e767      	b.n	8007f88 <_vfiprintf_r+0x94>
 80080b8:	460c      	mov	r4, r1
 80080ba:	2001      	movs	r0, #1
 80080bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80080c0:	e7a5      	b.n	800800e <_vfiprintf_r+0x11a>
 80080c2:	2300      	movs	r3, #0
 80080c4:	f04f 0c0a 	mov.w	ip, #10
 80080c8:	4619      	mov	r1, r3
 80080ca:	3401      	adds	r4, #1
 80080cc:	9305      	str	r3, [sp, #20]
 80080ce:	4620      	mov	r0, r4
 80080d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d4:	3a30      	subs	r2, #48	; 0x30
 80080d6:	2a09      	cmp	r2, #9
 80080d8:	d903      	bls.n	80080e2 <_vfiprintf_r+0x1ee>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0c5      	beq.n	800806a <_vfiprintf_r+0x176>
 80080de:	9105      	str	r1, [sp, #20]
 80080e0:	e7c3      	b.n	800806a <_vfiprintf_r+0x176>
 80080e2:	4604      	mov	r4, r0
 80080e4:	2301      	movs	r3, #1
 80080e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ea:	e7f0      	b.n	80080ce <_vfiprintf_r+0x1da>
 80080ec:	ab03      	add	r3, sp, #12
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	462a      	mov	r2, r5
 80080f2:	4630      	mov	r0, r6
 80080f4:	4b16      	ldr	r3, [pc, #88]	; (8008150 <_vfiprintf_r+0x25c>)
 80080f6:	a904      	add	r1, sp, #16
 80080f8:	f7fd fddc 	bl	8005cb4 <_printf_float>
 80080fc:	4607      	mov	r7, r0
 80080fe:	1c78      	adds	r0, r7, #1
 8008100:	d1d6      	bne.n	80080b0 <_vfiprintf_r+0x1bc>
 8008102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008104:	07d9      	lsls	r1, r3, #31
 8008106:	d405      	bmi.n	8008114 <_vfiprintf_r+0x220>
 8008108:	89ab      	ldrh	r3, [r5, #12]
 800810a:	059a      	lsls	r2, r3, #22
 800810c:	d402      	bmi.n	8008114 <_vfiprintf_r+0x220>
 800810e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008110:	f000 faab 	bl	800866a <__retarget_lock_release_recursive>
 8008114:	89ab      	ldrh	r3, [r5, #12]
 8008116:	065b      	lsls	r3, r3, #25
 8008118:	f53f af12 	bmi.w	8007f40 <_vfiprintf_r+0x4c>
 800811c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800811e:	e711      	b.n	8007f44 <_vfiprintf_r+0x50>
 8008120:	ab03      	add	r3, sp, #12
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	462a      	mov	r2, r5
 8008126:	4630      	mov	r0, r6
 8008128:	4b09      	ldr	r3, [pc, #36]	; (8008150 <_vfiprintf_r+0x25c>)
 800812a:	a904      	add	r1, sp, #16
 800812c:	f7fe f85e 	bl	80061ec <_printf_i>
 8008130:	e7e4      	b.n	80080fc <_vfiprintf_r+0x208>
 8008132:	bf00      	nop
 8008134:	080093bc 	.word	0x080093bc
 8008138:	080093dc 	.word	0x080093dc
 800813c:	0800939c 	.word	0x0800939c
 8008140:	08009244 	.word	0x08009244
 8008144:	0800924a 	.word	0x0800924a
 8008148:	0800924e 	.word	0x0800924e
 800814c:	08005cb5 	.word	0x08005cb5
 8008150:	08007ed1 	.word	0x08007ed1

08008154 <__swbuf_r>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	460e      	mov	r6, r1
 8008158:	4614      	mov	r4, r2
 800815a:	4605      	mov	r5, r0
 800815c:	b118      	cbz	r0, 8008166 <__swbuf_r+0x12>
 800815e:	6983      	ldr	r3, [r0, #24]
 8008160:	b90b      	cbnz	r3, 8008166 <__swbuf_r+0x12>
 8008162:	f000 f9e3 	bl	800852c <__sinit>
 8008166:	4b21      	ldr	r3, [pc, #132]	; (80081ec <__swbuf_r+0x98>)
 8008168:	429c      	cmp	r4, r3
 800816a:	d12b      	bne.n	80081c4 <__swbuf_r+0x70>
 800816c:	686c      	ldr	r4, [r5, #4]
 800816e:	69a3      	ldr	r3, [r4, #24]
 8008170:	60a3      	str	r3, [r4, #8]
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	071a      	lsls	r2, r3, #28
 8008176:	d52f      	bpl.n	80081d8 <__swbuf_r+0x84>
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	b36b      	cbz	r3, 80081d8 <__swbuf_r+0x84>
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	6820      	ldr	r0, [r4, #0]
 8008180:	b2f6      	uxtb	r6, r6
 8008182:	1ac0      	subs	r0, r0, r3
 8008184:	6963      	ldr	r3, [r4, #20]
 8008186:	4637      	mov	r7, r6
 8008188:	4283      	cmp	r3, r0
 800818a:	dc04      	bgt.n	8008196 <__swbuf_r+0x42>
 800818c:	4621      	mov	r1, r4
 800818e:	4628      	mov	r0, r5
 8008190:	f000 f938 	bl	8008404 <_fflush_r>
 8008194:	bb30      	cbnz	r0, 80081e4 <__swbuf_r+0x90>
 8008196:	68a3      	ldr	r3, [r4, #8]
 8008198:	3001      	adds	r0, #1
 800819a:	3b01      	subs	r3, #1
 800819c:	60a3      	str	r3, [r4, #8]
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	701e      	strb	r6, [r3, #0]
 80081a6:	6963      	ldr	r3, [r4, #20]
 80081a8:	4283      	cmp	r3, r0
 80081aa:	d004      	beq.n	80081b6 <__swbuf_r+0x62>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	07db      	lsls	r3, r3, #31
 80081b0:	d506      	bpl.n	80081c0 <__swbuf_r+0x6c>
 80081b2:	2e0a      	cmp	r6, #10
 80081b4:	d104      	bne.n	80081c0 <__swbuf_r+0x6c>
 80081b6:	4621      	mov	r1, r4
 80081b8:	4628      	mov	r0, r5
 80081ba:	f000 f923 	bl	8008404 <_fflush_r>
 80081be:	b988      	cbnz	r0, 80081e4 <__swbuf_r+0x90>
 80081c0:	4638      	mov	r0, r7
 80081c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c4:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <__swbuf_r+0x9c>)
 80081c6:	429c      	cmp	r4, r3
 80081c8:	d101      	bne.n	80081ce <__swbuf_r+0x7a>
 80081ca:	68ac      	ldr	r4, [r5, #8]
 80081cc:	e7cf      	b.n	800816e <__swbuf_r+0x1a>
 80081ce:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <__swbuf_r+0xa0>)
 80081d0:	429c      	cmp	r4, r3
 80081d2:	bf08      	it	eq
 80081d4:	68ec      	ldreq	r4, [r5, #12]
 80081d6:	e7ca      	b.n	800816e <__swbuf_r+0x1a>
 80081d8:	4621      	mov	r1, r4
 80081da:	4628      	mov	r0, r5
 80081dc:	f000 f81a 	bl	8008214 <__swsetup_r>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d0cb      	beq.n	800817c <__swbuf_r+0x28>
 80081e4:	f04f 37ff 	mov.w	r7, #4294967295
 80081e8:	e7ea      	b.n	80081c0 <__swbuf_r+0x6c>
 80081ea:	bf00      	nop
 80081ec:	080093bc 	.word	0x080093bc
 80081f0:	080093dc 	.word	0x080093dc
 80081f4:	0800939c 	.word	0x0800939c

080081f8 <__ascii_wctomb>:
 80081f8:	4603      	mov	r3, r0
 80081fa:	4608      	mov	r0, r1
 80081fc:	b141      	cbz	r1, 8008210 <__ascii_wctomb+0x18>
 80081fe:	2aff      	cmp	r2, #255	; 0xff
 8008200:	d904      	bls.n	800820c <__ascii_wctomb+0x14>
 8008202:	228a      	movs	r2, #138	; 0x8a
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	4770      	bx	lr
 800820c:	2001      	movs	r0, #1
 800820e:	700a      	strb	r2, [r1, #0]
 8008210:	4770      	bx	lr
	...

08008214 <__swsetup_r>:
 8008214:	4b32      	ldr	r3, [pc, #200]	; (80082e0 <__swsetup_r+0xcc>)
 8008216:	b570      	push	{r4, r5, r6, lr}
 8008218:	681d      	ldr	r5, [r3, #0]
 800821a:	4606      	mov	r6, r0
 800821c:	460c      	mov	r4, r1
 800821e:	b125      	cbz	r5, 800822a <__swsetup_r+0x16>
 8008220:	69ab      	ldr	r3, [r5, #24]
 8008222:	b913      	cbnz	r3, 800822a <__swsetup_r+0x16>
 8008224:	4628      	mov	r0, r5
 8008226:	f000 f981 	bl	800852c <__sinit>
 800822a:	4b2e      	ldr	r3, [pc, #184]	; (80082e4 <__swsetup_r+0xd0>)
 800822c:	429c      	cmp	r4, r3
 800822e:	d10f      	bne.n	8008250 <__swsetup_r+0x3c>
 8008230:	686c      	ldr	r4, [r5, #4]
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008238:	0719      	lsls	r1, r3, #28
 800823a:	d42c      	bmi.n	8008296 <__swsetup_r+0x82>
 800823c:	06dd      	lsls	r5, r3, #27
 800823e:	d411      	bmi.n	8008264 <__swsetup_r+0x50>
 8008240:	2309      	movs	r3, #9
 8008242:	6033      	str	r3, [r6, #0]
 8008244:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	e03e      	b.n	80082ce <__swsetup_r+0xba>
 8008250:	4b25      	ldr	r3, [pc, #148]	; (80082e8 <__swsetup_r+0xd4>)
 8008252:	429c      	cmp	r4, r3
 8008254:	d101      	bne.n	800825a <__swsetup_r+0x46>
 8008256:	68ac      	ldr	r4, [r5, #8]
 8008258:	e7eb      	b.n	8008232 <__swsetup_r+0x1e>
 800825a:	4b24      	ldr	r3, [pc, #144]	; (80082ec <__swsetup_r+0xd8>)
 800825c:	429c      	cmp	r4, r3
 800825e:	bf08      	it	eq
 8008260:	68ec      	ldreq	r4, [r5, #12]
 8008262:	e7e6      	b.n	8008232 <__swsetup_r+0x1e>
 8008264:	0758      	lsls	r0, r3, #29
 8008266:	d512      	bpl.n	800828e <__swsetup_r+0x7a>
 8008268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800826a:	b141      	cbz	r1, 800827e <__swsetup_r+0x6a>
 800826c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008270:	4299      	cmp	r1, r3
 8008272:	d002      	beq.n	800827a <__swsetup_r+0x66>
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff fb37 	bl	80078e8 <_free_r>
 800827a:	2300      	movs	r3, #0
 800827c:	6363      	str	r3, [r4, #52]	; 0x34
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008284:	81a3      	strh	r3, [r4, #12]
 8008286:	2300      	movs	r3, #0
 8008288:	6063      	str	r3, [r4, #4]
 800828a:	6923      	ldr	r3, [r4, #16]
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	f043 0308 	orr.w	r3, r3, #8
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	6923      	ldr	r3, [r4, #16]
 8008298:	b94b      	cbnz	r3, 80082ae <__swsetup_r+0x9a>
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a4:	d003      	beq.n	80082ae <__swsetup_r+0x9a>
 80082a6:	4621      	mov	r1, r4
 80082a8:	4630      	mov	r0, r6
 80082aa:	f000 fa05 	bl	80086b8 <__smakebuf_r>
 80082ae:	89a0      	ldrh	r0, [r4, #12]
 80082b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082b4:	f010 0301 	ands.w	r3, r0, #1
 80082b8:	d00a      	beq.n	80082d0 <__swsetup_r+0xbc>
 80082ba:	2300      	movs	r3, #0
 80082bc:	60a3      	str	r3, [r4, #8]
 80082be:	6963      	ldr	r3, [r4, #20]
 80082c0:	425b      	negs	r3, r3
 80082c2:	61a3      	str	r3, [r4, #24]
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	b943      	cbnz	r3, 80082da <__swsetup_r+0xc6>
 80082c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082cc:	d1ba      	bne.n	8008244 <__swsetup_r+0x30>
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	0781      	lsls	r1, r0, #30
 80082d2:	bf58      	it	pl
 80082d4:	6963      	ldrpl	r3, [r4, #20]
 80082d6:	60a3      	str	r3, [r4, #8]
 80082d8:	e7f4      	b.n	80082c4 <__swsetup_r+0xb0>
 80082da:	2000      	movs	r0, #0
 80082dc:	e7f7      	b.n	80082ce <__swsetup_r+0xba>
 80082de:	bf00      	nop
 80082e0:	20000014 	.word	0x20000014
 80082e4:	080093bc 	.word	0x080093bc
 80082e8:	080093dc 	.word	0x080093dc
 80082ec:	0800939c 	.word	0x0800939c

080082f0 <abort>:
 80082f0:	2006      	movs	r0, #6
 80082f2:	b508      	push	{r3, lr}
 80082f4:	f000 fa50 	bl	8008798 <raise>
 80082f8:	2001      	movs	r0, #1
 80082fa:	f7fa fcf2 	bl	8002ce2 <_exit>
	...

08008300 <__sflush_r>:
 8008300:	898a      	ldrh	r2, [r1, #12]
 8008302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008304:	4605      	mov	r5, r0
 8008306:	0710      	lsls	r0, r2, #28
 8008308:	460c      	mov	r4, r1
 800830a:	d457      	bmi.n	80083bc <__sflush_r+0xbc>
 800830c:	684b      	ldr	r3, [r1, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	dc04      	bgt.n	800831c <__sflush_r+0x1c>
 8008312:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008314:	2b00      	cmp	r3, #0
 8008316:	dc01      	bgt.n	800831c <__sflush_r+0x1c>
 8008318:	2000      	movs	r0, #0
 800831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800831e:	2e00      	cmp	r6, #0
 8008320:	d0fa      	beq.n	8008318 <__sflush_r+0x18>
 8008322:	2300      	movs	r3, #0
 8008324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008328:	682f      	ldr	r7, [r5, #0]
 800832a:	602b      	str	r3, [r5, #0]
 800832c:	d032      	beq.n	8008394 <__sflush_r+0x94>
 800832e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	075a      	lsls	r2, r3, #29
 8008334:	d505      	bpl.n	8008342 <__sflush_r+0x42>
 8008336:	6863      	ldr	r3, [r4, #4]
 8008338:	1ac0      	subs	r0, r0, r3
 800833a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800833c:	b10b      	cbz	r3, 8008342 <__sflush_r+0x42>
 800833e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008340:	1ac0      	subs	r0, r0, r3
 8008342:	2300      	movs	r3, #0
 8008344:	4602      	mov	r2, r0
 8008346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008348:	4628      	mov	r0, r5
 800834a:	6a21      	ldr	r1, [r4, #32]
 800834c:	47b0      	blx	r6
 800834e:	1c43      	adds	r3, r0, #1
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	d106      	bne.n	8008362 <__sflush_r+0x62>
 8008354:	6829      	ldr	r1, [r5, #0]
 8008356:	291d      	cmp	r1, #29
 8008358:	d82c      	bhi.n	80083b4 <__sflush_r+0xb4>
 800835a:	4a29      	ldr	r2, [pc, #164]	; (8008400 <__sflush_r+0x100>)
 800835c:	40ca      	lsrs	r2, r1
 800835e:	07d6      	lsls	r6, r2, #31
 8008360:	d528      	bpl.n	80083b4 <__sflush_r+0xb4>
 8008362:	2200      	movs	r2, #0
 8008364:	6062      	str	r2, [r4, #4]
 8008366:	6922      	ldr	r2, [r4, #16]
 8008368:	04d9      	lsls	r1, r3, #19
 800836a:	6022      	str	r2, [r4, #0]
 800836c:	d504      	bpl.n	8008378 <__sflush_r+0x78>
 800836e:	1c42      	adds	r2, r0, #1
 8008370:	d101      	bne.n	8008376 <__sflush_r+0x76>
 8008372:	682b      	ldr	r3, [r5, #0]
 8008374:	b903      	cbnz	r3, 8008378 <__sflush_r+0x78>
 8008376:	6560      	str	r0, [r4, #84]	; 0x54
 8008378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800837a:	602f      	str	r7, [r5, #0]
 800837c:	2900      	cmp	r1, #0
 800837e:	d0cb      	beq.n	8008318 <__sflush_r+0x18>
 8008380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008384:	4299      	cmp	r1, r3
 8008386:	d002      	beq.n	800838e <__sflush_r+0x8e>
 8008388:	4628      	mov	r0, r5
 800838a:	f7ff faad 	bl	80078e8 <_free_r>
 800838e:	2000      	movs	r0, #0
 8008390:	6360      	str	r0, [r4, #52]	; 0x34
 8008392:	e7c2      	b.n	800831a <__sflush_r+0x1a>
 8008394:	6a21      	ldr	r1, [r4, #32]
 8008396:	2301      	movs	r3, #1
 8008398:	4628      	mov	r0, r5
 800839a:	47b0      	blx	r6
 800839c:	1c41      	adds	r1, r0, #1
 800839e:	d1c7      	bne.n	8008330 <__sflush_r+0x30>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0c4      	beq.n	8008330 <__sflush_r+0x30>
 80083a6:	2b1d      	cmp	r3, #29
 80083a8:	d001      	beq.n	80083ae <__sflush_r+0xae>
 80083aa:	2b16      	cmp	r3, #22
 80083ac:	d101      	bne.n	80083b2 <__sflush_r+0xb2>
 80083ae:	602f      	str	r7, [r5, #0]
 80083b0:	e7b2      	b.n	8008318 <__sflush_r+0x18>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	e7ae      	b.n	800831a <__sflush_r+0x1a>
 80083bc:	690f      	ldr	r7, [r1, #16]
 80083be:	2f00      	cmp	r7, #0
 80083c0:	d0aa      	beq.n	8008318 <__sflush_r+0x18>
 80083c2:	0793      	lsls	r3, r2, #30
 80083c4:	bf18      	it	ne
 80083c6:	2300      	movne	r3, #0
 80083c8:	680e      	ldr	r6, [r1, #0]
 80083ca:	bf08      	it	eq
 80083cc:	694b      	ldreq	r3, [r1, #20]
 80083ce:	1bf6      	subs	r6, r6, r7
 80083d0:	600f      	str	r7, [r1, #0]
 80083d2:	608b      	str	r3, [r1, #8]
 80083d4:	2e00      	cmp	r6, #0
 80083d6:	dd9f      	ble.n	8008318 <__sflush_r+0x18>
 80083d8:	4633      	mov	r3, r6
 80083da:	463a      	mov	r2, r7
 80083dc:	4628      	mov	r0, r5
 80083de:	6a21      	ldr	r1, [r4, #32]
 80083e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80083e4:	47e0      	blx	ip
 80083e6:	2800      	cmp	r0, #0
 80083e8:	dc06      	bgt.n	80083f8 <__sflush_r+0xf8>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	e790      	b.n	800831a <__sflush_r+0x1a>
 80083f8:	4407      	add	r7, r0
 80083fa:	1a36      	subs	r6, r6, r0
 80083fc:	e7ea      	b.n	80083d4 <__sflush_r+0xd4>
 80083fe:	bf00      	nop
 8008400:	20400001 	.word	0x20400001

08008404 <_fflush_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	690b      	ldr	r3, [r1, #16]
 8008408:	4605      	mov	r5, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b913      	cbnz	r3, 8008414 <_fflush_r+0x10>
 800840e:	2500      	movs	r5, #0
 8008410:	4628      	mov	r0, r5
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	b118      	cbz	r0, 800841e <_fflush_r+0x1a>
 8008416:	6983      	ldr	r3, [r0, #24]
 8008418:	b90b      	cbnz	r3, 800841e <_fflush_r+0x1a>
 800841a:	f000 f887 	bl	800852c <__sinit>
 800841e:	4b14      	ldr	r3, [pc, #80]	; (8008470 <_fflush_r+0x6c>)
 8008420:	429c      	cmp	r4, r3
 8008422:	d11b      	bne.n	800845c <_fflush_r+0x58>
 8008424:	686c      	ldr	r4, [r5, #4]
 8008426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0ef      	beq.n	800840e <_fflush_r+0xa>
 800842e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008430:	07d0      	lsls	r0, r2, #31
 8008432:	d404      	bmi.n	800843e <_fflush_r+0x3a>
 8008434:	0599      	lsls	r1, r3, #22
 8008436:	d402      	bmi.n	800843e <_fflush_r+0x3a>
 8008438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800843a:	f000 f915 	bl	8008668 <__retarget_lock_acquire_recursive>
 800843e:	4628      	mov	r0, r5
 8008440:	4621      	mov	r1, r4
 8008442:	f7ff ff5d 	bl	8008300 <__sflush_r>
 8008446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008448:	4605      	mov	r5, r0
 800844a:	07da      	lsls	r2, r3, #31
 800844c:	d4e0      	bmi.n	8008410 <_fflush_r+0xc>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	059b      	lsls	r3, r3, #22
 8008452:	d4dd      	bmi.n	8008410 <_fflush_r+0xc>
 8008454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008456:	f000 f908 	bl	800866a <__retarget_lock_release_recursive>
 800845a:	e7d9      	b.n	8008410 <_fflush_r+0xc>
 800845c:	4b05      	ldr	r3, [pc, #20]	; (8008474 <_fflush_r+0x70>)
 800845e:	429c      	cmp	r4, r3
 8008460:	d101      	bne.n	8008466 <_fflush_r+0x62>
 8008462:	68ac      	ldr	r4, [r5, #8]
 8008464:	e7df      	b.n	8008426 <_fflush_r+0x22>
 8008466:	4b04      	ldr	r3, [pc, #16]	; (8008478 <_fflush_r+0x74>)
 8008468:	429c      	cmp	r4, r3
 800846a:	bf08      	it	eq
 800846c:	68ec      	ldreq	r4, [r5, #12]
 800846e:	e7da      	b.n	8008426 <_fflush_r+0x22>
 8008470:	080093bc 	.word	0x080093bc
 8008474:	080093dc 	.word	0x080093dc
 8008478:	0800939c 	.word	0x0800939c

0800847c <std>:
 800847c:	2300      	movs	r3, #0
 800847e:	b510      	push	{r4, lr}
 8008480:	4604      	mov	r4, r0
 8008482:	e9c0 3300 	strd	r3, r3, [r0]
 8008486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800848a:	6083      	str	r3, [r0, #8]
 800848c:	8181      	strh	r1, [r0, #12]
 800848e:	6643      	str	r3, [r0, #100]	; 0x64
 8008490:	81c2      	strh	r2, [r0, #14]
 8008492:	6183      	str	r3, [r0, #24]
 8008494:	4619      	mov	r1, r3
 8008496:	2208      	movs	r2, #8
 8008498:	305c      	adds	r0, #92	; 0x5c
 800849a:	f7fd fb65 	bl	8005b68 <memset>
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <std+0x38>)
 80084a0:	6224      	str	r4, [r4, #32]
 80084a2:	6263      	str	r3, [r4, #36]	; 0x24
 80084a4:	4b04      	ldr	r3, [pc, #16]	; (80084b8 <std+0x3c>)
 80084a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80084a8:	4b04      	ldr	r3, [pc, #16]	; (80084bc <std+0x40>)
 80084aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <std+0x44>)
 80084ae:	6323      	str	r3, [r4, #48]	; 0x30
 80084b0:	bd10      	pop	{r4, pc}
 80084b2:	bf00      	nop
 80084b4:	080087d1 	.word	0x080087d1
 80084b8:	080087f3 	.word	0x080087f3
 80084bc:	0800882b 	.word	0x0800882b
 80084c0:	0800884f 	.word	0x0800884f

080084c4 <_cleanup_r>:
 80084c4:	4901      	ldr	r1, [pc, #4]	; (80084cc <_cleanup_r+0x8>)
 80084c6:	f000 b8af 	b.w	8008628 <_fwalk_reent>
 80084ca:	bf00      	nop
 80084cc:	08008405 	.word	0x08008405

080084d0 <__sfmoreglue>:
 80084d0:	2268      	movs	r2, #104	; 0x68
 80084d2:	b570      	push	{r4, r5, r6, lr}
 80084d4:	1e4d      	subs	r5, r1, #1
 80084d6:	4355      	muls	r5, r2
 80084d8:	460e      	mov	r6, r1
 80084da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084de:	f7ff fa6b 	bl	80079b8 <_malloc_r>
 80084e2:	4604      	mov	r4, r0
 80084e4:	b140      	cbz	r0, 80084f8 <__sfmoreglue+0x28>
 80084e6:	2100      	movs	r1, #0
 80084e8:	e9c0 1600 	strd	r1, r6, [r0]
 80084ec:	300c      	adds	r0, #12
 80084ee:	60a0      	str	r0, [r4, #8]
 80084f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084f4:	f7fd fb38 	bl	8005b68 <memset>
 80084f8:	4620      	mov	r0, r4
 80084fa:	bd70      	pop	{r4, r5, r6, pc}

080084fc <__sfp_lock_acquire>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__sfp_lock_acquire+0x8>)
 80084fe:	f000 b8b3 	b.w	8008668 <__retarget_lock_acquire_recursive>
 8008502:	bf00      	nop
 8008504:	2000043d 	.word	0x2000043d

08008508 <__sfp_lock_release>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__sfp_lock_release+0x8>)
 800850a:	f000 b8ae 	b.w	800866a <__retarget_lock_release_recursive>
 800850e:	bf00      	nop
 8008510:	2000043d 	.word	0x2000043d

08008514 <__sinit_lock_acquire>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__sinit_lock_acquire+0x8>)
 8008516:	f000 b8a7 	b.w	8008668 <__retarget_lock_acquire_recursive>
 800851a:	bf00      	nop
 800851c:	2000043e 	.word	0x2000043e

08008520 <__sinit_lock_release>:
 8008520:	4801      	ldr	r0, [pc, #4]	; (8008528 <__sinit_lock_release+0x8>)
 8008522:	f000 b8a2 	b.w	800866a <__retarget_lock_release_recursive>
 8008526:	bf00      	nop
 8008528:	2000043e 	.word	0x2000043e

0800852c <__sinit>:
 800852c:	b510      	push	{r4, lr}
 800852e:	4604      	mov	r4, r0
 8008530:	f7ff fff0 	bl	8008514 <__sinit_lock_acquire>
 8008534:	69a3      	ldr	r3, [r4, #24]
 8008536:	b11b      	cbz	r3, 8008540 <__sinit+0x14>
 8008538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800853c:	f7ff bff0 	b.w	8008520 <__sinit_lock_release>
 8008540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008544:	6523      	str	r3, [r4, #80]	; 0x50
 8008546:	4b13      	ldr	r3, [pc, #76]	; (8008594 <__sinit+0x68>)
 8008548:	4a13      	ldr	r2, [pc, #76]	; (8008598 <__sinit+0x6c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	62a2      	str	r2, [r4, #40]	; 0x28
 800854e:	42a3      	cmp	r3, r4
 8008550:	bf08      	it	eq
 8008552:	2301      	moveq	r3, #1
 8008554:	4620      	mov	r0, r4
 8008556:	bf08      	it	eq
 8008558:	61a3      	streq	r3, [r4, #24]
 800855a:	f000 f81f 	bl	800859c <__sfp>
 800855e:	6060      	str	r0, [r4, #4]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 f81b 	bl	800859c <__sfp>
 8008566:	60a0      	str	r0, [r4, #8]
 8008568:	4620      	mov	r0, r4
 800856a:	f000 f817 	bl	800859c <__sfp>
 800856e:	2200      	movs	r2, #0
 8008570:	2104      	movs	r1, #4
 8008572:	60e0      	str	r0, [r4, #12]
 8008574:	6860      	ldr	r0, [r4, #4]
 8008576:	f7ff ff81 	bl	800847c <std>
 800857a:	2201      	movs	r2, #1
 800857c:	2109      	movs	r1, #9
 800857e:	68a0      	ldr	r0, [r4, #8]
 8008580:	f7ff ff7c 	bl	800847c <std>
 8008584:	2202      	movs	r2, #2
 8008586:	2112      	movs	r1, #18
 8008588:	68e0      	ldr	r0, [r4, #12]
 800858a:	f7ff ff77 	bl	800847c <std>
 800858e:	2301      	movs	r3, #1
 8008590:	61a3      	str	r3, [r4, #24]
 8008592:	e7d1      	b.n	8008538 <__sinit+0xc>
 8008594:	08009024 	.word	0x08009024
 8008598:	080084c5 	.word	0x080084c5

0800859c <__sfp>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	4607      	mov	r7, r0
 80085a0:	f7ff ffac 	bl	80084fc <__sfp_lock_acquire>
 80085a4:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <__sfp+0x84>)
 80085a6:	681e      	ldr	r6, [r3, #0]
 80085a8:	69b3      	ldr	r3, [r6, #24]
 80085aa:	b913      	cbnz	r3, 80085b2 <__sfp+0x16>
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff ffbd 	bl	800852c <__sinit>
 80085b2:	3648      	adds	r6, #72	; 0x48
 80085b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	d503      	bpl.n	80085c4 <__sfp+0x28>
 80085bc:	6833      	ldr	r3, [r6, #0]
 80085be:	b30b      	cbz	r3, 8008604 <__sfp+0x68>
 80085c0:	6836      	ldr	r6, [r6, #0]
 80085c2:	e7f7      	b.n	80085b4 <__sfp+0x18>
 80085c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085c8:	b9d5      	cbnz	r5, 8008600 <__sfp+0x64>
 80085ca:	4b16      	ldr	r3, [pc, #88]	; (8008624 <__sfp+0x88>)
 80085cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085d0:	60e3      	str	r3, [r4, #12]
 80085d2:	6665      	str	r5, [r4, #100]	; 0x64
 80085d4:	f000 f847 	bl	8008666 <__retarget_lock_init_recursive>
 80085d8:	f7ff ff96 	bl	8008508 <__sfp_lock_release>
 80085dc:	2208      	movs	r2, #8
 80085de:	4629      	mov	r1, r5
 80085e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085e8:	6025      	str	r5, [r4, #0]
 80085ea:	61a5      	str	r5, [r4, #24]
 80085ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085f0:	f7fd faba 	bl	8005b68 <memset>
 80085f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085fc:	4620      	mov	r0, r4
 80085fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008600:	3468      	adds	r4, #104	; 0x68
 8008602:	e7d9      	b.n	80085b8 <__sfp+0x1c>
 8008604:	2104      	movs	r1, #4
 8008606:	4638      	mov	r0, r7
 8008608:	f7ff ff62 	bl	80084d0 <__sfmoreglue>
 800860c:	4604      	mov	r4, r0
 800860e:	6030      	str	r0, [r6, #0]
 8008610:	2800      	cmp	r0, #0
 8008612:	d1d5      	bne.n	80085c0 <__sfp+0x24>
 8008614:	f7ff ff78 	bl	8008508 <__sfp_lock_release>
 8008618:	230c      	movs	r3, #12
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	e7ee      	b.n	80085fc <__sfp+0x60>
 800861e:	bf00      	nop
 8008620:	08009024 	.word	0x08009024
 8008624:	ffff0001 	.word	0xffff0001

08008628 <_fwalk_reent>:
 8008628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800862c:	4606      	mov	r6, r0
 800862e:	4688      	mov	r8, r1
 8008630:	2700      	movs	r7, #0
 8008632:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008636:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800863a:	f1b9 0901 	subs.w	r9, r9, #1
 800863e:	d505      	bpl.n	800864c <_fwalk_reent+0x24>
 8008640:	6824      	ldr	r4, [r4, #0]
 8008642:	2c00      	cmp	r4, #0
 8008644:	d1f7      	bne.n	8008636 <_fwalk_reent+0xe>
 8008646:	4638      	mov	r0, r7
 8008648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800864c:	89ab      	ldrh	r3, [r5, #12]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d907      	bls.n	8008662 <_fwalk_reent+0x3a>
 8008652:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008656:	3301      	adds	r3, #1
 8008658:	d003      	beq.n	8008662 <_fwalk_reent+0x3a>
 800865a:	4629      	mov	r1, r5
 800865c:	4630      	mov	r0, r6
 800865e:	47c0      	blx	r8
 8008660:	4307      	orrs	r7, r0
 8008662:	3568      	adds	r5, #104	; 0x68
 8008664:	e7e9      	b.n	800863a <_fwalk_reent+0x12>

08008666 <__retarget_lock_init_recursive>:
 8008666:	4770      	bx	lr

08008668 <__retarget_lock_acquire_recursive>:
 8008668:	4770      	bx	lr

0800866a <__retarget_lock_release_recursive>:
 800866a:	4770      	bx	lr

0800866c <__swhatbuf_r>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	460e      	mov	r6, r1
 8008670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008674:	4614      	mov	r4, r2
 8008676:	2900      	cmp	r1, #0
 8008678:	461d      	mov	r5, r3
 800867a:	b096      	sub	sp, #88	; 0x58
 800867c:	da08      	bge.n	8008690 <__swhatbuf_r+0x24>
 800867e:	2200      	movs	r2, #0
 8008680:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008684:	602a      	str	r2, [r5, #0]
 8008686:	061a      	lsls	r2, r3, #24
 8008688:	d410      	bmi.n	80086ac <__swhatbuf_r+0x40>
 800868a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868e:	e00e      	b.n	80086ae <__swhatbuf_r+0x42>
 8008690:	466a      	mov	r2, sp
 8008692:	f000 f903 	bl	800889c <_fstat_r>
 8008696:	2800      	cmp	r0, #0
 8008698:	dbf1      	blt.n	800867e <__swhatbuf_r+0x12>
 800869a:	9a01      	ldr	r2, [sp, #4]
 800869c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086a4:	425a      	negs	r2, r3
 80086a6:	415a      	adcs	r2, r3
 80086a8:	602a      	str	r2, [r5, #0]
 80086aa:	e7ee      	b.n	800868a <__swhatbuf_r+0x1e>
 80086ac:	2340      	movs	r3, #64	; 0x40
 80086ae:	2000      	movs	r0, #0
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	b016      	add	sp, #88	; 0x58
 80086b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080086b8 <__smakebuf_r>:
 80086b8:	898b      	ldrh	r3, [r1, #12]
 80086ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086bc:	079d      	lsls	r5, r3, #30
 80086be:	4606      	mov	r6, r0
 80086c0:	460c      	mov	r4, r1
 80086c2:	d507      	bpl.n	80086d4 <__smakebuf_r+0x1c>
 80086c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	6123      	str	r3, [r4, #16]
 80086cc:	2301      	movs	r3, #1
 80086ce:	6163      	str	r3, [r4, #20]
 80086d0:	b002      	add	sp, #8
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	466a      	mov	r2, sp
 80086d6:	ab01      	add	r3, sp, #4
 80086d8:	f7ff ffc8 	bl	800866c <__swhatbuf_r>
 80086dc:	9900      	ldr	r1, [sp, #0]
 80086de:	4605      	mov	r5, r0
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7ff f969 	bl	80079b8 <_malloc_r>
 80086e6:	b948      	cbnz	r0, 80086fc <__smakebuf_r+0x44>
 80086e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ec:	059a      	lsls	r2, r3, #22
 80086ee:	d4ef      	bmi.n	80086d0 <__smakebuf_r+0x18>
 80086f0:	f023 0303 	bic.w	r3, r3, #3
 80086f4:	f043 0302 	orr.w	r3, r3, #2
 80086f8:	81a3      	strh	r3, [r4, #12]
 80086fa:	e7e3      	b.n	80086c4 <__smakebuf_r+0xc>
 80086fc:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <__smakebuf_r+0x7c>)
 80086fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	6020      	str	r0, [r4, #0]
 8008704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	9b00      	ldr	r3, [sp, #0]
 800870c:	6120      	str	r0, [r4, #16]
 800870e:	6163      	str	r3, [r4, #20]
 8008710:	9b01      	ldr	r3, [sp, #4]
 8008712:	b15b      	cbz	r3, 800872c <__smakebuf_r+0x74>
 8008714:	4630      	mov	r0, r6
 8008716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800871a:	f000 f8d1 	bl	80088c0 <_isatty_r>
 800871e:	b128      	cbz	r0, 800872c <__smakebuf_r+0x74>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	f023 0303 	bic.w	r3, r3, #3
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	89a0      	ldrh	r0, [r4, #12]
 800872e:	4305      	orrs	r5, r0
 8008730:	81a5      	strh	r5, [r4, #12]
 8008732:	e7cd      	b.n	80086d0 <__smakebuf_r+0x18>
 8008734:	080084c5 	.word	0x080084c5

08008738 <_malloc_usable_size_r>:
 8008738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800873c:	1f18      	subs	r0, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	bfbc      	itt	lt
 8008742:	580b      	ldrlt	r3, [r1, r0]
 8008744:	18c0      	addlt	r0, r0, r3
 8008746:	4770      	bx	lr

08008748 <_raise_r>:
 8008748:	291f      	cmp	r1, #31
 800874a:	b538      	push	{r3, r4, r5, lr}
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	d904      	bls.n	800875c <_raise_r+0x14>
 8008752:	2316      	movs	r3, #22
 8008754:	6003      	str	r3, [r0, #0]
 8008756:	f04f 30ff 	mov.w	r0, #4294967295
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800875e:	b112      	cbz	r2, 8008766 <_raise_r+0x1e>
 8008760:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008764:	b94b      	cbnz	r3, 800877a <_raise_r+0x32>
 8008766:	4620      	mov	r0, r4
 8008768:	f000 f830 	bl	80087cc <_getpid_r>
 800876c:	462a      	mov	r2, r5
 800876e:	4601      	mov	r1, r0
 8008770:	4620      	mov	r0, r4
 8008772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008776:	f000 b817 	b.w	80087a8 <_kill_r>
 800877a:	2b01      	cmp	r3, #1
 800877c:	d00a      	beq.n	8008794 <_raise_r+0x4c>
 800877e:	1c59      	adds	r1, r3, #1
 8008780:	d103      	bne.n	800878a <_raise_r+0x42>
 8008782:	2316      	movs	r3, #22
 8008784:	6003      	str	r3, [r0, #0]
 8008786:	2001      	movs	r0, #1
 8008788:	e7e7      	b.n	800875a <_raise_r+0x12>
 800878a:	2400      	movs	r4, #0
 800878c:	4628      	mov	r0, r5
 800878e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008792:	4798      	blx	r3
 8008794:	2000      	movs	r0, #0
 8008796:	e7e0      	b.n	800875a <_raise_r+0x12>

08008798 <raise>:
 8008798:	4b02      	ldr	r3, [pc, #8]	; (80087a4 <raise+0xc>)
 800879a:	4601      	mov	r1, r0
 800879c:	6818      	ldr	r0, [r3, #0]
 800879e:	f7ff bfd3 	b.w	8008748 <_raise_r>
 80087a2:	bf00      	nop
 80087a4:	20000014 	.word	0x20000014

080087a8 <_kill_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	2300      	movs	r3, #0
 80087ac:	4d06      	ldr	r5, [pc, #24]	; (80087c8 <_kill_r+0x20>)
 80087ae:	4604      	mov	r4, r0
 80087b0:	4608      	mov	r0, r1
 80087b2:	4611      	mov	r1, r2
 80087b4:	602b      	str	r3, [r5, #0]
 80087b6:	f7fa fa84 	bl	8002cc2 <_kill>
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	d102      	bne.n	80087c4 <_kill_r+0x1c>
 80087be:	682b      	ldr	r3, [r5, #0]
 80087c0:	b103      	cbz	r3, 80087c4 <_kill_r+0x1c>
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop
 80087c8:	20000438 	.word	0x20000438

080087cc <_getpid_r>:
 80087cc:	f7fa ba72 	b.w	8002cb4 <_getpid>

080087d0 <__sread>:
 80087d0:	b510      	push	{r4, lr}
 80087d2:	460c      	mov	r4, r1
 80087d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d8:	f000 f894 	bl	8008904 <_read_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	bfab      	itete	ge
 80087e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087e2:	89a3      	ldrhlt	r3, [r4, #12]
 80087e4:	181b      	addge	r3, r3, r0
 80087e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087ea:	bfac      	ite	ge
 80087ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80087ee:	81a3      	strhlt	r3, [r4, #12]
 80087f0:	bd10      	pop	{r4, pc}

080087f2 <__swrite>:
 80087f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f6:	461f      	mov	r7, r3
 80087f8:	898b      	ldrh	r3, [r1, #12]
 80087fa:	4605      	mov	r5, r0
 80087fc:	05db      	lsls	r3, r3, #23
 80087fe:	460c      	mov	r4, r1
 8008800:	4616      	mov	r6, r2
 8008802:	d505      	bpl.n	8008810 <__swrite+0x1e>
 8008804:	2302      	movs	r3, #2
 8008806:	2200      	movs	r2, #0
 8008808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800880c:	f000 f868 	bl	80088e0 <_lseek_r>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	4632      	mov	r2, r6
 8008814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	4628      	mov	r0, r5
 800881c:	463b      	mov	r3, r7
 800881e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	f000 b817 	b.w	8008858 <_write_r>

0800882a <__sseek>:
 800882a:	b510      	push	{r4, lr}
 800882c:	460c      	mov	r4, r1
 800882e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008832:	f000 f855 	bl	80088e0 <_lseek_r>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	bf15      	itete	ne
 800883c:	6560      	strne	r0, [r4, #84]	; 0x54
 800883e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008846:	81a3      	strheq	r3, [r4, #12]
 8008848:	bf18      	it	ne
 800884a:	81a3      	strhne	r3, [r4, #12]
 800884c:	bd10      	pop	{r4, pc}

0800884e <__sclose>:
 800884e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008852:	f000 b813 	b.w	800887c <_close_r>
	...

08008858 <_write_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	4611      	mov	r1, r2
 8008860:	2200      	movs	r2, #0
 8008862:	4d05      	ldr	r5, [pc, #20]	; (8008878 <_write_r+0x20>)
 8008864:	602a      	str	r2, [r5, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	f7fa fa62 	bl	8002d30 <_write>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_write_r+0x1e>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_write_r+0x1e>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20000438 	.word	0x20000438

0800887c <_close_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	2300      	movs	r3, #0
 8008880:	4d05      	ldr	r5, [pc, #20]	; (8008898 <_close_r+0x1c>)
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	f7fa fa6e 	bl	8002d68 <_close>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_close_r+0x1a>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_close_r+0x1a>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	20000438 	.word	0x20000438

0800889c <_fstat_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	2300      	movs	r3, #0
 80088a0:	4d06      	ldr	r5, [pc, #24]	; (80088bc <_fstat_r+0x20>)
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	4611      	mov	r1, r2
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	f7fa fa68 	bl	8002d7e <_fstat>
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	d102      	bne.n	80088b8 <_fstat_r+0x1c>
 80088b2:	682b      	ldr	r3, [r5, #0]
 80088b4:	b103      	cbz	r3, 80088b8 <_fstat_r+0x1c>
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	bd38      	pop	{r3, r4, r5, pc}
 80088ba:	bf00      	nop
 80088bc:	20000438 	.word	0x20000438

080088c0 <_isatty_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	2300      	movs	r3, #0
 80088c4:	4d05      	ldr	r5, [pc, #20]	; (80088dc <_isatty_r+0x1c>)
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7fa fa66 	bl	8002d9c <_isatty>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_isatty_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_isatty_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	20000438 	.word	0x20000438

080088e0 <_lseek_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4604      	mov	r4, r0
 80088e4:	4608      	mov	r0, r1
 80088e6:	4611      	mov	r1, r2
 80088e8:	2200      	movs	r2, #0
 80088ea:	4d05      	ldr	r5, [pc, #20]	; (8008900 <_lseek_r+0x20>)
 80088ec:	602a      	str	r2, [r5, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f7fa fa5e 	bl	8002db0 <_lseek>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_lseek_r+0x1e>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_lseek_r+0x1e>
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20000438 	.word	0x20000438

08008904 <_read_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	4611      	mov	r1, r2
 800890c:	2200      	movs	r2, #0
 800890e:	4d05      	ldr	r5, [pc, #20]	; (8008924 <_read_r+0x20>)
 8008910:	602a      	str	r2, [r5, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	f7fa f9ef 	bl	8002cf6 <_read>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d102      	bne.n	8008922 <_read_r+0x1e>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b103      	cbz	r3, 8008922 <_read_r+0x1e>
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	20000438 	.word	0x20000438

08008928 <_init>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr

08008934 <_fini>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	bf00      	nop
 8008938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893a:	bc08      	pop	{r3}
 800893c:	469e      	mov	lr, r3
 800893e:	4770      	bx	lr
